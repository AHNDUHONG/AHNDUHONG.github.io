<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Winters Blog</title>
  
  
  <link href="https://ahnduhong.github.io/atom.xml" rel="self"/>
  
  <link href="https://ahnduhong.github.io/"/>
  <updated>2022-05-27T08:13:29.777Z</updated>
  <id>https://ahnduhong.github.io/</id>
  
  <author>
    <name>Winters</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Heroku 배포</title>
    <link href="https://ahnduhong.github.io/2022/05/27/Heroku_distribute/"/>
    <id>https://ahnduhong.github.io/2022/05/27/Heroku_distribute/</id>
    <published>2022-05-27T00:00:00.000Z</published>
    <updated>2022-05-27T08:13:29.777Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>이 글은 <a href="https://velog.io/@ansfls/Heroku%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%9B%B9-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0">https:&#x2F;&#x2F;velog.io&#x2F;@ansfls&#x2F;Heroku로-간단하게-웹-사이트-배포하기</a> 사이트를 참고하여 작성되었습니다.</p><hr></li></ul><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>Heroku를 이용하여 웹 사이트에 내 프로젝트 소스를 배포를 하는 방법을 설명한다.</li></ul><h2 id="Heroku란"><a href="#Heroku란" class="headerlink" title="Heroku란"></a>Heroku란</h2><ul><li>Java, Node.js, Python 등 여러 언어를 지원하는 Paas (Platform-as-a-service) 클라우드 서비스로 간단한 클라우드 기반의 어플리케이션 플랫폼이다.</li><li>Paas (Platform-as-a-service)란<ul><li>서비스로서의 플랫폼(Platform-as-a-service, PaaS)은 하드웨어 및 애플리케이션 소프트웨어 플랫폼이 제3사를 통해 제공되는 <a href="https://www.redhat.com/ko/topics/cloud">클라우드 컴퓨팅의</a><br>   한 형식입니다. 주로 개발자와 프로그래머가 사용하는 PaaS는 보통 해당 프로세스와 관련된 <a href="https://www.redhat.com/ko/topics/cloud-computing/what-is-it-infrastructure">인프라</a><br>   또는 플랫폼을 구축하고 유지관리할 필요 없이 자체 애플리케이션을 개발, 실행 및 <a href="https://www.redhat.com/ko/topics/management">관리</a><br>   할 수 있도록 해줍니다.<ul><li>출처 : <a href="https://www.redhat.com/ko/topics/cloud-computing/what-is-paas">https://www.redhat.com/ko/topics/cloud-computing/what-is-paas</a></li></ul></li></ul></li></ul><hr><h1 id="Step-1-Heroku-가입-및-App-생성"><a href="#Step-1-Heroku-가입-및-App-생성" class="headerlink" title="Step 1. Heroku 가입 및 App 생성"></a>Step 1. Heroku 가입 및 App 생성</h1><ul><li>아래 링크를 통해 회원가입을 한다.<ul><li><p><a href="https://id.heroku.com/login">https://id.heroku.com/login</a></p><p>  <img src="/images/Heroku_distribute/1.png" alt="png"></p></li></ul></li></ul><hr><ul><li><p>아래 사진 처럼 두개의 탭이 보이는데 <u><span style="color:red"><code>Create a new app</code></span></u> 탭을 클릭한다.</p><p>  <img src="/images/Heroku_distribute/2.png" alt="png"></p></li></ul><hr><ul><li><p>App name 설정 및 region을 United States로 설정한다.(무료 이용을 하려면 지역을 United States로 해야한다.)</p><p>  <img src="/images/Heroku_distribute/3.png" alt="png"></p><hr></li></ul><h1 id="Step-2-Heroku-CLI-설치"><a href="#Step-2-Heroku-CLI-설치" class="headerlink" title="Step 2. Heroku CLI 설치"></a>Step 2. Heroku CLI 설치</h1><ul><li>이제 Heroku에 내 프로젝트 소스를 올리기 위해 Heroku CLI를 아래 링크를 통해 설치해줘야 한다. (사용 중인 OS에 맞게 다운로드 해서 설치하면 된다)<ul><li>Heroku CLI 링크 : <a href="https://devcenter.heroku.com/articles/heroku-cli">https://devcenter.heroku.com/articles/heroku-cli</a>  <img src="/images/Heroku_distribute/4.png" alt="png"><hr>  <img src="/images/Heroku_distribute/5.png" alt="png"></li></ul></li></ul><hr><ul><li><p>관리자 권한으로 실행하여 아래 체크 박스를 모두 체크한 뒤 next를 눌러 다운로드 받아준다.</p><p>  <img src="/images/Heroku_distribute/6.png" alt="png"></p></li></ul><hr><ul><li>관리자 프롬프트(CMD)나 각 터미널을 실행하여 설치가 잘 되었는지 확인한다. ( 필자는 VS Code를 이용하여 Gitbash 터미널을 사용하였다.)  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku --version</span><br></pre></td></tr></table></figure>  <img src="/images/Heroku_distribute/7.png" alt="png"></li></ul><hr><h1 id="Step-3-Github-Repository-생성"><a href="#Step-3-Github-Repository-생성" class="headerlink" title="Step 3 Github Repository 생성"></a>Step 3 Github Repository 생성</h1><ul><li>Github 페이지로 들어가 Repository를 생성하여 이름을 Heroku에서 생성한 App 이름과 같이 작성한다.  <img src="/images/Heroku_distribute/8.png" alt="png"><hr>  <img src="/images/Heroku_distribute/9.png" alt="png"></li></ul><hr><h1 id="Step-4-Heroku-로그인-및-배포"><a href="#Step-4-Heroku-로그인-및-배포" class="headerlink" title="Step 4. Heroku 로그인 및 배포"></a>Step 4. Heroku 로그인 및 배포</h1><ul><li>위에서 실행했던 터미널에 아래 코드를 입력하여 Heroku 로그인을 진행한다.  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku login</span><br></pre></td></tr></table></figure><hr>  <img src="/images/Heroku_distribute/10.png" alt="png"><hr>  <img src="/images/Heroku_distribute/11.png" alt="png"></li></ul><hr><ul><li><p>경로를 생성한 프로젝트의 폴더로 이동한 뒤 다음 명령어를 통해 git repository를 연결한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ heroku git:remote -a &lt;app-name&gt;</span><br></pre></td></tr></table></figure><hr><p>  <img src="/images/Heroku_distribute/12.png" alt="png"></p><hr></li><li><p>아래와 같이 <u><span style="color:red"><code>Method Not Allowed</code></span></u> 가 나오면 정상이다</p><p>  <img src="/images/Heroku_distribute/13.png" alt="png"></p></li></ul><hr><ul><li><p>git 사용법과 동일하게 프로젝트를 <u><span style="color:red"><code>add</code></span></u> → <u><span style="color:red"><code>commit</code></span></u> → <u><span style="color:red"><code>push</code></u></span> 한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -am <span class="string">&quot;first commit&quot;</span></span><br><span class="line">$ git push heroku master </span><br><span class="line"><span class="comment"># git push 에서 에러가 발생한다면 git push heroku HEAD:master로 하길</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><u><span style="color:red"><code>Verifying deploy... done.</code></span></u> 메세지가 나오면 정상적으로 Git 연동 완료</li></ul><p><img src="/images/Heroku_distribute/14.png" alt="png"></p><hr><h1 id="Step-5-웹상-확인"><a href="#Step-5-웹상-확인" class="headerlink" title="Step 5. 웹상 확인"></a>Step 5. 웹상 확인</h1><ul><li>만든 App Name을 아래 주소를 이용하여 맞게 수정하여 확인 (필자는 main.py에 만든 로직을 통하여 Hello world! 를 출력하도록 설정함)<ul><li><a href="https://finance-test-winters.herokuapp.com/">https://finance-test-winters.herokuapp.com/</a>  <img src="/images/Heroku_distribute/15.png" alt="png"><hr>  <img src="/images/Heroku_distribute/16.png" alt="png"><hr></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;이 글은 &lt;a href=&quot;https://velog.io/@ansfls/Heroku%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%9B%B9-%EC%82%AC%EC%9D%B4%ED%8A%B</summary>
      
    
    
    
    <category term="Heroku" scheme="https://ahnduhong.github.io/categories/Heroku/"/>
    
    
    <category term="Heroku" scheme="https://ahnduhong.github.io/tags/Heroku/"/>
    
  </entry>
  
  <entry>
    <title>[Git hub] 다른사람과 프로젝트 관리하는 법</title>
    <link href="https://ahnduhong.github.io/2022/05/12/Github_with_members/"/>
    <id>https://ahnduhong.github.io/2022/05/12/Github_with_members/</id>
    <published>2022-05-12T00:00:00.000Z</published>
    <updated>2022-05-12T14:41:42.951Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 <a href="https://velog.io/@debut12/Github-%EC%97%AC%EB%9F%AC-%EB%AA%85%EA%B3%BC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B3%B5%EC%9C%A0%ED%95%98%EA%B8%B0">https:&#x2F;&#x2F;velog.io&#x2F;@debut12&#x2F;Github-여러-명과-프로젝트-공유하기</a> 블로그를 참고하여 작성 된 글입니다.</li></ul><hr><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>Git hub의 새로운 Repository를 만들어 팀원들과 함께 관리를 할 수 있게 권한을 주는 과정을 설명한다.</li></ul><h1 id="Step-1-Repositoy-생성"><a href="#Step-1-Repositoy-생성" class="headerlink" title="Step 1. Repositoy 생성"></a>Step 1. Repositoy 생성</h1><ul><li><p>Git hub 홈페이지 repository를 생성해준다.</p><ul><li>아래 체크 박스에 있는 항목들은 필요에 따라서 선택적으로 체크하면 된다.</li></ul><p>  <img src="/images/Github_with_members/1.png" alt="png"></p></li></ul><hr><h1 id="Step-2-폴더에-Git-연동하기"><a href="#Step-2-폴더에-Git-연동하기" class="headerlink" title="Step 2. 폴더에 Git 연동하기"></a>Step 2. 폴더에 Git 연동하기</h1><ul><li><p>아래 사진의 네모 상자의 코드를 입력하면 연동이 완료된다.( 기존 git hub 새로운 repository연동과 같다)</p><p>  <img src="/images/Github_with_members/2.png" alt="png"></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# Kakaotalk_chatbot_finance_&quot;</span> &gt;&gt; README.md       <span class="comment"># READ.ME 파일에 &quot; &quot; 부분이 입력이 된다.</span></span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/AHNDUHONG/Kakaotalk_chatbot_finance_.git</span><br><span class="line">git push -u origin main            <span class="comment"># git push &lt;remote&gt; &lt;branch&gt;로 한번 저장하여 베포한 뒤 git push만으로 베포 가능</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 이 코드는 필자가 만든 Repository에 맞게 생성된 코드들이기 때문에 각자 Repository에 맞게</span></span><br><span class="line"><span class="comment"># 수정하길 바란다.</span></span><br></pre></td></tr></table></figure><hr></li><li><p>필자는 repository에 이미 만들어진 폴더가 있기 때문에 git push를 입력 했을때 오류가 발생했다.</p><p>  <img src="/images/Github_with_members/3.png" alt="png"></p><p>  <img src="/images/Github_with_members/4.png" alt="png"></p></li></ul><hr><h3 id="Git-연동-과정-중-오류-발생-및-해결"><a href="#Git-연동-과정-중-오류-발생-및-해결" class="headerlink" title="Git 연동 과정 중 오류 발생 및 해결"></a>Git 연동 과정 중 오류 발생 및 해결</h3><ul><li><p>위의 오류는 내 컴퓨터 저장소의 폴더에 없는 파일이 이미 내 Github Repository에 기록 되어있기때문에 생기는 것 이므로 <u><span style="color:red"><code>git pull</code></span></u>로 파일을 가져오기로 한다.</p><ul><li><u><span style="color:red"><code>git remote -v</code></span></u> 로 원격 저장소 이름을 확인 한다.</li></ul><p>  <img src="/images/Github_with_members/5.png" alt="png"></p><hr><ul><li><p>위 사진으로 확인한 origin 저장소를 main branch로 pull을 하기 위해 <u><span style="color:red"><code>git pull origin main</code></span></u> 작성</p><p>  <img src="/images/Github_with_members/6.png" alt="png"></p><hr></li><li><p><u><span style="color:red"><code>fatal: refusing to merge unrelated histories</code></span></u> 오류가 발생하여 <u><span style="color:red"><code>git pull origin 브런치명 --allow-unrelated-histories</code></span></u> 을 사용하여 오류 해결</p><ul><li><u><span style="color:red"><code>--allow-unrelated-histories</code></span></u> 이 명령 옵션은 이미 존재하는 두 프로젝트의 기록(history)을 저장하는 드문 상황에 사용된다고 한다. 즉, git에서는 서로 관련 기록이 없는 이질적인 두 프로젝트를 병합할 때 기본적으로 거부하는데, 이것을 허용해 주는 것이다.<ul><li>참고 URL: <a href="https://gdtbgl93.tistory.com/63">https://gdtbgl93.tistory.com/63</a></li></ul></li></ul><p>  <img src="/images/Github_with_members/7.png" alt="png"></p><hr></li></ul></li><li><p>아래와 같이 bash 폴더가 생성되면 성공적으로 파일을 Git에 연동한 것이다.</p><p>  <img src="/images/Github_with_members/8.png" alt="png"></p><hr></li></ul><h1 id="Step-3-Git-Contributors-추가하기-다른-사람에게-Repository-수정-및-생성-권한-주기"><a href="#Step-3-Git-Contributors-추가하기-다른-사람에게-Repository-수정-및-생성-권한-주기" class="headerlink" title="Step 3. Git Contributors 추가하기 (다른 사람에게 Repository 수정 및 생성 권한 주기)"></a>Step 3. Git Contributors 추가하기 (다른 사람에게 Repository 수정 및 생성 권한 주기)</h1><ul><li><p>Github 홈페이지로 돌아와서 각자가 만든 Repository에 접속하여 Settings &gt; Collaborators &gt; Manage access 경로로 들어가 Add people로 권한을 줄 사람을 추가한다.</p><p>  <img src="/images/Github_with_members/9.png" alt="png"></p><hr></li><li><p>Github <strong>USERNAME, FULL NAME, Email</strong> 으로 추가가 가능하다.</p><p>  <img src="/images/Github_with_members/10.png" alt="png"></p><hr></li><li><p>추가한 사람의 허용을 받으면 Pending Invite 가 사라진다.</p><p>  <img src="/images/Github_with_members/11.png" alt="png"></p><hr></li></ul><h1 id="Step-4-Branch-만들기"><a href="#Step-4-Branch-만들기" class="headerlink" title="Step 4. Branch 만들기"></a>Step 4. Branch 만들기</h1><ul><li><p>Branch 확인을 한다</p><ul><li>필자가 현재 사용하고 있는 branch는 master다.</li><li>아래 사진은 모든 branch를 *로 나타내고 그 중 현재 사용중인 branch를 <u><span style="color:green"><strong>초록색</strong></span></u>으로 보여준다.</li></ul><p>  <img src="/images/Github_with_members/12.png" alt="png"></p><hr></li><li><p>Branch 만들기</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch (`원하는 branch명`)</span><br></pre></td></tr></table></figure></li><li><p>Branch 확인</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p>필자는 팀원의 개개인의 이니셜로 Branch를 생성했다.</p><p>  <img src="/images/Github_with_members/13.png" alt="png"></p><hr></li><li><p>개개인의 Branch로 접속하는 코드는 아래와 같다</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;Branch명&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Step-5-Branch-상태에서-push-pull-하기"><a href="#Step-5-Branch-상태에서-push-pull-하기" class="headerlink" title="Step 5. Branch 상태에서 push, pull 하기"></a>Step 5. Branch 상태에서 push, pull 하기</h1><ul><li><strong>Push</strong><ul><li><p>임의로 README에 데이터 추가 후 <u><span style="color:red"><code>add, commit, push</code></span></u> 하기</p><blockquote><p>이때 add, commit은 동일한 방식을 사용하고 push는 맨 처음 할 때는 아래와 같은 코드를 사용 해주어야 그 뒤부터는 간단하게 push로 사용이 가능하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin &lt;branch명&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>branch를 만든 후 첫 push를 할 경우</p><blockquote><p>코드 수정</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. add</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 2. commit</span></span><br><span class="line">git commit -m <span class="string">&quot;commit할 내용&quot;</span></span><br><span class="line"><span class="comment"># 3. push</span></span><br><span class="line">git push --set-upstream origin &lt;Branch명&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></li><li><p>아래 사진과 같이 생성한 Branch로 push되었음을 확인할 수 있다.</p><p>  <img src="/images/Github_with_members/14.png" alt="png"></p></li></ul></li></ul><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul><li>git branch를 활용하여 팀 프로젝트를 진행하려면 모든 팀원이 git의 개념에 대해 정확히 알고 있어야 하므로 숙련자가 아닌 사용자가 사용하기엔 적합하지 않습니다(오류가 발생했을 시 해결하는 과정 rollback 등 복잡한 과정이 생겨 프로젝트에 대한 시간을 소모하는 것이 아닌 git에 대한 시간을 소모하는 시간이 주가 될수 있다.) 혹시나 git 개념에 대해 자세히 알고 싶으신 분은 아래의 링크를 참고하여 아래 링크부터 순차적으로 작성된 글을 보시는 것을 권합니다.<ul><li><strong><strong><a href="https://readystory.tistory.com/145">Git이란? 무엇을 저장할까?</a></strong></strong><ul><li><a href="https://readystory.tistory.com/145?category=786243">https://readystory.tistory.com/145?category=786243</a></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 &lt;a href=&quot;https://velog.io/@debut12/Github-%EC%97%AC%EB%9F%AC-%EB%AA%85%EA%B3%BC-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B3%B5</summary>
      
    
    
    
    <category term="Github" scheme="https://ahnduhong.github.io/categories/Github/"/>
    
    
    <category term="Github" scheme="https://ahnduhong.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>카카오톡 채널 만들기 및 챗봇 오픈 빌더(OBT) 신청</title>
    <link href="https://ahnduhong.github.io/2022/05/09/kakaotalk_chatbot_request/"/>
    <id>https://ahnduhong.github.io/2022/05/09/kakaotalk_chatbot_request/</id>
    <published>2022-05-09T00:00:00.000Z</published>
    <updated>2022-05-09T14:05:10.106Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 <a href="https://dschloe.github.io/settings/kakaotalk_open_builder_01/">https://dschloe.github.io/settings/kakaotalk_open_builder_01&#x2F;</a> 사이트를 참고하여 작성되었습니다.</li></ul><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><ul><li>카카오톡 채널을 만들고 챗봇 오픈 빌더(OBT)를 만드는 과정을 보여준다.</li></ul><hr><h1 id="카카오톡-채널-관리자-가입"><a href="#카카오톡-채널-관리자-가입" class="headerlink" title="카카오톡 채널 관리자 가입"></a>카카오톡 채널 관리자 가입</h1><ul><li>카카오톡 관리자 채널에서 새로운 채널을 만든다.<ul><li><p>URL : <strong><a href="https://center-pf.kakao.com/">https://center-pf.kakao.com</a></strong></p><p>  <img src="/images/kakaotalk_chatbot_request/1.png" alt="png"></p></li></ul></li></ul><hr><ul><li>프로필 사진, 채널 이름, 검색용 아이디 등  채널을 만든다.  <img src="/images/kakaotalk_chatbot_request/2.png" alt="png"><hr>  <img src="/images/kakaotalk_chatbot_request/3.png" alt="png"></li></ul><hr><h1 id="카카오톡-챗봇-오픈-빌더-OBT-신청"><a href="#카카오톡-챗봇-오픈-빌더-OBT-신청" class="headerlink" title="카카오톡 챗봇 오픈 빌더(OBT) 신청"></a>카카오톡 챗봇 오픈 빌더(OBT) 신청</h1><ul><li><p>챗봇 관리자센터 OBT를 신청해야 해당 채널 챗봇을 만들수가 있으므로 작성한 뒤 신청한다.</p></li><li><p>구글 검색창에서 카카오톡 오픈 빌더를 검색한다.</p><p>  <img src="/images/kakaotalk_chatbot_request/4.png" alt="png"></p><hr><p>  <img src="/images/kakaotalk_chatbot_request/5.png" alt="png"></p><hr></li><li><p>만들었던 카카오톡 채널 대시보드로 이동한 뒤 관리 - 상세설정 으로 들어간다.</p><p>  <img src="/images/kakaotalk_chatbot_request/6.png" alt="png"></p><hr></li><li><p>채널 URL을 복사</p><p>  <img src="/images/kakaotalk_chatbot_request/7.png" alt="png"></p></li><li><p>복사한 채널 URL을 아래 사진과 같이 붙여넣기 후 신청 사유를 작성하여 신청한다.</p><ul><li>신청사유에 자세한 사유를 입력해야 승인을 해준다고 그랬으니 참고 바랍니다.</li></ul><p>  <img src="/images/kakaotalk_chatbot_request/8.png" alt="png"></p><hr></li><li><p>아래와 같은 안내가 나오면 신청은 완료된 것이다.</p><p>  <img src="/images/kakaotalk_chatbot_request/9.png" alt="png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 &lt;a href=&quot;https://dschloe.github.io/settings/kakaotalk_open_builder_01/&quot;&gt;https://dschloe.github.io/settings/kakaotalk_open_buil</summary>
      
    
    
    
    <category term="kakaotalk" scheme="https://ahnduhong.github.io/categories/kakaotalk/"/>
    
    
    <category term="kakaotalk" scheme="https://ahnduhong.github.io/tags/kakaotalk/"/>
    
  </entry>
  
  <entry>
    <title>[Vs code] Microsoft Visual Studio Code unins000.exe 오류</title>
    <link href="https://ahnduhong.github.io/2022/05/06/VS_code_unins000_error/"/>
    <id>https://ahnduhong.github.io/2022/05/06/VS_code_unins000_error/</id>
    <published>2022-05-06T00:00:00.000Z</published>
    <updated>2022-05-06T03:51:18.961Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 필자가 경험한 오류를 해결하는 과정을 기록한 내용입니다.</li></ul><hr><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>Microsoft Visual Studio(Vs code) unins000.exe 액세스 거부로 인한 설치 오류가 발생하여 해결하는 과정을 설명한다.</li></ul><h1 id="Unins000-exe-오류"><a href="#Unins000-exe-오류" class="headerlink" title="Unins000.exe 오류"></a>Unins000.exe 오류</h1><ul><li>Vs code를 사용하는 도중 Microsoft Visual Studio(Vs code) unins000.exe 액세스 거부 오류가 발생했다.<br><img src="/images/VS_code_unins000_error/1.png" alt="png"><hr></li><li>unins000.exe 에러는 “실행시간 에러”로 프로그램을 실행 중에 발생하는 에러다, 이 에러는 Microsoft Visual Studio Code(Vs code) 프로그램의 새로운 업데이트를 실행 하려는데 사용자의 권한이 없어 발생하는 오류이다.</li></ul><h1 id="오류-해결방법"><a href="#오류-해결방법" class="headerlink" title="오류 해결방법"></a>오류 해결방법</h1><ul><li>오류 해결 방법으로는 Microsoft Visual Studio Code(VS code)가 설치되어 있는 폴더의 권한을 변경하여 액세스 오류를 해결할 수 있다.<ul><li>Microsoft VS code 폴더(기본 설치 경로는 C:&#x2F;Programfiles&#x2F;Microsoft VS code) 속성 보안 사용자에 모든 권한 허용으로 변경한 뒤 적용을 한다.</li><li>VS code를 실행할 때 관리자 권한으로 실핸한다.</li></ul></li></ul><p><a href="https://github.com/microsoft/vscode/issues/75367">https://github.com/microsoft/vscode/issues/75367</a></p><ul><li>참고 URL: <a href="https://redcow77.tistory.com/471">https://redcow77.tistory.com/471</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 필자가 경험한 오류를 해결하는 과정을 기록한 내용입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Mi</summary>
      
    
    
    
    <category term="Error" scheme="https://ahnduhong.github.io/categories/Error/"/>
    
    
    <category term="Vs code" scheme="https://ahnduhong.github.io/tags/Vs-code/"/>
    
  </entry>
  
  <entry>
    <title>VS Code Oracle 연동</title>
    <link href="https://ahnduhong.github.io/2022/04/28/VSCode_Connect_Oracle/"/>
    <id>https://ahnduhong.github.io/2022/04/28/VSCode_Connect_Oracle/</id>
    <published>2022-04-28T00:00:00.000Z</published>
    <updated>2022-04-28T14:05:25.056Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 Evan 님의 <a href="https://dschloe.github.io/sql/vscode_oracle/">https://dschloe.github.io/settings/apache_airflow_using_wsl2&#x2F;</a> 글을 참고하여 작성된 글 입니다.</li></ul><hr><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>VS code에서 오라클을 연동한다.</li></ul><h1 id="VS-Code확장-Extension"><a href="#VS-Code확장-Extension" class="headerlink" title="VS Code확장(Extension)"></a>VS Code확장(Extension)</h1><ul><li>VS Code 실행 후 사이드 바(side bar)에서 확장(Extension)을 통한 Oracle Developer Tools for VS Code를 설치한다.<br><img src="/images/VSCode_Connect_Oracle/1.png" alt="png"><hr></li><li>설치 중간에 아래와 같은 문구가 나오면 해당 파일을 설치해야 한다.<br><img src="/images/VSCode_Connect_Oracle/2.png" alt="png"><hr></li></ul><h1 id="필수-설치-파일"><a href="#필수-설치-파일" class="headerlink" title="필수 설치 파일"></a>필수 설치 파일</h1><ul><li>위 과정을 거치면 아래와 같은 홈페이지에 링크 될 것이다. <u><span style="color:red"><code>Install .NET Runtime for Windows x64</code></span></u>를 클릭하면 다운로드가 된다.<ul><li>설치 URL: <a href="https://www.oracle.com/database/technologies/appdev/dotnet/install-dotnetcore-windows.html">https://www.oracle.com/database/technologies/appdev/dotnet/install-dotnetcore-windows.html</a><br><img src="/images/VSCode_Connect_Oracle/3.png" alt="png"><hr></li></ul></li><li>설치한 파일을 실행하면 설치 관리자가 등장하는데 따로 환경설정 할 부분이 없어서 설치를 클릭하여 설치한다.<br><img src="/images/VSCode_Connect_Oracle/4.png" alt="png"><hr></li></ul><h1 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h1><ul><li><p>설치가 완료가 되면 Extension 메뉴 밑에 DB 메뉴가 활성화 되는 것을 확인 할 수 있다.<br><img src="/images/VSCode_Connect_Oracle/5.png" alt="png"></p><hr></li><li><p>여기에서 VS Code 재 시작을 하도록 한다.</p></li><li><p>빨간색으로 밑줄 친 플러스 모양을 클릭하면 New Connection 버튼이 있는데 클릭하면 새로운 Connection이 생성된다.</p><ul><li><p>단, 여기에서 새로운 Connection은 기존에 이미 만들어진 Connection을 의미한다.</p></li><li><p>따라서, 기존 SQL Developer에서 생성했던 것과 동일하게 작성을 해야한다.</p><p><img src="/images/VSCode_Connect_Oracle/6.png" alt="png"></p></li></ul></li></ul><hr><ul><li><u><span style="color:red"><code>Database host name, Port number, Serviece name, User name, Password, Connection name</code></span></u>을 확인 후 작성한다.<br><img src="/images/VSCode_Connect_Oracle/7.png" alt="png"><hr></li><li>완료 되면, 아래 그림과 같이 DB가 활성화 된 것을 확인 할 수 있다.<br><img src="/images/VSCode_Connect_Oracle/8.png" alt="png"><br><img src="/images/VSCode_Connect_Oracle/9.png" alt="png"><hr></li><li>마우스 우클릭을 하면, 새로운 쿼리 파일을 작성할 수 있다.<br><img src="/images/VSCode_Connect_Oracle/10.png" alt="png"><hr></li><li>파일을 작성하면 아래와 같이 Ctrl + E를 눌러 SQL을 실행한다.<br><img src="/images/VSCode_Connect_Oracle/11.png" alt="png"><hr></li><li>정상적으로 실행이 되면 아래와 같은 결괏값이 나온다.<br><img src="/images/VSCode_Connect_Oracle/12.png" alt="png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 Evan 님의 &lt;a href=&quot;https://dschloe.github.io/sql/vscode_oracle/&quot;&gt;https://dschloe.github.io/settings/apache_airflow_using_wsl2&amp;#x</summary>
      
    
    
    
    <category term="Oracle" scheme="https://ahnduhong.github.io/categories/Oracle/"/>
    
    
    <category term="VSCode" scheme="https://ahnduhong.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook에서 SQL 실행</title>
    <link href="https://ahnduhong.github.io/2022/04/28/JupyterNotebook_connect_sql/"/>
    <id>https://ahnduhong.github.io/2022/04/28/JupyterNotebook_connect_sql/</id>
    <published>2022-04-28T00:00:00.000Z</published>
    <updated>2022-04-28T14:28:15.105Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 <strong>Hanjeongin</strong> 님의 <a href="https://www.notion.so/Jupyter-Notebook-SQL-0973777326e2426da0797f75c09ad0bb">https://rain-grouse-1fe.notion.site/Jupyter-Notebook-SQL-0973777326e2426da0797f75c09ad0bb</a> 노션(Notion)을 참고하여 작성된 글 입니다.</li></ul><hr><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>작성한 SQL 파일 및 코드들을 Jupyter Notebook에서 실행 하기 위한 설정하는 과정을 설명한다.</li><li>필자는 평소 Jupyter Notebook을 VSCode로 실행하여 VSCode를 통해 설명을 하는데 Jupyter Lab 또는 Jupyter Notebook을 직접 실행하여 설정해도 무방하다.</li></ul><hr><h1 id="Step-1-라이브러리-설치"><a href="#Step-1-라이브러리-설치" class="headerlink" title="Step 1. 라이브러리 설치"></a>Step 1. 라이브러리 설치</h1><ul><li>공통적으로 다음 라이브러리를 설치한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython-sql</span><br></pre></td></tr></table></figure><p><img src="/images/JupyterNotebook_connect_sql/1.png" alt="png"></p><hr><ul><li><p>다음으로 접속하려는 DB에 맞춰서 라이브러리를 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sql server</span></span><br><span class="line">pip install pyodbc</span><br><span class="line"></span><br><span class="line"><span class="comment"># PostgreSQL</span></span><br><span class="line">pip install pyscopg2</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line">pip install PyMySQL</span><br><span class="line"></span><br><span class="line"><span class="comment"># Oracle</span></span><br><span class="line">pip install cx_Oracle</span><br></pre></td></tr></table></figure><p><img src="/images/JupyterNotebook_connect_sql/2.png" alt="png"></p></li></ul><hr><h1 id="Step-2-Jupyter-Notebook-SQL-연결"><a href="#Step-2-Jupyter-Notebook-SQL-연결" class="headerlink" title="Step 2. Jupyter Notebook SQL 연결"></a>Step 2. Jupyter Notebook SQL 연결</h1><ul><li>필자는 VSCode를 사용하여 Jupyter Notebook을 사용하여 VSCode를 사용하여 작성하였다.</li><li>VScode를 실행하여 아래 사진에서 밑줄 친 새 파일을 클릭하면 <u><span style="color:red"><code>Jupyter Notebook(.ipynb)</code></span></u> 형식으로 파일을 생성한다.<br><img src="/images/JupyterNotebook_connect_sql/3.png" alt="png"><hr></li><li>생성한 파일에 매직 명령어로 아래와 같은 코드를 입력한 뒤 실행하면 pakage 설치 안내창이 나오는데 설치한다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%load_ext sql</span><br></pre></td></tr></table></figure><img src="/images/JupyterNotebook_connect_sql/4.png" alt="png"></li></ul><h2 id="모듈-에러-ModuleNotFoundError-No-module-named-‘sql’"><a href="#모듈-에러-ModuleNotFoundError-No-module-named-‘sql’" class="headerlink" title="모듈 에러(ModuleNotFoundError: No module named ‘sql’)"></a>모듈 에러(<strong>ModuleNotFoundError</strong>: No module named ‘sql’)</h2><ul><li>이 에러는 sql이라는 이름의 모듈을 설치가 안되었을때 나오는 에러인데 라이브러리를 설치를 해줬는데도 불구하고 <u><span style="color:red"><code>ModuleNotFoundError: No module named &#39;sql&#39;</code></span></u> 라는 에러가 나온다. 그럴 땐 내가 설치를 한 라이브러리가 어느 경로에 저장되었는지 확인해야 한다. (필자는 설치를 할 때 나온 메세지를 통해 확인함.)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.executable   -- 현재 파일 파이썬 경로 확인</span><br></pre></td></tr></table></figure></li><li>필자는 VSCode로 생성한 파일의 파이썬 경로와 다른 경로에 설치가 되어 위와 같은 오류가 생성되었던 것이다. 그렇다고 환경 변수를 새로 설정하기에는 너무 복잡하니, 파이썬 파일을 새로 만들어 설치된 경로와 맞춰주겠다.</li><li>아래 사진 우측 상단에 밑줄 친 상자 클릭을 한다.<br><img src="/images/JupyterNotebook_connect_sql/5.png" alt="png"><hr></li><li>아래 사진에서 필자의 컴퓨터에서 파이썬 라이브러리가 저장된 경로는 두번째 항목이기 때문에 클릭을 하면 설정이 바뀐다.<br><img src="/images/JupyterNotebook_connect_sql/6.png" alt="png"><br><img src="/images/JupyterNotebook_connect_sql/7.png" alt="png"><hr></li><li>Step 2 방법으로 한번 더 실행하면 아래 사진 과 같이 오류 없이 정상적으로 실행된다.<br><img src="/images/JupyterNotebook_connect_sql/8.png" alt="png"><hr></li></ul><h1 id="DB-접속"><a href="#DB-접속" class="headerlink" title="DB 접속"></a>DB 접속</h1><ul><li><p>접속하려는 DB에 맞는 코드를 입력 후 실행</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SQL Server</span></span><br><span class="line">%sql mssql+pyodbc://user_name:password@host:port_number/db</span><br><span class="line"></span><br><span class="line"><span class="comment"># PostgreSQL</span></span><br><span class="line">%sql postgresql://user_name:password@host:port_number/db</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line">%sql mysql://user_name:password@host:port_number/db</span><br><span class="line"></span><br><span class="line"><span class="comment"># Oracle</span></span><br><span class="line">%sql oracle://user_name:password@127.0.0.1:port_number/db</span><br></pre></td></tr></table></figure><ul><li>user_name, password, port_number,db 등을 확인하려면 Oracle SQL Developer을 실행하여 해당 DB 우클릭 후 속성에 들어가면 상세히 적혀 있다.<br><img src="/images/JupyterNotebook_connect_sql/9.png" alt="png"><hr><img src="/images/JupyterNotebook_connect_sql/10.png" alt="png"><hr></li></ul></li><li><p>각자 DB에 맞게 작성 하면 아래 사진과 같이 정상적으로 DB 연결이 되었다고 나온다.<br><img src="/images/JupyterNotebook_connect_sql/11.png" alt="png"></p></li></ul><hr><ul><li><p>코드 작성이 잘되는지 테스트 해본다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sql 실행문 (%%sql)을 붙이고 실행</span></span><br><span class="line">%%sql</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br></pre></td></tr></table></figure><p><img src="/images/JupyterNotebook_connect_sql/12.png" alt="png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 &lt;strong&gt;Hanjeongin&lt;/strong&gt; 님의 &lt;a href=&quot;https://www.notion.so/Jupyter-Notebook-SQL-0973777326e2426da0797f75c09ad0bb&quot;&gt;https://r</summary>
      
    
    
    
    <category term="SQL" scheme="https://ahnduhong.github.io/categories/SQL/"/>
    
    
    <category term="Jupyter" scheme="https://ahnduhong.github.io/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Setting up Apache-Airflow in Windows using WSL2(아파치 에어플로)</title>
    <link href="https://ahnduhong.github.io/2022/04/20/Apache_Airflow/"/>
    <id>https://ahnduhong.github.io/2022/04/20/Apache_Airflow/</id>
    <published>2022-04-20T00:00:00.000Z</published>
    <updated>2022-04-20T05:57:25.166Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 Evan 님의 <a href="https://dschloe.github.io/settings/apache_airflow_using_wsl2/">https://dschloe.github.io/settings/apache_airflow_using_wsl2&#x2F;</a> 글을 참고하여 작성된 글 입니다.</li></ul><hr><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>windows WSL2에서 airflow를 설치 및 설정에 대해서 설명한다.</li></ul><h2 id="Step-1-Install-pip-on-WSL"><a href="#Step-1-Install-pip-on-WSL" class="headerlink" title="Step 1. Install pip on WSL"></a>Step 1. Install pip on WSL</h2><ul><li>우선 airflow를 설치하기 위해 pip를 설치한다</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install python3-pip</span><br><span class="line">[sudo] password <span class="keyword">for</span> username:</span><br></pre></td></tr></table></figure><h2 id="Step-2-Install-virtualenv-package"><a href="#Step-2-Install-virtualenv-package" class="headerlink" title="Step 2. Install virtualenv package"></a>Step 2. Install virtualenv package</h2><ul><li><p>가상 환경 라이브러리인 virtualenv 를 설치한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install virtualenv</span><br></pre></td></tr></table></figure></li></ul><h2 id="Step-3-Create-a-virtual-environment"><a href="#Step-3-Create-a-virtual-environment" class="headerlink" title="Step 3. Create a virtual environment"></a>Step 3. Create a virtual environment</h2><ul><li><p>C드라이브에 airflow-test 폴더를 생성한 뒤 해당 디렉터리로 이동한다.</p></li><li><p>가상 환경을 생성한 후, 가상 환경에 접속한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv venv <span class="comment"># 가상 환경 생성</span></span><br><span class="line">$ <span class="built_in">source</span> venv/bin/activate <span class="comment"># 가상 환경 접속</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>.bashrc 파일을 수정한다</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>파일을 연 후, 다음과 같은 코드를 추가한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> AIRFLOW_HOME=/mnt/c/airflow-test</span><br></pre></td></tr></table></figure><ul><li>리눅스 환경에서 파일을 읽고 쓰는 모드 설정 및 입력 모드에서의 단축키는 생소 할수 있으므로 아래 사이트 참고 하여 코드를 수정한다.<ul><li>파일을 저장하고 닫을 때는 ESC → :wq  , 저장하지 않고 닫을 때는 ESC → :q!</li><li>vi 명령어 참고 사이트: <a href="https://blockdmask.tistory.com/25">https://blockdmask.tistory.com/25</a></li></ul></li></ul></li><li><p>수정 된 코드를 업데이트 한 뒤, 코드가 제대로 반영되었는지 확인한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc <span class="comment"># 업데이트</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$AIRFLOW_HOME</span> <span class="comment"># 코드 정상 반영 확인</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Step-4-Apache-Airflow-설치"><a href="#Step-4-Apache-Airflow-설치" class="headerlink" title="Step 4. Apache Airflow 설치"></a>Step 4. Apache Airflow 설치</h2><ul><li><p>PostgreSQL, Slack, Celery 패키지를 동시에 설치한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install <span class="string">&#x27;apache-airflow[postgres, slack, celery]&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>에어플로우를 실행 하기 위해 DB 초기화를 해줘야 한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ airflow db init <span class="comment"># DB 초기화</span></span><br></pre></td></tr></table></figure></li><li><p>실제로 잘 구현 되었는지 확인을 하기 위해 webserver를 실행한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ airflow webserver -p 8080</span><br></pre></td></tr></table></figure><ul><li>webserver는 airflow.cfg파일의 <u><span style="color:red"><code>endpoint_url</code></span></u> 주소를 확인 후 설정한다.(필자는 8080으로 되어 있어서 위와 같은 코드로 실행함)</li></ul><p>  <img src="/images/Apache_Airflow/1.png" alt="png"></p><hr></li><li><p>다음으로 일정 주기로 데이터 흐름이 실행되게 하려면 Scheduler가 필요하다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow scheduler</span><br></pre></td></tr></table></figure><ul><li>위와 같이 <u><span style="color:red"><code>airflow webserver -p 8080</code></span></u> 과 <u><span style="color:red"><code>airflow scheduler</code></span></u> 를 실행하려면 2개의 wsl 창이 필요하다.</li></ul></li><li><p>생성한 <a href="http://localhost:8080/login/%EC%97%90">http://localhost:8080/login/에</a> 접속하면 아래와 같은 화면이 나타난다.</p><p>  <img src="/images/Apache_Airflow/2.png" alt="png"></p><hr></li><li><p>cntrl+c로 작업을 해제하고 이제 로그인을 하기 위해 회원 가입을 하도록 한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users create</span></span><br><span class="line">$ airflow <span class="built_in">users</span> create --username airflow --password airflow --firstname winters evan --lastname airflow --role Admin --email your_email@some.com</span><br></pre></td></tr></table></figure><ul><li>username(ID)와 password는 airflow로 한뒤 나머지 lastname, email은 사용자에 맞게 수정한다.</li></ul></li><li><p>다시 webserver와 Schedule를 실행한 뒤 로그인을 하면 정상적으로 다양한 DAGs 파일이 나타난 것을 확인할 수 있다.</p><p>  <img src="/images/Apache_Airflow/3.png" alt="png"></p></li></ul><h2 id="Default-예제-제거하기"><a href="#Default-예제-제거하기" class="headerlink" title="Default 예제 제거하기"></a>Default 예제 제거하기</h2><ul><li><p>load_examples를 없애고 내가 생성 및 수정한 DAGs들만 보이고 싶다면 <u><span style="color:red"><code>airflow.cfg</code></span></u> 파일을 열고, <u><span style="color:red"><code>load_examples = True</code></span></u> 로 되어 있는 것을 <u><span style="color:red"><code>load_examples = False</code></span></u> 로 변경한다.</p><p>  <img src="/images/Apache_Airflow/4.png" alt="png"></p><hr></li><li><p>그 후에, 다시 터미널로 돌아와서 <u><span style="color:red"><code>airflow db reset</code></span></u> 실행한다.</p><p>  <img src="/images/Apache_Airflow/5.png" alt="png"></p><hr></li><li><p><u><span style="color:red"><code>webserver</code></span></u> 를 실행하여 확인</p><p>  <img src="/images/Apache_Airflow/6.png" alt="png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 Evan 님의 &lt;a href=&quot;https://dschloe.github.io/settings/apache_airflow_using_wsl2/&quot;&gt;https://dschloe.github.io/settings/apache_airf</summary>
      
    
    
    
    <category term="Airflow" scheme="https://ahnduhong.github.io/categories/Airflow/"/>
    
    
    <category term="Airflow" scheme="https://ahnduhong.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Setting up Apache-NiFi in Windows 11(아파치 Nifi)</title>
    <link href="https://ahnduhong.github.io/2022/04/20/Apache_NiFi_in_Windows11/"/>
    <id>https://ahnduhong.github.io/2022/04/20/Apache_NiFi_in_Windows11/</id>
    <published>2022-04-20T00:00:00.000Z</published>
    <updated>2022-04-20T07:31:46.937Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>이 글은 Evan 님의 <a href="https://dschloe.github.io/settings/apache_airflow_using_wsl2/">https://dschloe.github.io/settings/apache_airflow_using_wsl2&#x2F;</a> 글을 참고하여 작성된 글 입니다.</p><hr></li></ul><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>Windows 11 에서 NIFI를 설치 및 설정을 하는 것을 설명한다.</li></ul><h2 id="Step-01-Nifi-다운로드"><a href="#Step-01-Nifi-다운로드" class="headerlink" title="Step 01. Nifi 다운로드"></a>Step 01. Nifi 다운로드</h2><ul><li><p>먼저 웹사이트에 접속하다.</p><ul><li><p>URL: <strong><a href="https://www.apache.org/dyn/closer.lua?path=/nifi/1.16.0/nifi-1.16.0-bin.zip">https://www.apache.org/dyn/closer.lua?path=/nifi/1.16.0/nifi-1.16.0-bin.zip</a></strong></p><p>  <img src="/images/Apache_NiFi_in_Windows11/1.png" alt="png"></p><hr></li></ul></li><li><p>HTTP 아래에 있는 링크를 클릭하여 파일을 다운로드 받은 후 C드라이브에 압축을 풀어준다.</p><p>  <img src="/images/Apache_NiFi_in_Windows11/2.png" alt="png"></p></li></ul><h2 id="Step-02-Java-환경-설정"><a href="#Step-02-Java-환경-설정" class="headerlink" title="Step 02. Java 환경 설정"></a>Step 02. Java 환경 설정</h2><ul><li>먼저 Nifi를 사용하려면 Java 설치를 해야 하는데 설치 내용은 아래 블로그를 참조한다.<ul><li>참고 URL: <strong><a href="https://maktony.tistory.com/13">https://maktony.tistory.com/13</a></strong></li></ul></li></ul><h2 id="Step-03-run-nifi-배치-파일-실행"><a href="#Step-03-run-nifi-배치-파일-실행" class="headerlink" title="Step 03. run-nifi 배치 파일 실행"></a>Step 03. run-nifi 배치 파일 실행</h2><ul><li><p><u><span style="color:red"><code>run-nifi</code></span></u> 파일을 관리자 권한으로 실행한다. (경로 c&#x2F;nifi-1.16.0&#x2F;bin&#x2F;run-nifi.bat)</p><p>  <img src="/images/Apache_NiFi_in_Windows11/3.png" alt="png"></p><hr></li><li><p>아래와 같은 메시지가 출력이 되면 정상적으로 세팅한 것이다.</p><p>  <img src="/images/Apache_NiFi_in_Windows11/4.png" alt="png"></p><hr></li></ul><h2 id="Step-04-Web-UI-확인"><a href="#Step-04-Web-UI-확인" class="headerlink" title="Step 04. Web UI 확인"></a>Step 04. Web UI 확인</h2><ul><li><p>Web UI를 확인해본다. (약 1분 지난 뒤)</p><ul><li><p>Web UI: <a href="https://127.0.0.1:8443/nifi/login">https://127.0.0.1:8443/nifi/login</a></p><p>  <img src="/images/Apache_NiFi_in_Windows11/5.png" alt="png"></p><hr></li></ul></li><li><p>간혹 안 나오는 경우가 있다. 그럴 경우에는 새로운 CMD 파일을 연 후, Process ID를 서로 비교 대조해본다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -ano | find <span class="string">&quot;8443&quot;</span></span><br></pre></td></tr></table></figure><p>  <img src="/images/Apache_NiFi_in_Windows11/6.png" alt="png"></p><hr></li></ul><h2 id="Step-05-로그인-ID-찾기-및-접속"><a href="#Step-05-로그인-ID-찾기-및-접속" class="headerlink" title="Step 05. 로그인 ID 찾기 및 접속"></a>Step 05. 로그인 ID 찾기 및 접속</h2><ul><li><p>우선 별도로 설정을 하지 않았다면, 자동으로 생성이 된다.</p></li><li><p>logs&#x2F;nifi-app 로그파일에서 메모장으로 연 후, 검색을 한다. (Ctrl + F, Username)</p><p>  <img src="/images/Apache_NiFi_in_Windows11/7.png" alt="png"></p><hr></li><li><p>로그인을 하면, 아래와 같은 화면으로 접속이 되는 것을 확인할 수 있다.</p><p>  <img src="/images/Apache_NiFi_in_Windows11/8.png" alt="png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;이 글은 Evan 님의 &lt;a href=&quot;https://dschloe.github.io/settings/apache_airflow_using_wsl2/&quot;&gt;https://dschloe.github.io/settings/apache_a</summary>
      
    
    
    
    <category term="nifi" scheme="https://ahnduhong.github.io/categories/nifi/"/>
    
    
    <category term="nifi" scheme="https://ahnduhong.github.io/tags/nifi/"/>
    
  </entry>
  
  <entry>
    <title>Apache NiFi 설치와 설정 in WSL2</title>
    <link href="https://ahnduhong.github.io/2022/04/20/Apache_Nifi_WSL/"/>
    <id>https://ahnduhong.github.io/2022/04/20/Apache_Nifi_WSL/</id>
    <published>2022-04-20T00:00:00.000Z</published>
    <updated>2022-04-20T08:29:38.699Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>이 글은 Evan 님의 <a href="https://dschloe.github.io/settings/apache_airflow_using_wsl2/">https://dschloe.github.io/settings/apache_airflow_using_wsl2&#x2F;</a> 글을 참고하여 작성된 글 입니다.</p><hr></li></ul><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>WSL2 프로그램을 사용하여 가상 환경에서 Apache Nifi 설치 및 설정하는 과정을 설명한다.</li></ul><h2 id="Step-01-Java-설치-및-설정"><a href="#Step-01-Java-설치-및-설정" class="headerlink" title="Step 01. Java 설치 및 설정"></a>Step 01. Java 설치 및 설정</h2><ul><li>wls2에서 Java를 설치 한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br><span class="line">$ sudo apt install openjdk-11-jre-headless</span><br></pre></td></tr></table></figure><ul><li>환경 변수 설정을 한다.  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.bash_profile</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64</span><br></pre></td></tr></table></figure>  <img src="/images/Apache_Nifi_WSL/1.png" alt="png"><hr><ul><li>WSL(Windows Subsystem for Linux)는 리눅스 환경 이기 때문에 일반 terminal 창과는 다른 명령어를 사용한다. 명령어는 아래 사이트를 참고하여 작성하길 바란다.<ul><li>vi 명령어 참고 사이트: <a href="https://blockdmask.tistory.com/25">https://blockdmask.tistory.com/25</a></li></ul></li></ul></li></ul><h2 id="Step-02-Nifi-설치-및-설정"><a href="#Step-02-Nifi-설치-및-설정" class="headerlink" title="Step 02. Nifi 설치 및 설정"></a>Step 02. Nifi 설치 및 설정</h2><ul><li><p>curl을 이용하여 Nifi를 현재 경로에 받는다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo wget https://downloads.apache.org/nifi/1.16.0/nifi-1.16.0-bin.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>.tar.gz 파일의 압축을 푼다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tar xvzf nifi-1.16.0-bin.tar.gz</span><br></pre></td></tr></table></figure></li><li><p><u><span style="color:red"><code>nifi-1.16.0/bin</code></span></u> 폴더로 경로를 이동한다</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> nifi-1.16.0/bin</span><br></pre></td></tr></table></figure><p>  <img src="/images/Apache_Nifi_WSL/2.png" alt="png"></p><hr><ul><li>필자의 경로는 <u><span style="color:red"><code>root/nifi-1.16.0/bin</code></span></u> 이다.</li></ul></li><li><p><u><span style="color:red"><code>ls</code></span></u> 를 입력하여 현재 경로에 <u><span style="color:red"><code>nifi-env.sh</code></span></u> 파일이 있는지 확인</p><p>  <img src="/images/Apache_Nifi_WSL/3.png" alt="png"></p><hr></li><li><p>환경 변수를 설정 한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi nifi-env.sh</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="string">&quot;/usr/lib/jvm/java-11-openjdk-amd64&quot;</span></span><br></pre></td></tr></table></figure><p>  <img src="/images/Apache_Nifi_WSL/4.png" alt="png"></p><hr></li></ul><h2 id="Step-03-Nifi-실행"><a href="#Step-03-Nifi-실행" class="headerlink" title="Step 03. Nifi 실행"></a>Step 03. Nifi 실행</h2><ul><li><p><u><span style="color:red"><code>nifi-env.sh</code></span></u> 파일을 실행 한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./nifi.sh start</span><br></pre></td></tr></table></figure><p>  <img src="/images/Apache_Nifi_WSL/5.png" alt="png"></p><hr></li><li><p><u><span style="color:red"><code>nifi-1.16.0/conf</code></span></u>에 있는 <u><span style="color:red"><code>nifi.properties</code></span></u>를 열어 webserver 주소를 확인한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi nifi.properties</span><br><span class="line"><span class="comment"># 경로 /nifi-1.16.0/conf </span></span><br></pre></td></tr></table></figure><p>  <img src="/images/Apache_Nifi_WSL/6.png" alt="png"></p><hr><p>  <img src="/images/Apache_Nifi_WSL/7.png" alt="png"></p><hr></li><li><p>Nifi 화면에 접속한다.</p><ul><li><p><a href="https://127.0.0.1:8443/nifi/login">https://127.0.0.1:8443/nifi/login</a></p><p>  <img src="/images/Apache_Nifi_WSL/8.png" alt="png"></p><hr></li></ul></li><li><p>Username과 Password를 생성한다.(사용자에 맞게 생성 가능)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./bin/nifi.sh set-single-user-credentials human 1234567890123</span><br><span class="line"><span class="comment"># username: human</span></span><br><span class="line"><span class="comment"># password :1234567890123</span></span><br></pre></td></tr></table></figure></li><li><p>재 실행하여 로그인을 해본다.</p><p>  <img src="/images/Apache_Nifi_WSL/9.png" alt="png"></p><hr></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;이 글은 Evan 님의 &lt;a href=&quot;https://dschloe.github.io/settings/apache_airflow_using_wsl2/&quot;&gt;https://dschloe.github.io/settings/apache_a</summary>
      
    
    
    
    <category term="nifi" scheme="https://ahnduhong.github.io/categories/nifi/"/>
    
    
    <category term="WSL2" scheme="https://ahnduhong.github.io/tags/WSL2/"/>
    
  </entry>
  
  <entry>
    <title>Apache Spark installation on windows 11(아파치 스파크)</title>
    <link href="https://ahnduhong.github.io/2022/04/19/Apache_Spark_installation/"/>
    <id>https://ahnduhong.github.io/2022/04/19/Apache_Spark_installation/</id>
    <published>2022-04-19T00:00:00.000Z</published>
    <updated>2022-04-19T10:36:04.059Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 <strong><strong>Apache Spark(아파치 스파크) 설치 및 환경 설정에 관해 설명하고 있으며</strong></strong> <a href="https://dschloe.github.io/python/python_edu/00_settings/spark_installation_windows_10/">https://dschloe.github.io/python/python_edu&#x2F;00_settings&#x2F;spark_installation_windows_10&#x2F;</a> 블로그를 참고하여 작성 한 것입니다.</li></ul><hr><h1 id="사전준비"><a href="#사전준비" class="headerlink" title="사전준비"></a>사전준비</h1><ul><li>Python3 가 설치가 되어야 가능하기 때문에 설치가 되어있지 않다면 <a href="https://www.anaconda.com/products/distribution">아나콘다(Anaconda)</a>에 접속하여 설치 바랍니다.</li></ul><h1 id="다운로드-전-필수-확인사항"><a href="#다운로드-전-필수-확인사항" class="headerlink" title="다운로드 전 필수 확인사항"></a>다운로드 전 필수 확인사항</h1><ul><li>스파크 설치 전에는 반드시 체크해야 하는 사항이 있다. (System Compatibility)</li><li>2022년 1월 기준은 아래와 같다.</li></ul><p>Get Spark from the <strong><a href="https://spark.apache.org/downloads.html">downloads page</a></strong> of the project website. This documentation is for Spark version 3.2.0. Spark uses Hadoop’s client libraries for HDFS and YARN. Downloads are pre-packaged for a handful of popular Hadoop versions. Users can also download a “Hadoop free” binary and run Spark with any Hadoop version <strong><a href="https://spark.apache.org/docs/latest/hadoop-provided.html">by augmenting Spark’s classpath</a></strong>. Scala and Java users can include Spark in their projects using its Maven coordinates and Python users can install Spark from PyPI.</p><p>If you’d like to build Spark from source, visit <strong><a href="https://spark.apache.org/docs/latest/building-spark.html">Building Spark</a></strong>.</p><p>Spark runs on both Windows and UNIX-like systems (e.g. Linux, Mac OS), and it should run on any platform that runs a supported version of Java. This should include JVMs on x86_64 and ARM64. It’s easy to run locally on one machine — all you need is to have <u><span style="color:red"><code>java</code></span></u> installed on your system <u><span style="color:red"><code>PATH</code></span></u>, or the <u><span style="color:red"><code>JAVA_HOME</code></span></u> environment variable pointing to a Java installation.</p><p>Spark runs on Java 8&#x2F;11, Scala 2.12, Python 3.6+ and R 3.5+. Python 3.6 support is deprecated as of Spark 3.2.0. Java 8 prior to version 8u201 support is deprecated as of Spark 3.2.0. For the Scala API, Spark 3.2.0 uses Scala 2.12. You will need to use a compatible Scala version (2.12.x).</p><p>For Python 3.9, Arrow optimization and pandas UDFs might not work due to the supported Python versions in Apache Arrow. Please refer to the latest <strong><a href="https://arrow.apache.org/docs/python/install.html#python-compatibility">Python Compatibility</a></strong> page. For Java 11, <u><span style="color:red"><code>-Dio.netty.tryReflectionSetAccessible=true</code></span></u> is required additionally for Apache Arrow library. This prevents <u><span style="color:red"><code>java.lang.UnsupportedOperationException: sun.misc.Unsafe or java.nio.DirectByteBuffer.(long, int) not available</code></span></u> when Apache Arrow uses Netty internally.</p><h1 id="자바-설치"><a href="#자바-설치" class="headerlink" title="자바 설치"></a>자바 설치</h1><ul><li>자바를 설치한다. 설치 파일은 아래 링크에서 각자 환경에 맞는 프로그램을 다운로드 받는다.<ul><li>JAVA: <a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</a></li><li>설치 시, 오라클 로그인이 필요 할 수도 있으므로 계정이 없는 경우 생성 후 시도 바랍니다.</li></ul></li></ul><h2 id="Step-01-설치"><a href="#Step-01-설치" class="headerlink" title="Step 01. 설치"></a>Step 01. 설치</h2><ul><li><p>다운로드 파일을 관리자로 실행한다. 계속 Next 버튼 클릭 후, 아래 파일에서 경로를 수정한다. (이 때, <u><span style="color:red"><code>Program Files</code></span></u> 공백이 있는데, 이러한 공백은 환경 설치 시 문제가 될 수 있다.)</p><p>  <img src="/images/Apache_Spark_installation/1.png" alt="png"></p></li></ul><hr><ul><li><p>Foder name(경로)를 아래와 같이 변경 후 OK 클릭을 하면 설치가 완료된다.</p><p>  <img src="/images/Apache_Spark_installation/2.png" alt="png"></p></li></ul><hr><ul><li><p>이번에는 자바 런타임 환경의 폴더도 동일하게 변경해준다. (변경 클릭 후 수정)</p><ul><li>C드라이브 경로에 <u><span style="color:red"><code>jre</code></span></u> 폴더를 생성하고 저장한다.</li></ul><p>  <img src="/images/Apache_Spark_installation/3.png" alt="png"></p><hr></li></ul><h1 id="Spark-설치"><a href="#Spark-설치" class="headerlink" title="Spark 설치"></a>Spark 설치</h1><h3 id="1-Spark-file-설치"><a href="#1-Spark-file-설치" class="headerlink" title="(1) Spark file 설치"></a>(1) Spark file 설치</h3><ul><li>아래 링크를 통해 Spark를 설치한다.<ul><li><p>Spark: <a href="https://spark.apache.org/downloads.html">https://spark.apache.org/downloads.html</a></p></li><li><p>밑줄 친 항목 버전 확인 후 3번째 줄인 <a href="https://www.apache.org/dyn/closer.lua/spark/spark-3.2.1/spark-3.2.1-bin-hadoop3.2.tgz">spark-3.2.1-bin-hadoop3.2.tgz</a> 클릭</p><p>  <img src="/images/Apache_Spark_installation/4.png" alt="png"></p></li></ul><hr><ul><li><p>HTTP 아래에 있는 페이지를 클릭하면 다운로드 받을 수 있다.</p><p>  <img src="/images/Apache_Spark_installation/5.png" alt="png"></p><hr></li></ul></li></ul><h3 id="2-WinRAR-프로그램-다운로드"><a href="#2-WinRAR-프로그램-다운로드" class="headerlink" title="(2) WinRAR 프로그램 다운로드"></a>(2) WinRAR 프로그램 다운로드</h3><ul><li><u><span style="color:red"><code>.tgz</code></span></u> 파일 압축을 풀기 위해 <u><span style="color:red"><code>WinRAR</code></span></u> 을 설치한다.<ul><li><p>WinRAR: <strong><a href="https://www.rarlab.com/download.htm">https://www.rarlab.com/download.htm</a></strong></p></li><li><p>링크에 들어가면 아래 화면이 보이는데 각 컴퓨터 환경에 맞게 설치 바랍니다.</p><p>  <img src="/images/Apache_Spark_installation/6.png" alt="png"></p><hr></li><li><p>다운로드가 완료 되면 위 과정 (1)에서 설치했던 <u><span style="color:red"><code>spark-3.2.0-bin-hadoop3.2.tgz</code></span></u> 파일 압축 풀기(Extract) 실행</p></li></ul></li></ul><h3 id="3-spark-폴더-생성-및-파일-이동"><a href="#3-spark-폴더-생성-및-파일-이동" class="headerlink" title="(3) spark 폴더 생성 및 파일 이동"></a><strong>(3) spark 폴더 생성 및 파일 이동</strong></h3><ul><li><p>C드라이브 안에 <u><span style="color:red"><code>spark</code></span></u> 라는 새로운 폴더 생성 후 앞 서 압축을 풀었던 파일 <u><span style="color:red"><code>spark-3.2.0-bin-hadoop3.2</code></span></u> 폴더 내 모든 파일을 생성한 <u><span style="color:red"><code>spark</code></span></u> 폴더로 옮긴다.</p><p>  <img src="/images/Apache_Spark_installation/7.png" alt="png"></p><hr></li></ul><h3 id="4-log4j-properties-파일-수정"><a href="#4-log4j-properties-파일-수정" class="headerlink" title="(4) log4j.properties 파일 수정"></a>(4) <a href="http://log4j.properties/">log4j.properties</a> 파일 수정</h3><ul><li><p><u><span style="color:red"><code>conf</code></span></u> - <u><span style="color:red"><code>[log4j.properties](http://log4j.properties)</code></span></u> 파일을 연다.</p><p>  <img src="/images/Apache_Spark_installation/8.png" alt="png"></p><hr></li><li><p>해당 파일을 메모장으로 연 후(필자는 vscode로 연결), 아래에서 빨간줄을 친 <u><span style="color:red"><code>log4j.rootCategory=INFO</code></span></u> 에서 <u><span style="color:red"><code>INFO</code></span></u> → <u><span style="color:red"><code>ERROR</code></span></u> 로 변경한다.</p><ul><li><p>작업 실행 시, 출력하는 모든 logs 값들을 없앨 수 있다.</p><p>  <img src="/images/Apache_Spark_installation/9.png" alt="png"></p><hr></li></ul></li></ul><h1 id="winutils-설치"><a href="#winutils-설치" class="headerlink" title="winutils 설치"></a>winutils 설치</h1><ul><li><p>이번에는 스파크가 윈도우 로컬 컴퓨터가 Hadoop을 착각하게 만들 프로그램이 필요하다.</p><ul><li><p>설치파일: <strong><a href="https://github.com/cdarlint/winutils">https://github.com/cdarlint/winutils</a></strong></p><ul><li><p>여기에서 최신 버전의 winutils를 다운로드 받는다.</p><p>  <img src="/images/Apache_Spark_installation/10.png" alt="png"></p><hr></li></ul></li><li><p>필자는 <strong><a href="https://github.com/cdarlint/winutils/tree/master/hadoop-3.2.2">hadoop-3.2.2</a></strong> 버전을 다운로드 받았다.</p></li></ul></li><li><p>C드라이브에서 winutils란 이름의 폴더를 생성한 후, 앞서 받은 <a href="https://github.com/cdarlint/winutils/tree/master/hadoop-3.2.2">hadoop-3.2.2</a> 파일의 bin 폴더를 옮긴다.</p><p>  <img src="/images/Apache_Spark_installation/11.png" alt="png"></p><hr></li><li><p>이 파일이 Spark 실행 시, 오류 없이 실행될 수 있도록 CMD 프로그램에서 파일 사용 권한을 얻도록 한다.</p><ul><li>CMD 프로그램을 관리자 권한으로 실행 후 아래 코드 입력</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt;<span class="built_in">cd</span> c:\winutils\bin <span class="comment"># 경로 변경</span></span><br><span class="line">c:\winutils\bin&gt; winutils.exe <span class="built_in">chmod</span> 777 \tmp\hive</span><br></pre></td></tr></table></figure><ul><li><p>만약, ChangeFileModeByMask error (3) 에러 발생 시, C드라이브에 <u><span style="color:red"><code>tmp\hive</code></span></u> 폴더를 차례대로 생성을 한다.</p><hr></li></ul></li></ul><h1 id="환경변수-설정"><a href="#환경변수-설정" class="headerlink" title="환경변수 설정"></a>환경변수 설정</h1><ul><li>시스템 환경 변수를 설정한다.<ul><li><p>시스템 환경 변수 검색 후 클릭</p><p>  <img src="/images/Apache_Spark_installation/12.png" alt="png"></p><hr></li><li><p>환경 변수 클릭</p><p>  <img src="/images/Apache_Spark_installation/13.png" alt="png"></p><hr></li><li><p>각 사용자 계정에 <u><span style="color:red"><code>사용자 변수 - 새로 만들기 버튼</code></span></u> 을 클릭</p><p>  <img src="/images/Apache_Spark_installation/14.png" alt="png"></p><hr></li><li><p>SPARK_HOME 환경 변수를 설정한다.</p><p>  <img src="/images/Apache_Spark_installation/15.png" alt="png"></p><hr></li><li><p>JAVA_HOME 환경 변수를 설정한다.</p><p>  <img src="/images/Apache_Spark_installation/16.png" alt="png"></p><hr></li><li><p>HADOOP_HOME 환경 변수를 설정한다.</p><p>  <img src="/images/Apache_Spark_installation/17.png" alt="png"></p><hr></li><li><p>이번에는 <code>PATH</code> 변수를 편집한다.</p><p>  <img src="/images/Apache_Spark_installation/18.png" alt="png"></p><hr></li><li><p>아래 코드를 추가한다.</p><ul><li><p>%SPARK_HOME%\bin</p></li><li><p>%JAVA_HOME%\bin</p><p>  <img src="/images/Apache_Spark_installation/19.png" alt="png"></p><hr></li></ul></li></ul></li></ul><h1 id="파이썬-환경-설정"><a href="#파이썬-환경-설정" class="headerlink" title="파이썬 환경 설정"></a>파이썬 환경 설정</h1><ul><li><p>Python 환경 설정을 추가한다.</p><p>  <img src="/images/Apache_Spark_installation/20.png" alt="png"></p><hr></li></ul><h1 id="스파크-테스트"><a href="#스파크-테스트" class="headerlink" title="스파크 테스트"></a>스파크 테스트</h1><ul><li><p>CMD 파일을 열고 <u><span style="color:red"><code>c:\spark</code></span></u> 폴더로 경로를 설정 한 뒤 <u><span style="color:red"><code>pyspark</code></span></u> 로 실행</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> c:\spark <span class="comment"># 경로를 c:\spark 로 설정</span></span><br><span class="line">pyspark <span class="comment"># 실행</span></span><br></pre></td></tr></table></figure><p>  <img src="/images/Apache_Spark_installation/21.png" alt="png"></p><hr></li><li><p>해당 <u><span style="color:red"><code>[README.md](http://README.md)</code></span></u> 파일을 불러와서 아래 코드가 실행되는지 확인한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; rd = sc.textFile(<span class="string">&quot;README.md&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; rd.count()</span><br><span class="line">109</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 &lt;strong&gt;&lt;strong&gt;Apache Spark(아파치 스파크) 설치 및 환경 설정에 관해 설명하고 있으며&lt;/strong&gt;&lt;/strong&gt; &lt;a href=&quot;https://dschloe.github.io/python/pyth</summary>
      
    
    
    
    <category term="Spark" scheme="https://ahnduhong.github.io/categories/Spark/"/>
    
    
    <category term="Spark" scheme="https://ahnduhong.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>가상 환경 설정(venv) to Git Bash, VScode</title>
    <link href="https://ahnduhong.github.io/2022/04/19/virtualenv_venv_settings/"/>
    <id>https://ahnduhong.github.io/2022/04/19/virtualenv_venv_settings/</id>
    <published>2022-04-19T00:00:00.000Z</published>
    <updated>2022-04-19T12:02:02.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><ul><li>이 글은 Git Bash와 VScode를 이용한 폴더 생성 및 가상 환경을 설정 하여 구동(activate)하는 과정을 설명한 글 입니다.</li></ul><h2 id="1-Git-bash"><a href="#1-Git-bash" class="headerlink" title="(1) Git bash"></a>(1) Git bash</h2><ul><li><p>git bash 프로그램을 실행하여 설정 할 경로를 잡아준다.</p><ul><li><p>참고: 아래는 git bash 프로그램의 간단한 명령어 이다</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..             <span class="comment"># 상위 폴더인 이전 경로로 이동</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&#x27;&#123;폴더이름&#125;&#x27;</span>    <span class="comment"># 하위 폴더의 폴더이름으로 경로 이동</span></span><br><span class="line"><span class="built_in">ls</span>                <span class="comment"># 현재 경로의 하위 폴더 및 파일을 나타내줌</span></span><br></pre></td></tr></table></figure></li><li><p>필자는 c드라이브로 폴더를 생성하겠다.</p></li></ul><p>  <img src="/images/virtualenv_venv_settings/1.png" alt="png"></p><hr></li><li><p>해당 경로에 폴더를 생성한 뒤 경로를 이동한다.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="string">&quot;&#123;폴더이름&#125;&quot;</span> <span class="comment"># 폴더 생성</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;&#123;폴더이름&#125;&quot;</span> <span class="comment"># 경로 이동</span></span><br></pre></td></tr></table></figure><p>  <img src="/images/virtualenv_venv_settings/2.png" alt="png"></p><hr></li><li><p><u><span style="color:red"><code>code .</code></span></u> 을 입력하여 VScode 프로그램을 실행 및 파일을 불러온다.</p><p>  <img src="/images/virtualenv_venv_settings/3.png" alt="png"></p><p>  <img src="/images/virtualenv_venv_settings/4.png" alt="png"></p><hr></li></ul><h2 id="2-VScode"><a href="#2-VScode" class="headerlink" title="(2) VScode"></a>(2) VScode</h2><ul><li><p>연결된 Vscode 프로그램에서 터미널(Terminal)창을 켠 뒤 bash로 설정</p><p>  <img src="/images/virtualenv_venv_settings/5.png" alt="png"></p><hr></li><li><p><u><span style="color:red"><code>virtualenv venv</code></span></u> 로 가상 환경 폴더 생성</p><ul><li>venv라는 폴더가 생성 되면 정상적으로 실행 된 것이다.</li><li><strong><u><span style="color:red"><code>bash: virtualenv: command not found : virtualenv</code></span></u></strong> virtualenv 모듈 설치가 안되어 있어서 생기는 오류 , <u><span style="color:red"><code>pip install virtualenv</code></span></u> 로 설치 한 뒤 , <u><span style="color:red"><code>virtualenv venv</code></span></u> 한번 더 실행.</li></ul><p>  <img src="/images/virtualenv_venv_settings/6.png" alt="png"></p><hr></li><li><p><u><span style="color:red"><code>source venv/Scripts/activate</code></span></u> 로 가상 환경 설정, 정상적으로 실행이 되면 경로 맨앞에 (venv)라는 문구가 나타난다.</p><p>  <img src="/images/virtualenv_venv_settings/7.png" alt="png"></p><ul><li><p>Tip: source v를 입력후 Tap키를 눌렀을때 venv가 나오면 정상적으로 실행가능.</p><hr></li></ul></li><li><p>로컬 환경으로 다시 전환 하려면 <u><span style="color:red"><code>deactivate</code></span> 를 입력하면 가능하다.</p><p>  <img src="/images/virtualenv_venv_settings/8.png" alt="png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;이 글은 Git Bash와 VScode를 이용한 폴더 생성 및 가상 환경을 설정 하여 구동(activate)하는 과</summary>
      
    
    
    
    <category term="venv" scheme="https://ahnduhong.github.io/categories/venv/"/>
    
    
    <category term="venv" scheme="https://ahnduhong.github.io/tags/venv/"/>
    
  </entry>
  
  <entry>
    <title>Github_blog (hexo) error fatal: The current branch main has no upstream branch.</title>
    <link href="https://ahnduhong.github.io/2022/04/19/Github_Fatal_01/"/>
    <id>https://ahnduhong.github.io/2022/04/19/Github_Fatal_01/</id>
    <published>2022-04-19T00:00:00.000Z</published>
    <updated>2022-04-19T12:08:09.871Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.</li></ul><hr><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ul><li>git push를 하는 과정에서 발생한 error fatal: The current branch main has no upstream branch. 를 해결하는 과정을 설명</li></ul><h3 id="error-fatal-The-current-branch-main-has-no-upstream-branch"><a href="#error-fatal-The-current-branch-main-has-no-upstream-branch" class="headerlink" title="error fatal: The current branch main has no upstream branch."></a>error fatal: The current branch main has no upstream branch.</h3><ul><li><p>git push를 하는 과정에서 다음과 같이 오류가 생김</p><p>  <img src="/images/Github_Fatal_01/1.png" alt="png"></p><ul><li>이 에러는 원격 저장소 이름을 언급하지 않아서 생긴다.</li></ul></li><li><p><u><span style="color:red"><code>git remote -v</code></span></u> 로 원격 저장소 이름을 찾은 뒤 원격 저장소를 <u><span style="color:red"><code>git push origin main</code></span></u> 로 명시해주면 된다.</p><ul><li><p>필자의 경우 원격 저장소가 origin 이며 branch는 main이므로 저렇게 입력했다.</p></li><li><p><u><span style="color:red"><code>! [rejected] main -&gt; main (non-fast-forward)</code></span></u> 에러가 나와 <u><span style="color:red"><code>git push origin +main</code></span></u> 처럼 branch에 +만 입력했더니 정상적으로 되었다.</p><ul><li>참고 사이트 : <a href="https://somjang.tistory.com/entry/Git-rejected-master-master-non-fast-forward-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95">https://somjang.tistory.com/entry/Git-rejected-master-master-non-fast-forward-해결-방법</a></li></ul><p>  <img src="/images/Github_Fatal_01/2.png" alt="png"></p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Error" scheme="https://ahnduhong.github.io/categories/Error/"/>
    
    
    <category term="Git" scheme="https://ahnduhong.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>리눅스 파일 저장 에러 해결 [E212: Can&#39;t open file for writing]</title>
    <link href="https://ahnduhong.github.io/2022/04/13/Linux_error_E212/"/>
    <id>https://ahnduhong.github.io/2022/04/13/Linux_error_E212/</id>
    <published>2022-04-13T00:00:00.000Z</published>
    <updated>2022-04-13T08:20:24.287Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.</li></ul><hr><h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><ul><li>Ubuntu 프로그램 WSL2 Linux 환경에서 발생한 에러인 E212: Can’t open file for writing 를 해결하기 위한 과정을 작성한 것 입니다.(필자는 경로 설정을 잘못하여 에러가 발생한 것이지만 경로 설정이 맞는 일반적인 상황에서의 해결도 작성되어 있습니다.)</li></ul><hr><ul><li><p>22&#x2F;4&#x2F;13 강사님의 블로그를 통해 WSL2 설정을 마친 후 Linux 환경에 대한 명령어에 익숙해지기 위해 <a href="http://temp.sh/">temp.sh</a> 파일을 생성하여 적응하는 도중 작성한 기록을 저장하는 도중 E212: Can’t open file for writing 에러가 발생하였다. 이 에러는 권한 문제로 나온 것 같다.</p><ul><li>WSL2 설치 및 그 외 설정 사이트 : <a href="https://dschloe.github.io/settings/windows_docker_install/">https://dschloe.github.io/settings/windows_docker_install&#x2F;</a></li></ul><p>  <img src="/images/Linux_error_E212/1.png" alt="png"></p></li></ul><hr><ul><li>이럴때는  <strong>sudo vi 만드려는 파일명 으로 하던지</strong> 파일 생성후  저장 할때 <strong>:w !sudo tee % &gt; &#x2F;dev&#x2F;null</strong> 로 해결 가능하다고 한다.<ul><li>참고 사이트:  <a href="https://iamrealizer.tistory.com/47">https://iamrealizer.tistory.com/47</a></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:w !sudo <span class="built_in">tee</span> % &gt; /dev/null</span><br></pre></td></tr></table></figure><p>  <img src="/images/Linux_error_E212/2.png" alt="png"></p></li></ul><hr><ul><li><p>하지만 필자는 저장 및 파일을 닫기도 불가능하다. (:q! 로 나갈수는 있었으나 저장이 불가능, root 계정을 확인했는데.. 왜 불가능할까)</p></li><li><p>확인해보니 경로가 잘못되어 있었다.. (혹시나 boot 같은 다른 파일을 잘못 건들면 삭제하고 다시 설치 하며 환경 설정을 재 설정 해야되는 불상사가 일어날 수 있으니 조심)</p><p>  <img src="/images/Linux_error_E212/3.png" alt="png"></p></li></ul><hr><ul><li>cd .. 으로 기본 값으로 돌아와서 cd root 로 경로 설정을 한 뒤에 sudo vi <a href="http://temp.sh/">temp.sh</a> 로 temp.sh 파일을 생성(파일이 이미 있으면 편집으로 돌아옴)  <img src="/images/Linux_error_E212/4.png" alt="png">  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>.. <span class="comment"># 이전 경로로 이동</span></span><br><span class="line"><span class="built_in">ls</span> <span class="comment"># 내가 위치한 경로의 파일 확인</span></span><br><span class="line"><span class="built_in">cd</span> root <span class="comment"># root 파일로 경로 이동</span></span><br><span class="line">sudo vi file.text <span class="comment"># 파일 생성 및 편집 **필자는 &#123;temp.sh&#125; 파일을 생성 하여 편집함</span></span><br></pre></td></tr></table></figure><ul><li>여기서 root 는 관리자 라는 의미로 파일을 수정 및 삭제 등 이 가능, 필자가 들은 바로는 회사에 들어가서 하나의 프로젝트를 맡아서 작업을 한다면 root 가 아닌 다른 계정을 받아 권한을 얻어야 된다고 함.</li></ul></li></ul><hr><ul><li><p><a href="http://temp.sh/">temp.sh</a> 파일 생성 및 저장 후 종료가 가능해졌습니다. (:wq 는 리눅스 환경에서 저장하고 나가기)</p><p>  <img src="/images/Linux_error_E212/5.png" alt="png"></p><ul><li>리눅스 환경 vi 명령어는 <a href="https://blockdmask.tistory.com/25">https://blockdmask.tistory.com/25</a> 이 링크에 들어가셔서 확인 하시길 바랍니다.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Linux" scheme="https://ahnduhong.github.io/categories/Linux/"/>
    
    
    <category term="Error" scheme="https://ahnduhong.github.io/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>Github_blog(hexo) 테마 변경 및 환경 설정</title>
    <link href="https://ahnduhong.github.io/2022/04/12/Github(hexo)_blog_settings_01/"/>
    <id>https://ahnduhong.github.io/2022/04/12/Github(hexo)_blog_settings_01/</id>
    <published>2022-04-12T00:00:00.000Z</published>
    <updated>2022-04-12T02:23:32.915Z</updated>
    
    <content type="html"><![CDATA[<h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><ul><li><p>이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.</p><hr></li><li><p>평소 Github 블로그에 대해 그 날 들은 강의들만 올리다가 강사님의 따끔하신 일침으로 제대로 된 관리를 해보자 라는 생각이 들어 실행에 옮겨보았다. Github 블로그에 글을 올리는 것은 가능했으나 글을 분류하기 위한 카테고리, 태그 등 깔끔하게 블로그 관리를 못하는 상황이라 블로그를 새롭게 개편해보기로 마음 먹었다.</p></li></ul><h3 id="테마"><a href="#테마" class="headerlink" title="테마"></a>테마</h3><ul><li><p>처음 눈에 뜨인 것은 “블로그 테마” 어떻게 하면 블로그를 조금 더 깔끔하게 보일수 있으면 어떨까란 생각에 다른 사용자의 글을 보며 결국 테마를 “<a href="https://github.com/kakawait/hugo-tranquilpeak-theme">tranquilpeak</a>“ 으로 변경하기로 했다.</p><p>  <a href="https://github.com/kakawait/hugo-tranquilpeak-theme">GitHub - kakawait&#x2F;hugo-tranquilpeak-theme: A gorgeous responsive theme for Hugo blog framework</a></p></li><li><p>위 링크를 참고하며 tranquilpeak 테마를 변경하는 중 수많은 에러들이 발생하였고 해결하며 테마 변경을 하였다. (해결 당시 글을 쓰고 있지 않아 뒤죽박죽 섞여서 과정 설명은 참고 사이트로 대체 합니다.)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remote origin already exists</span><br></pre></td></tr></table></figure><ul><li>Remote origin already exists : 기존에 연결되어 있는 레파지토리가 다시 새로운 레파지토리에 소스코드를 올리려고 하면 발생되는 에러.<ul><li>참고 사이트 <a href="https://coding-factory.tistory.com/619">https://coding-factory.tistory.com/619</a></li></ul></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal : refusing to merge unrelated histories</span><br></pre></td></tr></table></figure><ul><li>Fatal : refusing to merge unrelated histories :  이 오류는 명령어 git push 또는 git pull을 진행할때 발견할 수 있는 오류, 로컬 저장소와 원격지의 저장소 기록을 비교했을 때 소스코드의 차이가 심한 저장소의 경우, 병합 오류가 날 것을 대비하여 오류 메시지를 띄우는 것 입니다.<ul><li>참고 사이트 <a href="https://ndb796.tistory.com/275">https://ndb796.tistory.com/275</a></li></ul></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rejected] master → master (non-fast-forward) : gitignore</span><br></pre></td></tr></table></figure><ul><li>[rejected] master → master (non-fast-forward) : gitignore 파일 또는 <a href="http://readme.md/">README.md</a> 파일의 문제로 인해 발생<ul><li>참고 사이트 <a href="https://somjang.tistory.com/entry/Git-rejected-master-master-non-fast-forward-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95">https://somjang.tistory.com/entry/Git-rejected-master-master-non-fast-forward-해결-방법</a></li></ul></li></ul></li></ul><h3 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h3><ul><li>테마 변경 후 블로그 환경 설정을 위해 사이드바 메뉴 설정 및 RSS feed 등 변경<ul><li><p>테마 이미지 및 프로필 이미지, favicon 수정 및 categories, tags, archives 설정 후 확인</p><p>  <img src="/images/Github(hexo)_blog_settings_01/1.png" alt="png"></p><ul><li>email 설정은 url이 mailto라고 되어 있을텐데 mailto:사용자아이디@메일 로 변경</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;project_name&#125;/themes/tranquilpeak/_config.yml</span></span><br><span class="line">mail:</span><br><span class="line">            title: global.mail</span><br><span class="line">            url: mailto:dksenghd123@naver.com</span><br><span class="line">            icon: fa fa-envelope</span><br></pre></td></tr></table></figure><ul><li>참고 사이트 <a href="https://wonderbout.tistory.com/127">https://wonderbout.tistory.com/127</a></li></ul></li><li><p>테마, 프로필 이미지 및 favicon 수정은 잘되었으나 categories, tags, archives 등 아래 사진과 같이 되어 확인.</p><p>  <img src="/images/Github(hexo)_blog_settings_01/2.png" alt="png"></p><ul><li>확인 해보니 잘못된 저장 경로({project_name}&#x2F;themes&#x2F;tranquilpeak&#x2F;source&#x2F;all-categories)에 위치하여 {project_name}&#x2F;source&#x2F;all-categories 로 변경 후 확인, 정상 작동</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;project_name&#125;/themes/tranquilpeak/source/all-categories</span></span><br><span class="line"><span class="comment"># ↓↓↓↓↓↓↓↓↓↓ 저장된 위치 변경</span></span><br><span class="line"><span class="comment"># &#123;project_name&#125;/source/all-categories</span></span><br></pre></td></tr></table></figure><p>  <img src="/images/Github(hexo)_blog_settings_01/3.png" alt="png"></p><ul><li>참고 사이트 <a href="https://allaboutmoon.tistory.com/232">https://allaboutmoon.tistory.com/232</a></li><li>categories 와 tags이 비어 있어 작성한 글에 categories 및 tags 추가 후 확인, 정상 작동  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;project_name&#125;/source/_post/&#123;my_post.md&#125;</span></span><br><span class="line">---</span><br><span class="line">title: <span class="string">&quot;AI_Project_SpaceShip_Titanic&quot;</span></span><br><span class="line">author: <span class="string">&quot;winters&quot;</span></span><br><span class="line"><span class="built_in">date</span>: <span class="string">&#x27;2022-04-06&#x27;</span></span><br><span class="line">categories: <span class="string">&#x27;Project&#x27;</span></span><br><span class="line">tags: <span class="string">&#x27;project&#x27;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>  <img src="/images/Github(hexo)_blog_settings_01/4.png" alt="png"></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목</summary>
      
    
    
    
    <category term="blog" scheme="https://ahnduhong.github.io/categories/blog/"/>
    
    
    <category term="blog" scheme="https://ahnduhong.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Github_blog(hexo) 프로필 설정</title>
    <link href="https://ahnduhong.github.io/2022/04/12/Github(hexo)_blog_settings_02/"/>
    <id>https://ahnduhong.github.io/2022/04/12/Github(hexo)_blog_settings_02/</id>
    <published>2022-04-12T00:00:00.000Z</published>
    <updated>2022-04-12T11:58:36.124Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Github-blog-hexo-bio-인물소개-job-설정"><a href="#Github-blog-hexo-bio-인물소개-job-설정" class="headerlink" title="Github blog (hexo) bio(인물소개), job 설정"></a>Github blog (hexo) bio(인물소개), job 설정</h3><ul><li>이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.</li><li>참고: 필자는 tranquilpeak 테마를 표준 테마로 하여 환경 설정 하는 것 이므로 tranquilpeak 테마를 설정 한 뒤 이 글을 보시길 바랍니다.<ul><li>tranquilpeak 테마 : <a href="https://github.com/kakawait/hugo-tranquilpeak-theme">https://github.com/kakawait/hugo-tranquilpeak-theme</a></li><li>이전 글 : <strong><strong>Github_blog(hexo) 테마 변경 및 환경 설정</strong></strong> <a href="https://ahnduhong.github.io/2022/04/12/Github(hexo)_blog_settings_01/">https://ahnduhong.github.io/2022/04/12/Github(hexo)_blog_settings_01&#x2F;</a></li></ul></li></ul><hr><h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><ul><li>블로그 관리를 하는 도중 side bar 메뉴에서 <a href="http://author.bio/">author.bio</a> 라고 써져 있는 것 과 프로필에 직업이 제대로 적혀 있지 않아 필자에 의도에 맞게 수정</li></ul><p><img src="/images/Github(hexo)_blog_settings_02/1.png" alt="png"></p><ul><li>bio 와 job 메뉴는 side bar 를 수정 할 수 있는 {project_name}&#x2F;themes&#x2F;tranquilpeak&#x2F;_config.yml 에서 수정하는 것이 아닌  {project_name}&#x2F;themes&#x2F;tranquilpeak&#x2F;languages&#x2F;en.yml 파일에서 수정이 가능하다. (필자의 언어 설정은 “en”이므로 “ko”를 설정한 경우 같은 경로의 ko.yml 파일을 수정하면 됨)<ul><li>아래 사진은 ko.yml 파일의 코드를 나열 한 것이다.</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;project_name&#125;/themes/tranquilpeak/languages/ko.yml</span></span><br><span class="line"><span class="comment"># 블로그의 모든 곳에 표시되는 날짜 형식</span></span><br><span class="line">date_format: <span class="string">&quot;YYYY/MM/DD&quot;</span></span><br><span class="line"></span><br><span class="line">global:</span><br><span class="line">    home: <span class="string">&quot;Home&quot;</span></span><br><span class="line">    categories: <span class="string">&quot;카테고리&quot;</span></span><br><span class="line">    category: <span class="string">&quot;카테고리&quot;</span></span><br><span class="line">    tags: <span class="string">&quot;태그&quot;</span></span><br><span class="line">    tag: <span class="string">&quot;태그&quot;</span></span><br><span class="line">    archives: <span class="string">&quot;아카이브&quot;</span></span><br><span class="line">    search: <span class="string">&quot;검색&quot;</span></span><br><span class="line">    about: <span class="string">&quot;About&quot;</span></span><br><span class="line">    author_picture: <span class="string">&quot;저자 이미지&quot;</span></span><br><span class="line">    github: <span class="string">&quot;GitHub&quot;</span></span><br><span class="line">    stack_overflow: <span class="string">&quot;Stack Overflow&quot;</span></span><br><span class="line">    twitter: <span class="string">&quot;Twitter&quot;</span></span><br><span class="line">    facebook: <span class="string">&quot;Facebook&quot;</span></span><br><span class="line">    google_plus: <span class="string">&quot;Google +&quot;</span></span><br><span class="line">    weibo: <span class="string">&quot;Weibo&quot;</span></span><br><span class="line">    qq: <span class="string">&quot;QQ&quot;</span></span><br><span class="line">    qzone: <span class="string">&quot;Qzone&quot;</span></span><br><span class="line">    renren: <span class="string">&quot;Renren&quot;</span></span><br><span class="line">    vk: <span class="string">&quot;VK&quot;</span></span><br><span class="line">    odnoklassniki: <span class="string">&quot;Odnoklassniki&quot;</span></span><br><span class="line">    linkedin: <span class="string">&quot;LinkedIn&quot;</span></span><br><span class="line">    mail: <span class="string">&quot;Mail&quot;</span></span><br><span class="line">    rss: <span class="string">&quot;RSS&quot;</span></span><br><span class="line">    share_on_facebook: <span class="string">&quot;Facebook에 공유하기&quot;</span></span><br><span class="line">    share_on_twitter: <span class="string">&quot;Twitter에 공유하기&quot;</span></span><br><span class="line">    share_on_google_plus: <span class="string">&quot;Google+에 공유하기&quot;</span></span><br><span class="line">    share_on_weibo: <span class="string">&quot;Weibo에 공유하기&quot;</span></span><br><span class="line">    share_on_qq: <span class="string">&quot;QQ에 공유하기&quot;</span></span><br><span class="line">    share_on_qzone: <span class="string">&quot;Qzone에 공유하기&quot;</span></span><br><span class="line">    share_on_renren: <span class="string">&quot;Renren에 공유하기&quot;</span></span><br><span class="line">    share_on_vk: <span class="string">&quot;VK에 공유하기&quot;</span></span><br><span class="line">    share_on_odnoklassniki: <span class="string">&quot;Odnoklassniki에 공유하기&quot;</span></span><br><span class="line">    search_category: <span class="string">&quot;카테고리 검색&quot;</span></span><br><span class="line">    search_tag: <span class="string">&quot;태그 검색&quot;</span></span><br><span class="line">    search_date: <span class="string">&quot;날짜 검색 (YYYY/MM/DD)&quot;</span></span><br><span class="line">    posts_found:</span><br><span class="line">        zero: <span class="string">&quot;포스트가 없습니다.&quot;</span></span><br><span class="line">        one: <span class="string">&quot;1 개의 포스트가 있습니다.&quot;</span></span><br><span class="line">        other: <span class="string">&quot;&#123;n&#125; 개의 포스트가 있습니다.&quot;</span></span><br><span class="line">    categories_found:</span><br><span class="line">        zero: <span class="string">&quot;카테고리가 없습니다.&quot;</span></span><br><span class="line">        one: <span class="string">&quot;1 개의 카테고리가 있습니다.&quot;</span></span><br><span class="line">        other: <span class="string">&quot;&#123;n&#125; 개의 카테고리가 있습니다.&quot;</span></span><br><span class="line">    tags_found:</span><br><span class="line">        zero: <span class="string">&quot;태그가 없습니다.&quot;</span></span><br><span class="line">        one: <span class="string">&quot;1 개의 태그가 있습니다.&quot;</span></span><br><span class="line">        other: <span class="string">&quot;&#123;n&#125; 개의 태그가 있습니다.&quot;</span></span><br><span class="line">    read_more_about_author: <span class="string">&quot;저자에 대해 더 알아보기&quot;</span></span><br><span class="line">    zoom_in_on_picture: <span class="string">&quot;사진 확대&quot;</span></span><br><span class="line">    go_to_homepage: <span class="string">&quot;홈페이지로 이동하기&quot;</span></span><br><span class="line">    open_link: <span class="string">&quot;링크 열기&quot;</span></span><br><span class="line">    open_post: <span class="string">&quot;소식 열기&quot;</span></span><br><span class="line"></span><br><span class="line">pagination:</span><br><span class="line">    page: <span class="string">&quot;page %d&quot;</span></span><br><span class="line">    of: <span class="string">&quot;of %d&quot;</span></span><br><span class="line">    newer_posts: <span class="string">&quot;최근 포스트&quot;</span></span><br><span class="line">    older_posts: <span class="string">&quot;이전 포스트&quot;</span></span><br><span class="line">    previous: <span class="string">&quot;이전&quot;</span></span><br><span class="line">    next: <span class="string">&quot;다음&quot;</span></span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">    no_title : <span class="string">&quot;제목 없음&quot;</span></span><br><span class="line">    categorized_in: <span class="string">&quot;카테고리&quot;</span></span><br><span class="line">    tagged_in: <span class="string">&quot;태그&quot;</span></span><br><span class="line">    toc: <span class="string">&quot;목차&quot;</span></span><br><span class="line">    back_to_top: <span class="string">&quot;맨 위로&quot;</span></span><br><span class="line">    read_more: <span class="string">&quot;계속 읽기&quot;</span></span><br><span class="line">    go_to_website: <span class="string">&quot;웹 사이트로 이동&quot;</span></span><br><span class="line">    comment_and_share: <span class="string">&quot;댓글 공유&quot;</span></span><br><span class="line">    comment: <span class="string">&quot;댓글을 남겨주세요&quot;</span></span><br><span class="line">    share: <span class="string">&quot;이 포스트 공유하기&quot;</span></span><br><span class="line">    gallery: <span class="string">&quot;갤러리&quot;</span></span><br><span class="line">    image:</span><br><span class="line">        one: <span class="string">&quot;이미지&quot;</span></span><br><span class="line">        other: <span class="string">&quot;%d 이미지&quot;</span></span><br><span class="line"></span><br><span class="line">author:</span><br><span class="line">    <span class="comment"># Your biography (마크다운과 HTML이 지원됩니다.)</span></span><br><span class="line">    bio: <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Your job</span></span><br><span class="line">    job: <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>맨 아래에 위치한 author 부분이 bio 와 job 즉, 필자가 변경을 원하던 메뉴 이므로 수정 bio(인물소개), job(직업) 안에 원하는 문구 및 파일(bio)을 수정한다.</li></ul><p><img src="/images/Github(hexo)_blog_settings_02/1.png" alt="png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Github-blog-hexo-bio-인물소개-job-설정&quot;&gt;&lt;a href=&quot;#Github-blog-hexo-bio-인물소개-job-설정&quot; class=&quot;headerlink&quot; title=&quot;Github blog (hexo) bio(인물소개)</summary>
      
    
    
    
    <category term="blog" scheme="https://ahnduhong.github.io/categories/blog/"/>
    
    
    <category term="blog" scheme="https://ahnduhong.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Github_blog(hexo) 연동 오류 -tokken</title>
    <link href="https://ahnduhong.github.io/2022/04/12/Github_blog(hexo)_tokken/"/>
    <id>https://ahnduhong.github.io/2022/04/12/Github_blog(hexo)_tokken/</id>
    <published>2022-04-12T00:00:00.000Z</published>
    <updated>2022-04-12T08:36:58.621Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.</li></ul><hr><h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><ul><li>깃허브 블로그 계정 연동 오류 fatal: Authentication failed for ~ 를 github tokken 을 생성함으로 해결 하는 방법입니다.</li></ul><hr><ul><li>깃허브(Github) 블로그 테마를 변경하면서 무엇을 잘못 건들였는지 git add, commit, push 도 가능하고 블로그에 글도 업데이트 되는데 깃허브 메인 화면의 <strong>30 contributions in the last year 및 내 활동기록이 기록이 되지않는다.</strong><ul><li><p><strong>git add, commit, push 정상 작동</strong></p><p>  <img src="/images/Github_blog(hexo)_tokken/1.png" alt="png"></p></li></ul><hr><ul><li><p><strong>Github 메인화면 내 활동 기록이 기록되지 않는 현상 발견</strong></p><p>  <img src="/images/Github_blog(hexo)_tokken/2.png" alt="png"></p></li></ul></li></ul><hr><ul><li>처음에는 커밋(commit)이라는 단어를 내가 잘못 이해하고 있나 라고 의심을 해서 커밋에 대한 구글링을 했지만 내가 알고 있는 커밋이라는 용어가 틀리지 않았고 어떻게 해야될지 감이 안잡혀 evan 강사님(<a href="https://dschloe.github.io/">https://dschloe.github.io/</a>)에게 여쭤보았고 방법을 알려주셨다.<ul><li><p><strong>windows 검색 화면에서 웹 자격 증명을 클릭</strong></p><p>  <img src="/images/Github_blog(hexo)_tokken/3.png" alt="png"></p></li></ul><hr><ul><li><p><strong>windows 자격 증명</strong></p><p>  <img src="/images/Github_blog(hexo)_tokken/4.png" alt="png"></p></li></ul><hr><ul><li><p><strong>일반 자격 증명에서 github 목록을 클릭하여 편집을 눌러 계정을 다시 업데이트 한다</strong></p><p>  <img src="/images/Github_blog(hexo)_tokken/5.png" alt="png"></p></li></ul></li></ul><hr><ul><li><p>그 후에 Pycharm(필자는 Pycharm을 통해 프로젝트를 관리 하는중)에 돌아와 다시 git add, commit, push 를 하면 fatal: Authentication failed for ~ 라는 문구가 뜬다. 이 문구는 local 계정과 github 계정의 연동이 틀려서 나오는 것이고 ID&#x2F;Password 는 21년 8월 이후로 토큰으로 대체 되었다 라는 의미입니다. 즉 계정 연동을 다시 해줘야 한다는 뜻이므로 토큰을 생성 및 연동하러 Github 페이지로 접속하겠습니다.</p><p>  <img src="/images/Github_blog(hexo)_tokken/6.png" alt="png"></p></li></ul><h2 id="Tokken"><a href="#Tokken" class="headerlink" title="Tokken"></a>Tokken</h2><ul><li><a href="https://wotres.tistory.com/m/entry/Github-%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0%EB%B2%95-Authentication-failed-for-use-a-personal-access-token-instead">https://wotres.tistory.com/m/entry/Github-에러-해결법-Authentication-failed-for-use-a-personal-access-token-instead</a> 고수트님의 블로그 내용을 참고하여 계정 연동을 시작<ul><li><p><strong>깃허브 접속</strong></p><ul><li><a href="https://github.com/"><strong>https://github.com/</strong></a></li></ul></li><li><p><strong>우측 상단의 settings 클릭</strong></p><p>  <img src="/images/Github_blog(hexo)_tokken/7.png" alt="png"></p></li></ul><hr><ul><li><p><strong>좌측 메뉴 끝에 developer settings 클릭</strong></p><p>  <img src="/images/Github_blog(hexo)_tokken/8.png" alt="png"></p></li></ul><hr><ul><li><p><strong>Personal access tokens 클릭</strong></p><p>  <img src="/images/Github_blog(hexo)_tokken/9.png" alt="png"></p></li></ul><hr><ul><li><p><strong>Note, expiration에 작성하고 싶은 내용, 기간 설정 후 repo 클릭 후 Generate tokken 클릭</strong></p><p>  <img src="/images/Github_blog(hexo)_tokken/10.png" alt="png"></p></li></ul><hr><ul><li><p><strong>생성된 토큰 코드 복사</strong></p><p>  <img src="/images/Github_blog(hexo)_tokken/11.png" alt="png"></p></li></ul><hr><ul><li><strong>git push</strong><ul><li><p>git push를 입력하면 ID &#x2F; Password 입력하라고 하는데 사용자의 깃허브 아이디와 복사한 토큰을 패스워드에 넣어주면 된다.(패스워드는 입력을 해도 보이지 않게 되어 필자는 ctrl+v로 붙여 넣었다. ***terminal 창에서 ctrl+v 로 붙여넣기가 되지않으면 insert 키로 붙여넣으면 됨.)</p><p>  <img src="/images/Github_blog(hexo)_tokken/12.png" alt="png"></p></li></ul><hr><ul><li>git push 를 할 때 마다 위의 사진 처럼 Username 과 Password(tokken)을 입력하라고 나오기 때문에 Tokken 은 복사하여 메모장이나 기록할 파일에 저장하길 바랍니다.</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="github" scheme="https://ahnduhong.github.io/categories/github/"/>
    
    
    <category term="tokken" scheme="https://ahnduhong.github.io/tags/tokken/"/>
    
  </entry>
  
  <entry>
    <title>Github_blog(hexo) 연동 오류 -global</title>
    <link href="https://ahnduhong.github.io/2022/04/12/Github_blog(hexo)_global/"/>
    <id>https://ahnduhong.github.io/2022/04/12/Github_blog(hexo)_global/</id>
    <published>2022-04-12T00:00:00.000Z</published>
    <updated>2022-04-12T11:04:57.862Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.</li></ul><hr><h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><ul><li>깃허브 블로그 계정 연동 오류 fatal: Authentication failed for ~ 를 github tokken 이 아닌 —global로 해결하는 방법을 나타냄 <strong><u><span style="color:red">(21년 8월 이후 변경된 토큰으로 인해 토큰을 이용 하지 않으면 불가능한 방법입니다, 아래 링크 글로 이동한 뒤 참고하여 해결하세요.)</span></u></strong><ul><li>Github_blog (hexo) 연동 오류 -tokken : <a href="https://ahnduhong.github.io/2022/04/12/Github_blog(hexo)_tokken/">https://ahnduhong.github.io/2022/04/12/Github_blog(hexo)_tokken&#x2F;</a></li></ul></li></ul><hr><ul><li><p>깃허브(Github) 블로그 테마를 변경하면서 무엇을 잘못 건들였는지 git add, commit, push 도 가능하고 블로그에 글도 업데이트 되는데 깃허브 메인 화면의 <strong>30 contributions in the last year 및 내 활동기록이 기록이 되지않는다.</strong></p><ul><li><p><strong>git add, commit, push 정상 작동</strong></p><p>  <img src="/images/Github_blog(hexo)_global/1.png" alt="png"></p></li></ul><hr><ul><li><p><strong>Github 메인화면 내 활동 기록이 기록되지 않는 현상 발견</strong></p><p>  <img src="/images/Github_blog(hexo)_global/2.png" alt="png"></p></li></ul><hr></li><li><p>처음에는 커밋(commit)이라는 단어를 내가 잘못 이해하고 있나 라고 의심을 해서 커밋에 대한 구글링을 했지만 내가 알고 있는 커밋이라는 용어가 틀리지 않았고 어떻게 해야될지 감이 안잡혀 evan 강사님(<a href="https://dschloe.github.io/">https://dschloe.github.io/</a>)에게 여쭤보았고 방법을 알려주셨다.</p><ul><li><p><strong>windows 검색 화면에서 웹 자격 증명을 클릭</strong></p><p>  <img src="/images/Github_blog(hexo)_global/3.png" alt="png"></p></li></ul><hr><ul><li><p><strong>windows 자격 증명</strong></p><p>  <img src="/images/Github_blog(hexo)_global/4.png" alt="png"></p></li></ul><hr><ul><li><p><strong>일반 자격 증명에서 github 목록을 클릭하여 편집을 눌러 계정을 다시 업데이트 한다</strong></p><p>  <img src="/images/Github_blog(hexo)_global/5.png" alt="png"></p></li></ul><hr><ul><li><strong>그 후에 Pycharm(필자는 Pycharm을 통해 프로젝트를 관리 하는중)에 돌아와 다시 git add, commit, push 를 하면 <span style="color:red">fatal: Authentication failed for ~</span> 라는 문구가 뜬다. 이 문구는 <span style="color:blue">local 계정과 github 계정의 연동이 틀려서 나오는 것이고 ID&#x2F;Password 는 21년 8월 이후로 토큰으로 대체 되었다 라는 의미입니다.</span> 즉 계정 연동을 다시 해줘야 한다는 뜻이므로 이번엔 tokken이 아닌 git config —global 방식으로 해결하겠습니다.</strong></li></ul></li></ul><h2 id="git-config-—global"><a href="#git-config-—global" class="headerlink" title="git config —global"></a>git config —global</h2><ul><li><a href="https://imitursa.tistory.com/3213">https://imitursa.tistory.com/3213</a> 이 블로그를 참고하며 해결 방법을 작성 하겠습니다.<ul><li><p><strong>관리자 권한으로 명령창을 연다</strong>.</p><p>  <img src="/images/Github_blog(hexo)_global/6.png" alt="png"></p></li></ul><hr><ul><li><p><strong>‘git config —system —unset credential.helper’ 명령어를 입력한다.(오타 주의)</strong></p><p>  <img src="/images/Github_blog(hexo)_global/7.png" alt="png"></p></li></ul><hr><ul><li><p><strong>‘git config —global —unset credential.helper’  명령어를 입력한다.</strong></p><p>  <img src="/images/Github_blog(hexo)_global/8.png" alt="png"></p></li></ul><hr><ul><li><p><strong>다시 작업 했던 Project(필자는 Pycharm을 사용)로 돌아와 git add, commit, push 를 해주면 계정을 입력하라는 내용이 나온다.</strong></p><p>  <img src="/images/Github_blog(hexo)_global/9.png" alt="png"></p></li></ul><hr><ul><li><strong>21년 8월 이후로 토큰 방식으로 연동 방법이 변경되어 토큰을 갖고 로그인을 하라고 나옵니다.</strong></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="github" scheme="https://ahnduhong.github.io/categories/github/"/>
    
    
    <category term="global" scheme="https://ahnduhong.github.io/tags/global/"/>
    
  </entry>
  
  <entry>
    <title>Github_blog(hexo) 연동 오류 (Contribution 업데이트 오류)</title>
    <link href="https://ahnduhong.github.io/2022/04/12/Github_blog(hexo)_contribution/"/>
    <id>https://ahnduhong.github.io/2022/04/12/Github_blog(hexo)_contribution/</id>
    <published>2022-04-12T00:00:00.000Z</published>
    <updated>2022-04-12T11:12:55.261Z</updated>
    
    <content type="html"><![CDATA[<ul><li>이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.</li></ul><hr><h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><ul><li>지난 Github_blog (hexo) 연동 오류 -global, -tokken 이 두개의 글을 쓰며 드디어 된줄 알았던 깃허브 블로그 Contribution 연동 오류가 기록이 되지 않아 계정 및 설정을 확인 함으로 해결하는 방법을 나타냄.<ul><li>참고 블로그: <a href="https://develaniper-devpage.tistory.com/76">https://develaniper-devpage.tistory.com/76</a></li><li>Github_blog (hexo) 연동 오류 -tokken : <a href="https://ahnduhong.github.io/2022/04/12/Github_blog(hexo)_tokken/">https://ahnduhong.github.io/2022/04/12/Github_blog(hexo)_tokken&#x2F;</a></li><li>Github_blog (hexo) 연동 오류 -global 글은 Github 계정 비밀번호를 Tokken으로 대체 하였기에 현 시점 으로선 불가능한 해결 방법이기 때문에 출처를 남기지 않겠습니다.</li></ul></li></ul><hr><h3 id="Contribution-그래프가-채워지는-조건"><a href="#Contribution-그래프가-채워지는-조건" class="headerlink" title="Contribution 그래프가 채워지는 조건"></a>Contribution 그래프가 채워지는 조건</h3><ol><li>커밋할 때 사용한 이메일 주소가 ghithub계정의 이메일 주소와 같아야 한다.</li><li>fork를 한 commit은 적용되지 않고 독립적인 repository에서 이루어진 commit이여야 한다.</li><li>커밋은 다음으로 만들어 져야한다.(필자의 경우 main을 branch로 한다)<ol><li>repository의 default branch(보통 master)</li><li>gh-pages branch(github page branch)</li></ol></li></ol><hr><ol><li>git command 사용으로 등록된 이메일 주소 확인</li></ol><ul><li>확인 해 보니 계정이 달라서 변경함.  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-&gt; git config user.email</span><br><span class="line">-&gt; git config --global user.email mymail@site.com</span><br></pre></td></tr></table></figure>  <img src="/images/Github_blog(hexo)_contribution/1.png" alt="png"></li></ul><hr><ul><li>드디어 연동이 가능합니다..</li></ul><p><img src="/images/Github_blog(hexo)_contribution/2.png" alt="png"></p><ul><li>혹시나 Git Command로 확인 해도 안되셨다면 위 참고 블로그에서 소스트리(source tree)로 변경해보시길 바랍니다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;이 글은 Github blog를 관리 및 운영하는데 필자가 겪은 에러, 어려움 등을 해결하는 과정을 기록할 목적으로 만들어졌습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="github" scheme="https://ahnduhong.github.io/categories/github/"/>
    
    
    <category term="contribution" scheme="https://ahnduhong.github.io/tags/contribution/"/>
    
  </entry>
  
  <entry>
    <title>AI_Project_SpaceShip_Titanic</title>
    <link href="https://ahnduhong.github.io/2022/04/06/AI_Project_Spaceship_Titanic/"/>
    <id>https://ahnduhong.github.io/2022/04/06/AI_Project_Spaceship_Titanic/</id>
    <published>2022-04-06T00:00:00.000Z</published>
    <updated>2022-04-12T02:32:09.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로젝트-개요"><a href="#프로젝트-개요" class="headerlink" title="프로젝트 개요"></a>프로젝트 개요</h1><ul><li>강의명 : 2022년 K-디지털 직업훈련(Training) 사업 - AI데이터플랫폼을 활용한 빅데이터 분석전문가 과정</li><li>교과목명 : 빅데이터 분석 및 시각화, AI개발 기초, 인공지능 프로그래밍</li><li>프로젝트 주제 : Spaceship Titanic 데이터를 활용한 탑승유무 분류모형 개발</li><li>프로젝트 마감일 : 2022년 4월 12일 화요일</li><li>강사명 : Evan</li><li>수강생명 : 안두홍</li><li>프로젝트 링크 : <a href="https://www.kaggle.com/code/wintersadh/spaceshiptitanic-test-02">https://www.kaggle.com/code/wintersadh/spaceshiptitanic-test-02</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;프로젝트-개요&quot;&gt;&lt;a href=&quot;#프로젝트-개요&quot; class=&quot;headerlink&quot; title=&quot;프로젝트 개요&quot;&gt;&lt;/a&gt;프로젝트 개요&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;강의명 : 2022년 K-디지털 직업훈련(Training) 사업 - AI데이터플</summary>
      
    
    
    
    <category term="Project" scheme="https://ahnduhong.github.io/categories/Project/"/>
    
    
    <category term="Kaggle" scheme="https://ahnduhong.github.io/tags/Kaggle/"/>
    
  </entry>
  
  <entry>
    <title>마켓과 머신러닝(Chapter_6_1)</title>
    <link href="https://ahnduhong.github.io/2022/03/31/Chapter_6_1/"/>
    <id>https://ahnduhong.github.io/2022/03/31/Chapter_6_1/</id>
    <published>2022-03-31T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="비지도-학습"><a href="#비지도-학습" class="headerlink" title="비지도 학습"></a>비지도 학습</h1><ul><li>vs 지도학습<ul><li>종속변수 &#x3D; 타깃</li></ul></li><li>비지도학습은 종속변수 및 타겟이 없음</li><li>분류<ul><li>다중분류</li><li>전체조건이 (다양한 유형) 데이터가 많아야함</li><li>딥러닝과 연관 (자연어처리, 이미지)</li></ul></li></ul><h1 id="데이터-불러오기"><a href="#데이터-불러오기" class="headerlink" title="데이터 불러오기"></a>데이터 불러오기</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!wget https://bit.ly/fruits_300_data -O fruits_300.npy</span><br></pre></td></tr></table></figure><pre><code>--2022-03-31 01:37:42--  https://bit.ly/fruits_300_dataResolving bit.ly (bit.ly)... 67.199.248.10, 67.199.248.11Connecting to bit.ly (bit.ly)|67.199.248.10|:443... connected.HTTP request sent, awaiting response... 301 Moved PermanentlyLocation: https://github.com/rickiepark/hg-mldl/raw/master/fruits_300.npy [following]--2022-03-31 01:37:42--  https://github.com/rickiepark/hg-mldl/raw/master/fruits_300.npyResolving github.com (github.com)... 140.82.114.3Connecting to github.com (github.com)|140.82.114.3|:443... connected.HTTP request sent, awaiting response... 302 FoundLocation: https://raw.githubusercontent.com/rickiepark/hg-mldl/master/fruits_300.npy [following]--2022-03-31 01:37:42--  https://raw.githubusercontent.com/rickiepark/hg-mldl/master/fruits_300.npyResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.110.133, 185.199.111.133, ...Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 3000128 (2.9M) [application/octet-stream]Saving to: ‘fruits_300.npy’fruits_300.npy      100%[===================&gt;]   2.86M  --.-KB/s    in 0.07s   2022-03-31 01:37:43 (41.4 MB/s) - ‘fruits_300.npy’ saved [3000128/3000128]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fruits = np.load(<span class="string">&#x27;/content/fruits_300.npy&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits.shape)</span><br><span class="line"><span class="built_in">print</span>(fruits.ndim)</span><br></pre></td></tr></table></figure><pre><code>(300, 100, 100)3</code></pre><ul><li>첫번째 차원(300) &#x3D; 샘플의 개수</li><li>두번째 차원(100) &#x3D; 이미지 높이</li><li>세번째 차원(100) &#x3D; 이미지 너비</li><li>이미지 크기 100 x 100</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fruits[<span class="number">0</span>, :, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,       1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 6, 1, 2, 3, 1, 2, 3,       1, 1, 1, 2, 2, 2, 5, 2, 2, 5, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,       1, 2, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=uint8)</code></pre><ul><li>이미지 시각화<ul><li>흑백 사진을 담고 있다.</li><li>0 ~ 255까지의 정숫값을 가진다</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(fruits[<span class="number">0</span>], cmap = <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_6_1/output_7_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.imshow(fruits[<span class="number">0</span>], cmap = <span class="string">&#x27;gray_r&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_6_1/output_8_0.png" alt="png"></p><ul><li>여러 이미지 시각화</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">axs[<span class="number">0</span>].imshow(fruits[<span class="number">100</span>], cmap = <span class="string">&#x27;gray_r&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].imshow(fruits[<span class="number">200</span>], cmap = <span class="string">&#x27;gray_r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_6_1/output_10_0.png" alt="png"></p><h1 id="픽셀값-분석"><a href="#픽셀값-분석" class="headerlink" title="픽셀값 분석"></a>픽셀값 분석</h1><ul><li>배열을 계산할 때 1차원 배열로 펼쳐서 계산하면 편리하기 때문에 100 x 100 이미지를 펼쳐서 10,000인 1차원 배열로 만든다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apple = fruits[<span class="number">0</span>:<span class="number">100</span>].reshape(-<span class="number">1</span>, <span class="number">100</span> * <span class="number">100</span>)</span><br><span class="line">pineapple = fruits[<span class="number">100</span>:<span class="number">200</span>].reshape(-<span class="number">1</span>, <span class="number">100</span> * <span class="number">100</span>)</span><br><span class="line">banana = fruits[<span class="number">200</span>:<span class="number">300</span>].reshape(-<span class="number">1</span>, <span class="number">100</span>*<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(apple.shape)</span><br><span class="line"><span class="built_in">print</span>(pineapple.shape)</span><br><span class="line"><span class="built_in">print</span>(banana.shape)</span><br></pre></td></tr></table></figure><pre><code>(100, 10000)(100, 10000)(100, 10000)</code></pre><ul><li>100 x 100 이미지를 펼친 10,000인 1차원 배열로 만들었으니 열을 사용해 샘플의 픽셀 평균값을 계산</li><li>axis &#x3D; 0 vs axis &#x3D; 1 차이 확인(p.293)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># axis = 1 열</span></span><br><span class="line"><span class="built_in">print</span>(apple.mean(axis = <span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>[ 88.3346  97.9249  87.3709  98.3703  92.8705  82.6439  94.4244  95.5999  90.681   81.6226  87.0578  95.0745  93.8416  87.017   97.5078  87.2019  88.9827 100.9158  92.7823 100.9184 104.9854  88.674   99.5643  97.2495  94.1179  92.1935  95.1671  93.3322 102.8967  94.6695  90.5285  89.0744  97.7641  97.2938 100.7564  90.5236 100.2542  85.8452  96.4615  97.1492  90.711  102.3193  87.1629  89.8751  86.7327  86.3991  95.2865  89.1709  96.8163  91.6604  96.1065  99.6829  94.9718  87.4812  89.2596  89.5268  93.799   97.3983  87.151   97.825  103.22    94.4239  83.6657  83.5159 102.8453  87.0379  91.2742 100.4848  93.8388  90.8568  97.4616  97.5022  82.446   87.1789  96.9206  90.3135  90.565   97.6538  98.0919  93.6252  87.3867  84.7073  89.1135  86.7646  88.7301  86.643   96.7323  97.2604  81.9424  87.1687  97.2066  83.4712  95.9781  91.8096  98.4086 100.7823 101.556  100.7027  91.6098  88.8976]</code></pre><ul><li>각 과일에 대한 히스토그램 작성</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(np.mean(apple, axis = <span class="number">1</span>), alpha = <span class="number">0.8</span>) <span class="comment"># alpha 는 그래프의 색상 농도</span></span><br><span class="line">plt.hist(np.mean(pineapple, axis = <span class="number">1</span>), alpha = <span class="number">0.8</span>)</span><br><span class="line">plt.hist(np.mean(banana, axis = <span class="number">1</span>), alpha = <span class="number">0.8</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]) <span class="comment"># legend() 과일 분류 상자</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_6_1/output_16_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, figsize=(<span class="number">20</span>, <span class="number">5</span>))</span><br><span class="line">axs[<span class="number">0</span>].bar(<span class="built_in">range</span>(<span class="number">10000</span>), np.mean(apple, axis = <span class="number">0</span>))</span><br><span class="line">axs[<span class="number">1</span>].bar(<span class="built_in">range</span>(<span class="number">10000</span>), np.mean(pineapple, axis = <span class="number">0</span>))</span><br><span class="line">axs[<span class="number">2</span>].bar(<span class="built_in">range</span>(<span class="number">10000</span>), np.mean(banana, axis = <span class="number">0</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_6_1/output_17_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apple_mean = np.mean(apple, axis = <span class="number">0</span>).reshape(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">pineapple_mean = np.mean(pineapple, axis = <span class="number">0</span>).reshape(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">banana_mean = np.mean(banana, axis = <span class="number">0</span>).reshape(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">fig, axs = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, figsize=(<span class="number">20</span>,<span class="number">5</span>))</span><br><span class="line">axs[<span class="number">0</span>].imshow(apple_mean, cmap = <span class="string">&#x27;gray_r&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].imshow(pineapple_mean, cmap = <span class="string">&#x27;gray_r&#x27;</span>)</span><br><span class="line">axs[<span class="number">2</span>].imshow(banana_mean, cmap = <span class="string">&#x27;gray_r&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_6_1/output_18_0.png" alt="png"></p><h1 id="평균값과-가까운-사진-고르기"><a href="#평균값과-가까운-사진-고르기" class="headerlink" title="평균값과 가까운 사진 고르기"></a>평균값과 가까운 사진 고르기</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abs_diff = np.<span class="built_in">abs</span>(fruits - apple_mean)</span><br><span class="line">abs_mean = np.mean(abs_diff, axis =(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(abs_mean.shape)</span><br></pre></td></tr></table></figure><pre><code>(300,)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apple_index = np.argsort(abs_mean)[:<span class="number">100</span>]</span><br><span class="line">fig, axs = plt.subplots(<span class="number">10</span>, <span class="number">10</span>, figsize = (<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    axs[i, j].imshow(fruits[apple_index[i*<span class="number">10</span> + j]], cmap = <span class="string">&#x27;gray_r&#x27;</span>)</span><br><span class="line">    axs[i, j].axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_6_1/output_21_0.png" alt="png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;비지도-학습&quot;&gt;&lt;a href=&quot;#비지도-학습&quot; class=&quot;headerlink&quot; title=&quot;비지도 학습&quot;&gt;&lt;/a&gt;비지도 학습&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;vs 지도학습&lt;ul&gt;
&lt;li&gt;종속변수 &amp;#x3D; 타깃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>마켓과 머신러닝(Chapter_6_2)</title>
    <link href="https://ahnduhong.github.io/2022/03/31/Chapter_6_2/"/>
    <id>https://ahnduhong.github.io/2022/03/31/Chapter_6_2/</id>
    <published>2022-03-31T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K-평균"><a href="#K-평균" class="headerlink" title="K-평균"></a>K-평균</h1><ul><li><p>각각의 픽셀값(3차원 -&gt; 1차원 배열) 평균 구함</p><ul><li>픽셀의 평균값을 활용해서 사과, 파앤애플, 바나나의 근사한 이미지를 추출하는 것</li></ul></li><li><p>어떻게 평균값을 구할 수 있을까?</p><ul><li>K-평균 알고리즘 (K-Means) 알고리즘</li><li>평균값 &#x3D; Cluster Center &#x3D; Centroid</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!wget https://bit.ly/fruits_300_data -O fruits_300.npy</span><br></pre></td></tr></table></figure><pre><code>--2022-03-31 02:16:44--  https://bit.ly/fruits_300_dataResolving bit.ly (bit.ly)... 67.199.248.10, 67.199.248.11Connecting to bit.ly (bit.ly)|67.199.248.10|:443... connected.HTTP request sent, awaiting response... 301 Moved PermanentlyLocation: https://github.com/rickiepark/hg-mldl/raw/master/fruits_300.npy [following]--2022-03-31 02:16:44--  https://github.com/rickiepark/hg-mldl/raw/master/fruits_300.npyResolving github.com (github.com)... 192.30.255.113Connecting to github.com (github.com)|192.30.255.113|:443... connected.HTTP request sent, awaiting response... 302 FoundLocation: https://raw.githubusercontent.com/rickiepark/hg-mldl/master/fruits_300.npy [following]--2022-03-31 02:16:44--  https://raw.githubusercontent.com/rickiepark/hg-mldl/master/fruits_300.npyResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.111.133, 185.199.108.133, ...Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 3000128 (2.9M) [application/octet-stream]Saving to: ‘fruits_300.npy’fruits_300.npy      100%[===================&gt;]   2.86M  --.-KB/s    in 0.05s   2022-03-31 02:16:44 (62.6 MB/s) - ‘fruits_300.npy’ saved [3000128/3000128]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">fruits = np.load(<span class="string">&#x27;/content/fruits_300.npy&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits.shape)</span><br><span class="line"><span class="built_in">print</span>(fruits.ndim)</span><br></pre></td></tr></table></figure><pre><code>(300, 100, 100)3</code></pre><ul><li>3차원(샘플개수, 너비, 높이)</li><li>2차원(샘플개수, 너비 x 높이)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits_2d = fruits.reshape(-<span class="number">1</span>, <span class="number">100</span> * <span class="number">100</span>)</span><br><span class="line">fruits_2d.shape</span><br></pre></td></tr></table></figure><pre><code>(300, 10000)</code></pre><ul><li>K-평균 알고리즘 활용</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line">km = KMeans(n_clusters = <span class="number">3</span>, random_state = <span class="number">42</span>)</span><br><span class="line">km.fit(fruits_2d)</span><br></pre></td></tr></table></figure><pre><code>KMeans(n_clusters=3, random_state=42)</code></pre><ul><li>모형 학습 후, labels</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(km.labels_)</span><br></pre></td></tr></table></figure><pre><code>[2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 0 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 0 0 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]</code></pre><ul><li>직접 샘플의 개수 확인</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.unique(km.labels_, return_counts = <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><pre><code>(array([0, 1, 2], dtype=int32), array([111,  98,  91]))</code></pre><ul><li>그래프를 직접 그려본다</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_fruits</span>(<span class="params">arr, ratio=<span class="number">1</span></span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)    <span class="comment"># n은 샘플 개수입니다</span></span><br><span class="line">    <span class="comment"># 한 줄에 10개씩 이미지를 그립니다. 샘플 개수를 10으로 나누어 전체 행 개수를 계산합니다. </span></span><br><span class="line">    rows = <span class="built_in">int</span>(np.ceil(n/<span class="number">10</span>))</span><br><span class="line">    <span class="comment"># 행이 1개 이면 열 개수는 샘플 개수입니다. 그렇지 않으면 10개입니다.</span></span><br><span class="line">    cols = n <span class="keyword">if</span> rows &lt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">10</span></span><br><span class="line">    fig, axs = plt.subplots(rows, cols, </span><br><span class="line">                            figsize=(cols*ratio, rows*ratio), squeeze=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">            <span class="keyword">if</span> i*<span class="number">10</span> + j &lt; n:    <span class="comment"># n 개까지만 그립니다.</span></span><br><span class="line">                axs[i, j].imshow(arr[i*<span class="number">10</span> + j], cmap=<span class="string">&#x27;gray_r&#x27;</span>)</span><br><span class="line">            axs[i, j].axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw_fruits(fruits[km.labels_ == <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_6_2/output_14_0.png" alt="png"></p><h1 id="클러스터-중심"><a href="#클러스터-중심" class="headerlink" title="클러스터 중심"></a>클러스터 중심</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw_fruits(km.cluster_centers_.reshape(-<span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>), ratio = <span class="number">3</span>) <span class="comment"># fruits_2d 샘플의 클러스터 중심이기 때문에 이미지로 출력하려면 100 X 100 크기로 변환</span></span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_6_2/output_16_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(km.transform(fruits_2d[<span class="number">100</span>:<span class="number">101</span>])) <span class="comment"># transform 메서드는 훈련데이터 샘플에서 클러스터 중심까지 거리로 변환해준다.</span></span><br></pre></td></tr></table></figure><pre><code>[[3393.8136117  8837.37750892 5267.70439881]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(km.predict(fruits_2d[<span class="number">100</span>:<span class="number">101</span>]))</span><br></pre></td></tr></table></figure><pre><code>[0]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw_fruits(fruits[<span class="number">100</span>:<span class="number">101</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_6_2/output_19_0.png" alt="png"></p><h1 id="최적의-K-평균-찾기"><a href="#최적의-K-평균-찾기" class="headerlink" title="최적의 K-평균 찾기"></a>최적의 K-평균 찾기</h1><ul><li>inertia <ul><li>목적함수 값이 최소화될 때까지 군집의 중심위치와 각 데이터가 소속될 군집를 반복해서 찾는다. 이 값을 관성(inertia)이라고 함</li><li>클러스터에 속한 샘플이 얼마나 가깝게 모여있는지를 나타내는 값</li></ul></li><li>엘보우 방법 <ul><li>클러스터의 개수가 늘어나면 클러스터 개개의 크기는 줄어들기 때문에 이너셔도 같이 줄어듬, 그렇기 때문에 클러스터 개수를 늘려가면서 이너셔의 변화를 관찰하여 최적의 클러스터 개수를 찾는다.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inertia = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">7</span>):</span><br><span class="line">  km = KMeans(n_clusters = k, random_state = <span class="number">42</span>)</span><br><span class="line">  km.fit(fruits_2d)</span><br><span class="line">  inertia.append(km.inertia_)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">2</span>, <span class="number">7</span>), inertia)</span><br><span class="line">plt.show</span><br></pre></td></tr></table></figure><pre><code>&lt;function matplotlib.pyplot.show&gt;</code></pre><p><img src="/images/Chapter_6_2/output_21_1.png" alt="png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;K-평균&quot;&gt;&lt;a href=&quot;#K-평균&quot; class=&quot;headerlink&quot; title=&quot;K-평균&quot;&gt;&lt;/a&gt;K-평균&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;각각의 픽셀값(3차원 -&amp;gt; 1차원 배열) 평균 구함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;픽셀의 평균값을</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>마켓과 머신러닝(Chapter_5_3)</title>
    <link href="https://ahnduhong.github.io/2022/03/30/Chapter_5_3/"/>
    <id>https://ahnduhong.github.io/2022/03/30/Chapter_5_3/</id>
    <published>2022-03-30T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="트리의-앙상블"><a href="#트리의-앙상블" class="headerlink" title="트리의 앙상블"></a>트리의 앙상블</h1><ul><li>LightGBM 기억!<ul><li>GBM –&gt; XGBoost –&gt; LightBGM</li><li>참고 1. 모델 개발 속도가 빨라졌는지?</li><li>참고 2. 모델의 성능이 좋아졌는지?</li></ul></li><li>TabNet (2019)<ul><li>딥러닝 컨셉 이해</li></ul></li></ul><h2 id="랜덤-포레스트-Forest"><a href="#랜덤-포레스트-Forest" class="headerlink" title="랜덤 포레스트(Forest)"></a>랜덤 포레스트(Forest)</h2><ul><li>결정 트리 나무를 500개 심기</li><li>최종적인 결정은 투표 방식<ul><li>나무-1 : 양성</li><li>나무-2 : 음성</li><li>나무-3 : 양성<br>…</li><li>나무-500 : 양성</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">wine = pd.read_csv(<span class="string">&#x27;https://bit.ly/wine_csv_data&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = wine[[<span class="string">&#x27;alcohol&#x27;</span>, <span class="string">&#x27;sugar&#x27;</span>, <span class="string">&#x27;pH&#x27;</span>]].to_numpy()</span><br><span class="line">target = wine[<span class="string">&#x27;class&#x27;</span>].to_numpy()</span><br><span class="line"></span><br><span class="line">train_input, test_input, train_target, test_target = train_test_split(data, </span><br><span class="line">                                                                      target, </span><br><span class="line">                                                                      test_size=<span class="number">0.2</span>, </span><br><span class="line">                                                                      random_state=<span class="number">42</span>)</span><br></pre></td></tr></table></figure><ul><li>p.267<ul><li>cross_validate() 교차 검증 수행</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_validate</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line">rf = RandomForestClassifier(n_jobs = -<span class="number">1</span>, random_state = <span class="number">42</span>) <span class="comment"># 모든 CPU 코어를 사용</span></span><br><span class="line">scores = cross_validate(rf, train_input, train_target,</span><br><span class="line">                        return_train_score = <span class="literal">True</span>, n_jobs = -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(np.mean(scores[<span class="string">&#x27;train_score&#x27;</span>]), np.mean(scores[<span class="string">&#x27;test_score&#x27;</span>]))</span><br></pre></td></tr></table></figure><pre><code>0.9973541965122431 0.8905151032797809</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rf.fit(train_input, train_target)</span><br><span class="line"><span class="built_in">print</span>(rf.feature_importances_)</span><br></pre></td></tr></table></figure><pre><code>[0.23167441 0.50039841 0.26792718]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rf = RandomForestClassifier(oob_score = <span class="literal">True</span>, n_jobs = -<span class="number">1</span>, random_state = <span class="number">42</span>) <span class="comment"># oob(out of bag) 부트스트랩 샘플에 포함되지 않고 남는 샘플</span></span><br><span class="line">rf.fit(train_input, train_target)</span><br><span class="line"><span class="built_in">print</span>(rf.oob_score_)</span><br></pre></td></tr></table></figure><pre><code>0.8934000384837406</code></pre><h1 id="그레이디언트-부스팅"><a href="#그레이디언트-부스팅" class="headerlink" title="그레이디언트 부스팅"></a>그레이디언트 부스팅</h1><ul><li>이전 트리(깊이가 얕은 결정 트리)의 오차를 보완하는 방식으로 사용</li><li>학습률 매개변수로 속도를 조절</li><li>장점 : 과대적합을 잘 억제시킴</li><li>단점 : 속도가 느림</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br><span class="line">gb = GradientBoostingClassifier(random_state = <span class="number">42</span>)</span><br><span class="line">scores = cross_validate(gb, train_input, train_target,</span><br><span class="line">                        return_train_score = <span class="literal">True</span>, n_jobs = -<span class="number">1</span>) <span class="comment"># return_train_score 훈련 점수 포함 여부</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.mean(scores[<span class="string">&#x27;train_score&#x27;</span>]), np.mean(scores[<span class="string">&#x27;test_score&#x27;</span>]))</span><br></pre></td></tr></table></figure><pre><code>0.8881086892152563 0.8720430147331015</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gb = GradientBoostingClassifier(n_estimators = <span class="number">500</span>, learning_rate = <span class="number">0.2</span>, random_state = <span class="number">42</span>)</span><br><span class="line">scores = cross_validate(gb, train_input, train_target,</span><br><span class="line">                        return_train_score = <span class="literal">True</span>, n_jobs = -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.mean(scores[<span class="string">&#x27;train_score&#x27;</span>]), np.mean(scores[<span class="string">&#x27;test_score&#x27;</span>]))</span><br></pre></td></tr></table></figure><pre><code>0.9464595437171814 0.8780082549788999</code></pre><ul><li>흐름<ul><li><ol start="0"><li>데이터 전처리 &#x2F; 시각화</li></ol></li><li><ol><li>기본 모형으로 전체 흐름을 설계</li></ol></li><li><ol start="2"><li>여러 모형을 비교 대조</li></ol></li><li><ol start="3"><li>교차검증. 하이퍼파라미터 성능 비교</li></ol></li><li>…</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;트리의-앙상블&quot;&gt;&lt;a href=&quot;#트리의-앙상블&quot; class=&quot;headerlink&quot; title=&quot;트리의 앙상블&quot;&gt;&lt;/a&gt;트리의 앙상블&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;LightGBM 기억!&lt;ul&gt;
&lt;li&gt;GBM –&amp;gt; XGBoost –&amp;gt;</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>마켓과 머신러닝(Chapter_5_1)</title>
    <link href="https://ahnduhong.github.io/2022/03/30/Chapter_5_1/"/>
    <id>https://ahnduhong.github.io/2022/03/30/Chapter_5_1/</id>
    <published>2022-03-30T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-불러오기"><a href="#데이터-불러오기" class="headerlink" title="데이터 불러오기"></a>데이터 불러오기</h1><ul><li>와인 데이터<ul><li>alcohol(알코올 도수), sugar(당도), pH(산도)</li><li>class 0 &#x3D; 레드 와인</li><li>class 1 &#x3D; 화이트 와인</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">wine = pd.read_csv(<span class="string">&#x27;https://bit.ly/wine_csv_data&#x27;</span>)</span><br><span class="line">wine.head()</span><br></pre></td></tr></table></figure>  <div id="df-32f88054-395d-476e-b732-de1fe6fb312f">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>alcohol</th>      <th>sugar</th>      <th>pH</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>9.4</td>      <td>1.9</td>      <td>3.51</td>      <td>0.0</td>    </tr>    <tr>      <th>1</th>      <td>9.8</td>      <td>2.6</td>      <td>3.20</td>      <td>0.0</td>    </tr>    <tr>      <th>2</th>      <td>9.8</td>      <td>2.3</td>      <td>3.26</td>      <td>0.0</td>    </tr>    <tr>      <th>3</th>      <td>9.8</td>      <td>1.9</td>      <td>3.16</td>      <td>0.0</td>    </tr>    <tr>      <th>4</th>      <td>9.4</td>      <td>1.9</td>      <td>3.51</td>      <td>0.0</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-32f88054-395d-476e-b732-de1fe6fb312f')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-32f88054-395d-476e-b732-de1fe6fb312f button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-32f88054-395d-476e-b732-de1fe6fb312f&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><ul><li>info()<ul><li>결측치 확인 &#x2F; 변수 타입</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 6497 entries, 0 to 6496Data columns (total 4 columns): #   Column   Non-Null Count  Dtype  ---  ------   --------------  -----   0   alcohol  6497 non-null   float64 1   sugar    6497 non-null   float64 2   pH       6497 non-null   float64 3   class    6497 non-null   float64dtypes: float64(4)memory usage: 203.2 KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine.describe()</span><br></pre></td></tr></table></figure>  <div id="df-b999d81a-0559-4b92-8e93-747feee74f33">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>alcohol</th>      <th>sugar</th>      <th>pH</th>      <th>class</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>6497.000000</td>      <td>6497.000000</td>      <td>6497.000000</td>      <td>6497.000000</td>    </tr>    <tr>      <th>mean</th>      <td>10.491801</td>      <td>5.443235</td>      <td>3.218501</td>      <td>0.753886</td>    </tr>    <tr>      <th>std</th>      <td>1.192712</td>      <td>4.757804</td>      <td>0.160787</td>      <td>0.430779</td>    </tr>    <tr>      <th>min</th>      <td>8.000000</td>      <td>0.600000</td>      <td>2.720000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>9.500000</td>      <td>1.800000</td>      <td>3.110000</td>      <td>1.000000</td>    </tr>    <tr>      <th>50%</th>      <td>10.300000</td>      <td>3.000000</td>      <td>3.210000</td>      <td>1.000000</td>    </tr>    <tr>      <th>75%</th>      <td>11.300000</td>      <td>8.100000</td>      <td>3.320000</td>      <td>1.000000</td>    </tr>    <tr>      <th>max</th>      <td>14.900000</td>      <td>65.800000</td>      <td>4.010000</td>      <td>1.000000</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-b999d81a-0559-4b92-8e93-747feee74f33')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-b999d81a-0559-4b92-8e93-747feee74f33 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-b999d81a-0559-4b92-8e93-747feee74f33&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><h1 id="표준화-작업"><a href="#표준화-작업" class="headerlink" title="표준화 작업"></a>표준화 작업</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = wine[[<span class="string">&#x27;alcohol&#x27;</span>,<span class="string">&#x27;sugar&#x27;</span>, <span class="string">&#x27;pH&#x27;</span>]].to_numpy()</span><br><span class="line">target = wine[<span class="string">&#x27;class&#x27;</span>].to_numpy()</span><br></pre></td></tr></table></figure><h1 id="훈련데이터와-테스트데이터로-분리"><a href="#훈련데이터와-테스트데이터로-분리" class="headerlink" title="훈련데이터와 테스트데이터로 분리"></a>훈련데이터와 테스트데이터로 분리</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">train_input, test_input, train_target, test_target = train_test_split(</span><br><span class="line">    data, target, test_size = <span class="number">0.2</span>, random_state = <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(train_input.shape, test_input.shape)</span><br></pre></td></tr></table></figure><pre><code>(5197, 3) (1300, 3)</code></pre><ul><li>표준화 진행</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">ss = StandardScaler()</span><br><span class="line">ss.fit(train_input)</span><br><span class="line">train_scaled = ss.transform(train_input)</span><br><span class="line">test_scaled = ss.transform(test_input)</span><br></pre></td></tr></table></figure><h1 id="모델-만들기"><a href="#모델-만들기" class="headerlink" title="모델 만들기"></a>모델 만들기</h1><h2 id="로지스틱회귀"><a href="#로지스틱회귀" class="headerlink" title="로지스틱회귀"></a>로지스틱회귀</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">lr.fit(train_scaled, train_target)</span><br><span class="line"><span class="built_in">print</span>(lr.score(train_scaled, train_target))</span><br><span class="line"><span class="built_in">print</span>(lr.score(test_scaled, test_target))</span><br><span class="line"><span class="built_in">print</span>(lr.coef_, lr.intercept_)</span><br></pre></td></tr></table></figure><pre><code>0.78083509717144510.7776923076923077[[ 0.51270274  1.6733911  -0.68767781]] [1.81777902]</code></pre><p>로지스틱 회귀</p><ul><li>수식</li></ul><p>의사결정트리의 기본 알고리즘을 활용해서, MS, 구글 등 이런 회사들이 신규 알고리즘을 만듬</p><ul><li>XGBoost, LightGBM, CatBoost</li><li>캐글 정형데이터</li><li>LightGBM (지금 현재 실무에서 많이 쓰임)<ul><li>4월 말 까지는 코드에 집중 대회 나감</li><li>PPT (알고리즘 소개)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line">dt = DecisionTreeClassifier(random_state=<span class="number">42</span>)</span><br><span class="line">dt.fit(train_scaled, train_target)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dt.score(train_scaled, train_target)) <span class="comment"># 훈련 세트</span></span><br><span class="line"><span class="built_in">print</span>(dt.score(test_scaled, test_target)) <span class="comment"># 테스트 세트</span></span><br></pre></td></tr></table></figure><pre><code>0.9969213007504330.8592307692307692</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> plot_tree</span><br><span class="line">plt.figure(figsize = (<span class="number">10</span>, <span class="number">7</span>))</span><br><span class="line">plot_tree(dt)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_5_1/output_16_0.png" alt="png"></p><ul><li>filled &#x3D; True<ul><li>클래스 마다 색깔을 부여하고, 어떤 클래스의 비율이 높아지면 점점 진한 색으로 표시</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">10</span>, <span class="number">7</span>))</span><br><span class="line">plot_tree(dt, max_depth = <span class="number">1</span>, filled = <span class="literal">True</span>, feature_names = [<span class="string">&#x27;alcohol&#x27;</span>,<span class="string">&#x27;sugar&#x27;</span>, <span class="string">&#x27;pH&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_5_1/output_18_0.png" alt="png"></p><h1 id="가지치기"><a href="#가지치기" class="headerlink" title="가지치기"></a>가지치기</h1><ul><li><p>과대적합을 방지하기 위한 것</p></li><li><p>max_depth</p><ul><li>트리의 최대 깊이</li><li>default &#x3D; None</li><li>완벽하게 클래스 값이 결정될 때 까지 분할 또는 데이터 개수가 min_samples_split보다 작아질 때까지 분할</li><li>깊이가 깊어지면 과적합될 수 있으므로 적절히 제어 필요</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dt = DecisionTreeClassifier(max_depth = <span class="number">3</span>, random_state=<span class="number">42</span>)</span><br><span class="line">dt.fit(train_input, train_target)</span><br><span class="line"><span class="built_in">print</span>(dt.score(train_input, train_target))</span><br><span class="line"><span class="built_in">print</span>(dt.score(test_input, test_target))</span><br></pre></td></tr></table></figure><pre><code>0.84548778141235330.8415384615384616</code></pre><ul><li>지니 계수(불순도) <a href="https://data-science-hi.tistory.com/59">참고 링크</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">20</span>, <span class="number">15</span>))</span><br><span class="line">plot_tree(dt, filled = <span class="literal">True</span>, feature_names = [<span class="string">&#x27;alcohol&#x27;</span>, <span class="string">&#x27;sugar&#x27;</span>, <span class="string">&#x27;pH&#x27;</span>])</span><br><span class="line">plt.show() <span class="comment"># 지니계수(불순도) 및 value 값 판단</span></span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_5_1/output_23_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> graphviz</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># DOT data</span></span><br><span class="line">dot_data = tree.export_graphviz(dt, out_file=<span class="literal">None</span>, </span><br><span class="line">                                feature_names = [<span class="string">&#x27;alcohol&#x27;</span>, <span class="string">&#x27;sugar&#x27;</span>, <span class="string">&#x27;pH&#x27;</span>],  </span><br><span class="line">                                filled=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw graph</span></span><br><span class="line">graph = graphviz.Source(dot_data, <span class="built_in">format</span>=<span class="string">&quot;png&quot;</span>) </span><br><span class="line">graph</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_5_1/output_24_0.svg" alt="svg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.render(<span class="string">&quot;decision_tree_graphivz&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>&#39;decision_tree_graphivz.png&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap, to_rgb</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">15</span>))</span><br><span class="line">artists = plot_tree(dt, filled = <span class="literal">True</span>, </span><br><span class="line">          feature_names = [<span class="string">&#x27;alcohol&#x27;</span>, <span class="string">&#x27;sugar&#x27;</span>, <span class="string">&#x27;pH&#x27;</span>])</span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> artist, impurity, value <span class="keyword">in</span> <span class="built_in">zip</span>(artists, dt.tree_.impurity, dt.tree_.value):</span><br><span class="line">    r, g, b = to_rgb(colors[np.argmax(value)])</span><br><span class="line">    f = impurity * <span class="number">2</span></span><br><span class="line">    artist.get_bbox_patch().set_facecolor((f + (<span class="number">1</span>-f)*r, f + (<span class="number">1</span>-f)*g, f + (<span class="number">1</span>-f)*b))</span><br><span class="line">    artist.get_bbox_patch().set_edgecolor(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_5_1/output_26_0.png" alt="png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;데이터-불러오기&quot;&gt;&lt;a href=&quot;#데이터-불러오기&quot; class=&quot;headerlink&quot; title=&quot;데이터 불러오기&quot;&gt;&lt;/a&gt;데이터 불러오기&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;와인 데이터&lt;ul&gt;
&lt;li&gt;alcohol(알코올 도수), sugar(당도</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>마켓과 머신러닝(Chapter_5_2)</title>
    <link href="https://ahnduhong.github.io/2022/03/30/Chpater_5_2/"/>
    <id>https://ahnduhong.github.io/2022/03/30/Chpater_5_2/</id>
    <published>2022-03-30T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="교차-검증과-그리드-서치"><a href="#교차-검증과-그리드-서치" class="headerlink" title="교차 검증과 그리드 서치"></a>교차 검증과 그리드 서치</h1><ul><li>키워드 : 하이퍼 파라미터 ( 그리드서치 vs 램덤서치)</li><li>데이터가 작을 떄 주로 사용</li><li>하이퍼 파라미터<ul><li>max_depth : 3, 정확도가 84%</li></ul></li><li>결론<ul><li>모르면 디폴드만 쓰자!</li><li>가성비 (시간 대비 성능 보장 안됨!)</li></ul></li></ul><h1 id="검증-세트"><a href="#검증-세트" class="headerlink" title="검증 세트"></a>검증 세트</h1><ul><li>테스트 세트 (1회성)</li><li>훈련 데이터를 훈련 데이터 + 검증 데이터로 재 분할</li></ul><h2 id="현실"><a href="#현실" class="headerlink" title="현실"></a>현실</h2><ul><li>테스트 데이터가 별도로 존재하지 않음!</li><li>전체 데이터 &#x3D; 훈련 (6) : 검증 (2) : 테스트 (2)<ul><li>테스트 데이터는 모르는 데이터로 생각!</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">wine = pd.read_csv(<span class="string">&quot;https://bit.ly/wine_csv_data&quot;</span>)</span><br><span class="line"></span><br><span class="line">data = wine[[<span class="string">&#x27;alcohol&#x27;</span>, <span class="string">&#x27;sugar&#x27;</span>, <span class="string">&#x27;pH&#x27;</span>]].to_numpy()</span><br><span class="line">target = wine[<span class="string">&#x27;class&#x27;</span>].to_numpy()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">train_input, test_input, train_target, test_target = train_test_split(</span><br><span class="line">    data, target, test_size = <span class="number">0.2</span>, random_state = <span class="number">42</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub_input, val_input, sub_target, val_target = train_test_split(</span><br><span class="line">    train_input, train_target, test_size = <span class="number">0.2</span>, random_state = <span class="number">42</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(sub_input.shape, val_input.shape)</span><br></pre></td></tr></table></figure><pre><code>(4157, 3) (1040, 3)</code></pre><h1 id="모델-만든-후-평가"><a href="#모델-만든-후-평가" class="headerlink" title="모델 만든 후 평가"></a>모델 만든 후 평가</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line">dt = DecisionTreeClassifier(random_state = <span class="number">42</span>)</span><br><span class="line">dt.fit(sub_input, sub_target)</span><br><span class="line"><span class="built_in">print</span>(dt.score(sub_input, sub_target))</span><br><span class="line"><span class="built_in">print</span>(dt.score(val_input, val_target))</span><br></pre></td></tr></table></figure><pre><code>0.99711330286264130.864423076923077</code></pre><h1 id="교차-검증"><a href="#교차-검증" class="headerlink" title="교차 검증"></a>교차 검증</h1><ul><li>: 훈련 세트에서 무작위로 검증 세트를 각각 다르게 떼어 내어 평가하는 과정을 여러 번 반복</li><li>교차 검증의 목적 : 좋은 모델이 만들어진다!<ul><li>좋은 모델 !&#x3D; 성능 좋은 모델</li><li>좋은 모델 &#x3D; 과대적합이 아닌 모델 &#x3D; 모형의 오차가 적은 모델 &#x3D; 안정적인 모델</li></ul></li><li>교재 245p<ul><li>모델평가 1 : 90% (소요시간 : 1시간)</li><li>모델평가 2 : 85%</li><li>모델평가 3 : 80%</li></ul></li><li>단점 : 시간이 오래 걸림</li></ul><h1 id="교차-검증-함수"><a href="#교차-검증-함수" class="headerlink" title="교차 검증 함수"></a>교차 검증 함수</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_validate <span class="comment"># cross_validate 교차 검증 함수</span></span><br><span class="line">scores = cross_validate(dt, train_input, train_target)</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;fit_time&#39;: array([0.02901554, 0.01234174, 0.01105666, 0.01976061, 0.01070189]), &#39;score_time&#39;: array([0.00157857, 0.00140238, 0.00126791, 0.00145054, 0.00131822]), &#39;test_score&#39;: array([0.86923077, 0.84615385, 0.87680462, 0.84889317, 0.83541867])&#125;</code></pre><ul><li>최종점수 평균 구하기</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span>(np.mean(scores[<span class="string">&#x27;test_score&#x27;</span>])) <span class="comment"># test_score = 위에서 검증한 폴드의 점수 **혼동주의**</span></span><br></pre></td></tr></table></figure><pre><code>0.855300214703487</code></pre><ul><li>훈련 세트 섞은 후, 10-폴드 교차검증</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> StratifiedKFold</span><br><span class="line">splitter = StratifiedKFold(n_splits = <span class="number">10</span>, shuffle = <span class="literal">True</span>, random_state = <span class="number">42</span>) <span class="comment"># n_splits 몇 폴드 교차 검증을 할지</span></span><br><span class="line">scores = cross_validate(dt, train_input, train_target, cv = splitter) <span class="comment"># cv = splitter 최적의 분할과 최적의 랜덤 분할을 선택하는 랜덤분할</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.mean(scores[<span class="string">&#x27;test_score&#x27;</span>]))</span><br></pre></td></tr></table></figure><pre><code>0.8574181117533719</code></pre><h1 id="하이퍼파라미터-튜닝"><a href="#하이퍼파라미터-튜닝" class="headerlink" title="하이퍼파라미터 튜닝"></a>하이퍼파라미터 튜닝</h1><ul><li>하이퍼파라미터란 : 모델이 학습할 수 없어서 사용자가 지정해야만 하는 파라미터</li><li>사이킷런과 같은 머신러닝 라이브러리를 사용할 때 이런 하이퍼파라미터는 모두 class나 method의 매개변수로 표현</li><li>랜덤 서치 사용</li><li>자동으로 잡아주는 라이브러리들이 등장하기 시작함<ul><li>hyperopt</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- GridSearchCV <span class="keyword">class</span>는 하이퍼파라미터 탐색과 교차 검증을 한 번에 수행</span><br></pre></td></tr></table></figure><pre><code>  File &quot;&lt;ipython-input-10-258156bef445&gt;&quot;, line 1    - GridSearchCV class는 하이퍼파라미터 탐색과 교차 검증을 한 번에 수행                        ^SyntaxError: invalid syntax</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;min_impurity_decrease&#x27;</span> : [<span class="number">0.0001</span>, <span class="number">0.0002</span>, <span class="number">0.0003</span>, <span class="number">0.0004</span>, <span class="number">0.0005</span>],</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span> : [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># dt = DecisionTreeClassifier(random_state = 42)</span></span><br><span class="line">gs = GridSearchCV(DecisionTreeClassifier(random_state = <span class="number">42</span>), params, n_jobs = -<span class="number">1</span>)</span><br><span class="line">gs.fit(train_input, train_target)</span><br><span class="line">dt = gs.best_estimator_ <span class="comment"># best_estimator는 훈련이 끝나면 25개의 모델중에서 검증 점수가 가장 높은 모델의 매개변수 조합으로 전체 훈련 세트에서 자동으로 다시 모델을 훈련</span></span><br><span class="line"><span class="built_in">print</span>(dt)</span><br><span class="line"><span class="built_in">print</span>(dt.score(train_input, train_target))</span><br><span class="line"><span class="built_in">print</span>(gs.best_params_) <span class="comment"># best_params 그리드 서치로 찾은 최적의 매개변수</span></span><br></pre></td></tr></table></figure><pre><code>DecisionTreeClassifier(max_depth=7, min_impurity_decrease=0.0005,                       random_state=42)0.8830094285164518&#123;&#39;max_depth&#39;: 7, &#39;min_impurity_decrease&#39;: 0.0005&#125;CPU times: user 308 ms, sys: 63.9 ms, total: 372 msWall time: 4.09 s</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(gs.cv_results_[<span class="string">&#x27;mean_test_score&#x27;</span>]) <span class="comment"># 각 매개변수에서 수행한 교차 검증의 평균 점수</span></span><br></pre></td></tr></table></figure><pre><code>[0.84125583 0.84125583 0.84125583 0.84125583 0.84125583 0.85337806 0.85337806 0.85337806 0.85337806 0.85318557 0.85780355 0.85799604 0.85857352 0.85857352 0.85838102 0.85645721 0.85799678 0.85876675 0.85972866 0.86088306 0.85607093 0.85761031 0.85799511 0.85991893 0.86280466]</code></pre><h1 id="랜덤-서치"><a href="#랜덤-서치" class="headerlink" title="랜덤 서치"></a>랜덤 서치</h1><ul><li>p.252. 매개변수 값의 목록을 전달하는 것이 아니라 매개변수를 샘플링 할 수 있도록 확률 분포 객체를 전달.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> uniform, randint</span><br><span class="line">rgen = randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">rgen.rvs(<span class="number">10</span>) <span class="comment"># rvs 무작위로 표본을 만듬</span></span><br></pre></td></tr></table></figure><pre><code>array([8, 5, 3, 1, 5, 9, 3, 1, 7, 8])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.unique(rgen.rvs(<span class="number">1000</span>), return_counts = <span class="literal">True</span>) <span class="comment"># return_counts = True 는 중복되지 않는 요소들이 입력 배열에 나타난 회 수를 리턴</span></span><br></pre></td></tr></table></figure><pre><code>(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([ 95, 103, 106, 100,  91, 102, 104,  92,  97, 110]))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> RandomizedSearchCV</span><br><span class="line"><span class="comment"># p.254</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;min_impurity_decrease&#x27;</span> : uniform(<span class="number">0.0001</span>, <span class="number">0.001</span>),</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span> : randint(<span class="number">20</span>,<span class="number">50</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gs = RandomizedSearchCV(DecisionTreeClassifier(random_state = <span class="number">42</span>), params,</span><br><span class="line">                        n_iter = <span class="number">100</span>, n_jobs = -<span class="number">1</span>, random_state = <span class="number">42</span>)</span><br><span class="line">gs.fit(train_input, train_target)</span><br></pre></td></tr></table></figure><pre><code>RandomizedSearchCV(estimator=DecisionTreeClassifier(random_state=42),                   n_iter=100, n_jobs=-1,                   param_distributions=&#123;&#39;max_depth&#39;: &lt;scipy.stats._distn_infrastructure.rv_frozen object at 0x7fb54e9ea550&gt;,                                        &#39;min_impurity_decrease&#39;: &lt;scipy.stats._distn_infrastructure.rv_frozen object at 0x7fb54e104390&gt;&#125;,                   random_state=42)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gs.best_params_ <span class="comment"># 최적의 매개변수 조합 출력</span></span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;max_depth&#39;: 29, &#39;min_impurity_decrease&#39;: 0.000437615171403628&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;교차-검증과-그리드-서치&quot;&gt;&lt;a href=&quot;#교차-검증과-그리드-서치&quot; class=&quot;headerlink&quot; title=&quot;교차 검증과 그리드 서치&quot;&gt;&lt;/a&gt;교차 검증과 그리드 서치&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;키워드 : 하이퍼 파라미터 ( 그리드</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>마켓과 머신러닝(Chapter_4_2)</title>
    <link href="https://ahnduhong.github.io/2022/03/29/Chapter_4_2/"/>
    <id>https://ahnduhong.github.io/2022/03/29/Chapter_4_2/</id>
    <published>2022-03-29T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:20.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="확률적-경사-하강법"><a href="#확률적-경사-하강법" class="headerlink" title="확률적 경사 하강법"></a>확률적 경사 하강법</h1><ul><li><p>1차 가장 큰 차이(기존 ML모형)</p><ul><li>샘플링 방식이 달라짐</li><li>샘플링을 더 세분화함</li></ul></li><li><p>2차 가장 큰 차이</p><ul><li>오차를 보정(기울기)</li></ul></li><li><p>오차 &#x3D; 손실 &#x3D; coast</p><ul><li>미분을 하여 오차가 가장 적을때까지 내려감.</li></ul></li><li><p>경사 하강법이 쓰인 여러 알고리즘</p><ul><li>(이미지, 텍스트) 딥러닝 기초 알고리즘</li><li>트리 알고리즘 + 경사 하강법 융합 &#x3D; 부스트 계열</li><li>대표 알고리즘 : <strong>LightGBM</strong>, <strong>Xgboost</strong>, Catboost</li></ul></li></ul><h1 id="SGDClassifier"><a href="#SGDClassifier" class="headerlink" title="SGDClassifier"></a>SGDClassifier</h1><ul><li>확률적 경사하강법 분류기</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">fish = pd.read_csv(<span class="string">&quot;https://bit.ly/fish_csv_data&quot;</span>)</span><br><span class="line">fish.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 159 entries, 0 to 158Data columns (total 6 columns): #   Column    Non-Null Count  Dtype  ---  ------    --------------  -----   0   Species   159 non-null    object  1   Weight    159 non-null    float64 2   Length    159 non-null    float64 3   Diagonal  159 non-null    float64 4   Height    159 non-null    float64 5   Width     159 non-null    float64dtypes: float64(5), object(1)memory usage: 7.6+ KB</code></pre><ul><li>배열로 변환하는 코드<ul><li>독립변수 &#x3D; fish_input</li><li>종속변수 &#x3D; fish_target</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fish_input = fish[[<span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Length&#x27;</span>, <span class="string">&#x27;Diagonal&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Width&#x27;</span>]]</span><br><span class="line">fish_target = fish[<span class="string">&#x27;Species&#x27;</span>].to_numpy()</span><br></pre></td></tr></table></figure><ul><li>훈련 세트와 테스트 세트로 분리</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">train_input, test_input, train_target, test_target = train_test_split(fish_input, fish_target, random_state = <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">train_input.shape, test_input.shape, train_target.shape, test_target.shape</span><br></pre></td></tr></table></figure><pre><code>((119, 5), (40, 5), (119,), (40,))</code></pre><ul><li>표준화 처리<ul><li>다시 한번 강조하지만 꼭 훈련 세트에서 학습한 통계값으로 테스트 세트도 변환한다.</li><li>키워드 : Data Leakage 방지</li><li>데이터 분석 희망자 필수 공부!</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">ss = StandardScaler()</span><br><span class="line">ss.fit(train_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ss 훈련 데이터만 활용해서 학습(?)이 끝난 상태</span></span><br><span class="line"><span class="comment"># 표준화 처리를 훈련 데이터와 테스트 데이터에 동시 적용</span></span><br><span class="line">train_scaled = ss.transform(train_input)</span><br><span class="line">test_scaled = ss.transform(test_input)</span><br></pre></td></tr></table></figure><h1 id="모델-학습"><a href="#모델-학습" class="headerlink" title="모델 학습"></a>모델 학습</h1><ul><li>2개의 매개 변수 지정</li><li>loss &#x3D; “log” &#x3D; 로지스틱 손실 함수로 지정</li><li>max_iter &#x3D; 에포크 횟수 지정<ul><li>에포크란(epoch)_01 : 훈련 데이터셋에 포함된 모든 데이터들이 한 번씩 모델을 통과한 횟수로, 모든 학습 데이터셋을 학습하는 횟수</li><li>에포크란_02 : 1 epoch는 전체 학습 데이터셋이 한 신경망에 적용되어 순전파와 역전파를 통해 신경망을 한 번 통과했다는 의미가 된다, 즉 epoch가 10회라면, 학습 데이터 셋 A를 10회 모델에 학습시켰다는 것</li><li>에포크란_03 : epoch를 높일수록, 다양한 무작위 가중치로 학습을 해보므로, 적합한 파라미터를 찾을 확률이 올라간다.(즉, 손실 값이 내려가게 된다.) <strong>하지만 지나치게 epoch를 높이게 되면, 그 학습 데이터셋에 과적합되어 다른데이터에 대해선 제대로 된 예측을 하지 못할 수 있다.</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 매개변수 지정</span></span><br><span class="line"><span class="comment"># 하이퍼파라미터 설정</span></span><br><span class="line"><span class="comment">## 매개변수 값을 dictionary 형태로 추가하는 코드 작성 가능 </span></span><br><span class="line"><span class="comment">## 강사는 입문자들에게는 비추천</span></span><br><span class="line">sc = SGDClassifier(loss = <span class="string">&quot;log&quot;</span>, max_iter = <span class="number">40</span>, random_state = <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모형 학습</span></span><br><span class="line">sc.fit(train_scaled, train_target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 스코어 확인 (정확도)</span></span><br><span class="line"><span class="built_in">print</span>(sc.score(train_scaled, train_target))</span><br><span class="line"><span class="built_in">print</span>(sc.score(test_scaled, test_target)) <span class="comment"># 샘플링의 차이로 값이 일정하지 않고 다를 수 있다.</span></span><br></pre></td></tr></table></figure><pre><code>0.85714285714285710.8</code></pre><ul><li>적절한 에포크 숫자를 찾자.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">sc = SGDClassifier(loss = <span class="string">&quot;log&quot;</span>, max_iter = <span class="number">100</span>, tol = <span class="literal">None</span>, random_state = <span class="number">42</span>)</span><br><span class="line">train_score = []</span><br><span class="line">test_score = []</span><br><span class="line">classes = np.unique(train_target)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">300</span>):</span><br><span class="line">  sc.partial_fit(train_scaled, train_target, classes = classes)</span><br><span class="line">  train_score.append(sc.score(train_scaled, train_target))</span><br><span class="line">  test_score.append(sc.score(test_scaled, test_target))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 정확도</span></span><br><span class="line"><span class="built_in">print</span>(train_score[:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(test_score[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><pre><code>[0.5294117647058824, 0.6218487394957983, 0.6386554621848739, 0.7310924369747899, 0.7226890756302521][0.65, 0.55, 0.575, 0.7, 0.7]</code></pre><ul><li>모형 시각화</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.plot(train_score)</span><br><span class="line">ax.plot(test_score)</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;Epoch&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;Accuracy&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 파란색 훈련, 노란색 테스트</span></span><br><span class="line"><span class="comment"># 훈련데이터가 안정화되고 테스트데이터도 안정화되면서 가까운 곳은 epoch가 100일때의 지점이라고 알 수 있음.</span></span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_4_2/output_16_0.png" alt="png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;확률적-경사-하강법&quot;&gt;&lt;a href=&quot;#확률적-경사-하강법&quot; class=&quot;headerlink&quot; title=&quot;확률적 경사 하강법&quot;&gt;&lt;/a&gt;확률적 경사 하강법&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1차 가장 큰 차이(기존 ML모형)&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>마켓과 머신러닝(Chapter_4_1)</title>
    <link href="https://ahnduhong.github.io/2022/03/29/Chapter_4_1/"/>
    <id>https://ahnduhong.github.io/2022/03/29/Chapter_4_1/</id>
    <published>2022-03-29T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-불러오기"><a href="#데이터-불러오기" class="headerlink" title="데이터 불러오기"></a>데이터 불러오기</h1><ul><li>컬럼 설명 177p 그림</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fish = pd.read_csv(<span class="string">&#x27;https://bit.ly/fish_csv_data&#x27;</span>)</span><br><span class="line">fish.head()</span><br></pre></td></tr></table></figure>  <div id="df-65932b7d-508a-47e0-8f70-ce7c6944b42c">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Species</th>      <th>Weight</th>      <th>Length</th>      <th>Diagonal</th>      <th>Height</th>      <th>Width</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Bream</td>      <td>242.0</td>      <td>25.4</td>      <td>30.0</td>      <td>11.5200</td>      <td>4.0200</td>    </tr>    <tr>      <th>1</th>      <td>Bream</td>      <td>290.0</td>      <td>26.3</td>      <td>31.2</td>      <td>12.4800</td>      <td>4.3056</td>    </tr>    <tr>      <th>2</th>      <td>Bream</td>      <td>340.0</td>      <td>26.5</td>      <td>31.1</td>      <td>12.3778</td>      <td>4.6961</td>    </tr>    <tr>      <th>3</th>      <td>Bream</td>      <td>363.0</td>      <td>29.0</td>      <td>33.5</td>      <td>12.7300</td>      <td>4.4555</td>    </tr>    <tr>      <th>4</th>      <td>Bream</td>      <td>430.0</td>      <td>29.0</td>      <td>34.0</td>      <td>12.4440</td>      <td>5.1340</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-65932b7d-508a-47e0-8f70-ce7c6944b42c')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-65932b7d-508a-47e0-8f70-ce7c6944b42c button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-65932b7d-508a-47e0-8f70-ce7c6944b42c&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><h1 id="데이터-변환"><a href="#데이터-변환" class="headerlink" title="데이터 변환"></a>데이터 변환</h1><ul><li>배열로 변환</li><li>독립변수</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.unique(fish[<span class="string">&#x27;Species&#x27;</span>])) <span class="comment"># unique()함수는 괄호안에 있는 열의 고유한 값을 추출함.</span></span><br><span class="line">fish_input = fish[[<span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Length&#x27;</span>, <span class="string">&#x27;Diagonal&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Width&#x27;</span>]].to_numpy()</span><br><span class="line">fish_input.shape</span><br></pre></td></tr></table></figure><pre><code>[&#39;Bream&#39; &#39;Roach&#39; &#39;Whitefish&#39; &#39;Parkki&#39; &#39;Perch&#39; &#39;Pike&#39; &#39;Smelt&#39;](159, 5)</code></pre><ul><li>target 배열로 변환</li><li>종속변수</li><li>to_numpy() method는 pandas 객체를 numpy 배열 객체인 ndarray로 반환 <a href="https://kongdols-room.tistory.com/110">링크 텍스트</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fish_target = fish[<span class="string">&#x27;Species&#x27;</span>].to_numpy()</span><br></pre></td></tr></table></figure><h1 id="훈련-데이터와-테스트데이터"><a href="#훈련-데이터와-테스트데이터" class="headerlink" title="훈련 데이터와 테스트데이터"></a>훈련 데이터와 테스트데이터</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">train_input, test_input, train_target, test_target = train_test_split(</span><br><span class="line">    fish_input, fish_target, random_state = <span class="number">42</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p>표준화 전처리</p><ul><li>데이터의 결측치 및 이상치를 확인하거나 제거하고 불일치되는 부분을 일관성 있는 데이터의 형태로 전환 하기도 하는 이 전 과정을 데이터의 전처리라고 일컫는다.</li></ul></li><li><p>대표적인 사이킷런 스케일링의 종류</p><ul><li>StandardScaler : 기본 스케일. 평균과 표준편차 사용</li><li>MinMaxScaler : 최대&#x2F;최소값이 각각 1, 0이 되도록 스케일링</li><li>MaxAbsScaler : 최대절대값과 0이 각각 1, 0이 되도록 스케일링</li><li>RobustScaler : 중앙값(median)과 IQR(interquartile range) 사용. 아웃라이어의 영향을 최소화</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">ss = StandardScaler()</span><br><span class="line">ss.fit(train_input)</span><br><span class="line"></span><br><span class="line">train_scaled = ss.transform(train_input) <span class="comment"># 표준화</span></span><br><span class="line">test_scaled = ss.transform(test_input)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(train_input[:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(train_scaled[:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(test_scaled[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><pre><code>[[720.      35.      40.6     16.3618   6.09  ] [500.      45.      48.       6.96     4.896 ] [  7.5     10.5     11.6      1.972    1.16  ] [110.      22.      23.5      5.5225   3.995 ] [140.      20.7     23.2      8.5376   3.2944]][[ 0.91965782  0.60943175  0.81041221  1.85194896  1.00075672] [ 0.30041219  1.54653445  1.45316551 -0.46981663  0.27291745] [-1.0858536  -1.68646987 -1.70848587 -1.70159849 -2.0044758 ] [-0.79734143 -0.60880176 -0.67486907 -0.82480589 -0.27631471] [-0.71289885 -0.73062511 -0.70092664 -0.0802298  -0.7033869 ]][[-0.88741352 -0.91804565 -1.03098914 -0.90464451 -0.80762518] [-1.06924656 -1.50842035 -1.54345461 -1.58849582 -1.93803151] [-0.54401367  0.35641402  0.30663259 -0.8135697  -0.65388895] [-0.34698097 -0.23396068 -0.22320459 -0.11905019 -0.12233464] [-0.68475132 -0.51509149 -0.58801052 -0.8998784  -0.50124996]]</code></pre><h1 id="k-최근접-이웃-분류기의-확률-예측"><a href="#k-최근접-이웃-분류기의-확률-예측" class="headerlink" title="k-최근접 이웃 분류기의 확률 예측"></a>k-최근접 이웃 분류기의 확률 예측</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">kn = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line">kn.fit(train_scaled, train_target)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(kn.score(train_scaled, train_target))</span><br><span class="line"><span class="built_in">print</span>(kn.score(test_scaled, test_target))</span><br></pre></td></tr></table></figure><pre><code>0.89075630252100850.85</code></pre><ul><li><p>182p</p></li><li><p>다중분류</p><ul><li>타깃 데이터에 2개 이상의 클래스가 포함된 문제</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">proba = kn.predict_proba(test_scaled[:<span class="number">5</span>]) <span class="comment"># predict_proba() method는 클래스별 확률값을 반환</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">round</span>(proba, decimals = <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(kn.classes_) <span class="comment"># 타깃값을 그대로 사이킷런 모델에 전달하면 순서가 자동으로 알파벳순으로 매겨짐, 따라서 이 전 KNeighborsClassifier에서 정렬된 타깃값이 저장된 classes_ 를사용</span></span><br></pre></td></tr></table></figure><pre><code>[[0.     0.     1.     0.     0.     0.     0.    ] [0.     0.     0.     0.     0.     1.     0.    ] [0.     0.     0.     1.     0.     0.     0.    ] [0.     0.     0.6667 0.     0.3333 0.     0.    ] [0.     0.     0.6667 0.     0.3333 0.     0.    ]][&#39;Bream&#39; &#39;Parkki&#39; &#39;Perch&#39; &#39;Pike&#39; &#39;Roach&#39; &#39;Smelt&#39; &#39;Whitefish&#39;]</code></pre><h1 id="로지스틱-회귀"><a href="#로지스틱-회귀" class="headerlink" title="로지스틱 회귀"></a>로지스틱 회귀</h1><ul><li><p>중요도 : 최상</p></li><li><p>Why? </p><ul><li>로지스틱 회귀<ul><li>기초 통계로도 활용 (의학통계)</li><li>머신러닝 분류모형의 기초 모형인데, 성능이 생각보다 나쁘지 않음<ul><li>데이터셋, 수치 데이터 기반</li></ul></li><li>딥러닝 : 초기모형에 해당됨.</li></ul></li></ul></li><li><p><strong>로지스틱회귀(Logistic regression)와 선현 회귀(linear regression)의 차이점</strong></p><ul><li><strong>선형회귀의 결과값은 연속적인값 , 오차값을 줄이기 위해 MSE(Mean Square Error)을 사용</strong></li><li><strong>로지스틱회귀의 결과값은 범주값, 그래프로 표현할시 0% ~ 100%로 사용하기 편함, 오차값을 줄이기 위해 Log Loss(cross entropy)를 사용</strong><br><a href="https://youtu.be/zASrGSHoqL4">Youtube Link</a></li></ul></li><li><p>이진 분류를 수행 할 때 시그모이드 함수의 출력이 0.5 보다 크면 양성 클래스, 0.5보다 작으면 음성 클래스로 판단(정확히 0.5일때 사이킷런은 음성 클래스로 판단.***라이브러리마다 다를 수 있음)</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">z = np.arange(-<span class="number">5</span>, <span class="number">5</span>, <span class="number">0.1</span>)</span><br><span class="line">phi = <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z)) <span class="comment"># 시그모이드 함수(로지스틱함수)</span></span><br><span class="line"><span class="comment"># print(z)</span></span><br><span class="line"><span class="comment"># print(phi)</span></span><br><span class="line"></span><br><span class="line">plt.plot(z, phi, color=<span class="string">&#x27;green&#x27;</span>) <span class="comment"># 문서를 봐야함</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;phi&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_4_1/output_19_0.png" alt="png"></p><h1 id="로지스틱-회귀로-이진-분류-수행하기"><a href="#로지스틱-회귀로-이진-분류-수행하기" class="headerlink" title="로지스틱 회귀로 이진 분류 수행하기"></a>로지스틱 회귀로 이진 분류 수행하기</h1><ul><li>넘파이 배열은 True, False 값을 전달하여 행을 선택 할수 있음</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char_arr = np.array([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(char_arr[[<span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>]]) <span class="comment"># True 인 원소만 출력</span></span><br></pre></td></tr></table></figure><pre><code>[&#39;A&#39; &#39;C&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 도미와 빙어의 행만 골라내기</span></span><br><span class="line">bream_smelt_indexes = (train_target == <span class="string">&#x27;Bream&#x27;</span>) | (train_target == <span class="string">&#x27;Smelt&#x27;</span>)</span><br><span class="line">train_bream_smelt = train_scaled[bream_smelt_indexes]</span><br><span class="line">target_bream_smelt = train_target[bream_smelt_indexes]</span><br></pre></td></tr></table></figure><ul><li>p186. </li><li>모형 만들고 예측하기!</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr = LogisticRegression() <span class="comment"># 로지스틱 회귀</span></span><br><span class="line"><span class="comment">#       독립변수             종속변수</span></span><br><span class="line">lr.fit(train_bream_smelt, target_bream_smelt)</span><br></pre></td></tr></table></figure><pre><code>LogisticRegression()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 예측하기 </span></span><br><span class="line"><span class="comment"># 클래스로 분류</span></span><br><span class="line"><span class="comment"># 확률값 -&gt; 0.5</span></span><br><span class="line"><span class="built_in">print</span>(lr.predict(train_bream_smelt[:<span class="number">5</span>]))</span><br></pre></td></tr></table></figure><pre><code>[&#39;Bream&#39; &#39;Smelt&#39; &#39;Bream&#39; &#39;Bream&#39; &#39;Bream&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(lr.predict_proba(train_bream_smelt[:<span class="number">5</span>]))</span><br><span class="line"><span class="built_in">print</span>(lr.classes_)</span><br></pre></td></tr></table></figure><pre><code>[[0.99759855 0.00240145] [0.02735183 0.97264817] [0.99486072 0.00513928] [0.98584202 0.01415798] [0.99767269 0.00232731]][&#39;Bream&#39; &#39;Smelt&#39;]</code></pre><ul><li>방정식의 각 기울기와 상수를 구하는 코드</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(lr.coef_, lr.intercept_) <span class="comment"># LinearRegression 클래스가 구한 모델 파라미터는 가중치와 절편이 coef_와 intercept_ 인스턴스 변수에 따로 저장되어 있음</span></span><br></pre></td></tr></table></figure><pre><code>[[-0.4037798  -0.57620209 -0.66280298 -1.01290277 -0.73168947]] [-2.16155132]</code></pre><ul><li>z식</li><li>z값을 출력하자!<ul><li>decisions_function() method 사용으로 z 값 구하기</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decisions = lr.decision_function(train_bream_smelt[:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(decisions)</span><br></pre></td></tr></table></figure><pre><code>[-6.02927744  3.57123907 -5.26568906 -4.24321775 -6.0607117 ]</code></pre><ul><li>scipy(사이파이) 라이브러리 안의 expit(시그모이드함수)() 사용</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> expit</span><br><span class="line"><span class="built_in">print</span>(expit(decisions))</span><br></pre></td></tr></table></figure><pre><code>[0.00240145 0.97264817 0.00513928 0.01415798 0.00232731]</code></pre><h1 id="로지스틱-회귀로-다중-분류-수행하기"><a href="#로지스틱-회귀로-다중-분류-수행하기" class="headerlink" title="로지스틱 회귀로 다중 분류 수행하기"></a>로지스틱 회귀로 다중 분류 수행하기</h1><ul><li>LogisticRegression 클래스는 기본적으로 반복적인 알고리즘을 사용합니다. max_iter 매개변수에서 반복 횟수를 지정하며 기본값은 100입니다. 여기에 준비한 데이터셋을 사용해 모델을 훈련하면 반복 횟수가 부족하다는 경고가 발생합니다. 충분하게 훈련시키기 위해 반복 횟수를 1,000으로 늘리겠습니다.</li><li>기본적으로 릿지 회귀와 같이 계수의 제곱을 규제합니다. 이런 규제를 L2 규제라고도 부릅니다. 릿지 회귀에서는 alpha 매개변수로 규제의 양을 조절했습니다. alpha가 커지면 규제도 커집니다. LogisticRegression에서 규제를 제어하는 매개변수는 C입니다. 하지만 C는 alpha와 반대로 작을수록 규제가 커집니다. C의 기본값은 1입니다. 여기에서는 규제를 완화하기 위해 20으로 늘리겠습니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lr = LogisticRegression(C = <span class="number">20</span>, max_iter = <span class="number">1000</span>)</span><br><span class="line">lr.fit(train_scaled, train_target)</span><br><span class="line"><span class="built_in">print</span>(lr.score(train_scaled, train_target))</span><br><span class="line"><span class="built_in">print</span>(lr.score(test_scaled, test_target))</span><br></pre></td></tr></table></figure><pre><code>0.93277310924369750.925</code></pre><ul><li>과대적합 및 과소적합으로 치우치지 않았기 때문에 처음 5개의 샘플에 대한 예측을 출력.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(lr.predict(test_scaled[:<span class="number">5</span>]))</span><br></pre></td></tr></table></figure><pre><code>[&#39;Perch&#39; &#39;Smelt&#39; &#39;Pike&#39; &#39;Roach&#39; &#39;Perch&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proba = lr.predict_proba(test_scaled[:<span class="number">5</span>]) <span class="comment"># 예측 확률 출력</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">round</span>(proba, decimals = <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>[[0.    0.014 0.841 0.    0.136 0.007 0.003] [0.    0.003 0.044 0.    0.007 0.946 0.   ] [0.    0.    0.034 0.935 0.015 0.016 0.   ] [0.011 0.034 0.306 0.007 0.567 0.    0.076] [0.    0.    0.904 0.002 0.089 0.002 0.001]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(lr.classes_)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Bream&#39; &#39;Parkki&#39; &#39;Perch&#39; &#39;Pike&#39; &#39;Roach&#39; &#39;Smelt&#39; &#39;Whitefish&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(lr.coef_.shape, lr.intercept_.shape)</span><br></pre></td></tr></table></figure><pre><code>(7, 5) (7,)</code></pre><ul><li>이진 분류에서는 시그모이드 함수를 사용해 z를 0과 1사이의 값으로 변환했습니다. 다중 분류는 이와 달리 <strong>소프트맥스(softmax)</strong> 함수를 사용하여 7개의 z값을 확률로 변환합니다.<ul><li>소프트맥스 함수란 : 여러 개의 선형 방정식의 출력값을 0~1 사이로 압축하고 전체 합이 1이 되도록 만듭니다. 이를 위해 지수 함수를 사용하기 때문에 정규화된 지수 함수라고도 부릅니다.</li><li><a href="https://gooopy.tistory.com/53">소프트맥스 티스토리 링크</a></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decision_function() method로 z1~z7까지의 값을 구함</span></span><br><span class="line">decision = lr.decision_function(test_scaled[:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">round</span>(decision, decimals = <span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>[[ -6.5    1.03   5.16  -2.73   3.34   0.33  -0.63] [-10.86   1.93   4.77  -2.4    2.98   7.84  -4.26] [ -4.34  -6.23   3.17   6.49   2.36   2.42  -3.87] [ -0.68   0.45   2.65  -1.19   3.26  -5.75   1.26] [ -6.4   -1.99   5.82  -0.11   3.5   -0.11  -0.71]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 소프트 맥스 함수를 사용해 확률로 바꿈</span></span><br><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> softmax</span><br><span class="line">proba = softmax(decision, axis = <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">round</span>(proba, decimals = <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>[[0.    0.014 0.841 0.    0.136 0.007 0.003] [0.    0.003 0.044 0.    0.007 0.946 0.   ] [0.    0.    0.034 0.935 0.015 0.016 0.   ] [0.011 0.034 0.306 0.007 0.567 0.    0.076] [0.    0.    0.904 0.002 0.089 0.002 0.001]]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;데이터-불러오기&quot;&gt;&lt;a href=&quot;#데이터-불러오기&quot; class=&quot;headerlink&quot; title=&quot;데이터 불러오기&quot;&gt;&lt;/a&gt;데이터 불러오기&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;컬럼 설명 177p 그림&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>마켓과 머신러닝(Chapter_3_1)</title>
    <link href="https://ahnduhong.github.io/2022/03/28/Chapter_3_1/"/>
    <id>https://ahnduhong.github.io/2022/03/28/Chapter_3_1/</id>
    <published>2022-03-28T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-준비"><a href="#데이터-준비" class="headerlink" title="데이터 준비"></a>데이터 준비</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">perch_length = np.array(</span><br><span class="line">    [<span class="number">8.4</span>, <span class="number">13.7</span>, <span class="number">15.0</span>, <span class="number">16.2</span>, <span class="number">17.4</span>, <span class="number">18.0</span>, <span class="number">18.7</span>, <span class="number">19.0</span>, <span class="number">19.6</span>, <span class="number">20.0</span>, </span><br><span class="line">     <span class="number">21.0</span>, <span class="number">21.0</span>, <span class="number">21.0</span>, <span class="number">21.3</span>, <span class="number">22.0</span>, <span class="number">22.0</span>, <span class="number">22.0</span>, <span class="number">22.0</span>, <span class="number">22.0</span>, <span class="number">22.5</span>, </span><br><span class="line">     <span class="number">22.5</span>, <span class="number">22.7</span>, <span class="number">23.0</span>, <span class="number">23.5</span>, <span class="number">24.0</span>, <span class="number">24.0</span>, <span class="number">24.6</span>, <span class="number">25.0</span>, <span class="number">25.6</span>, <span class="number">26.5</span>, </span><br><span class="line">     <span class="number">27.3</span>, <span class="number">27.5</span>, <span class="number">27.5</span>, <span class="number">27.5</span>, <span class="number">28.0</span>, <span class="number">28.7</span>, <span class="number">30.0</span>, <span class="number">32.8</span>, <span class="number">34.5</span>, <span class="number">35.0</span>, </span><br><span class="line">     <span class="number">36.5</span>, <span class="number">36.0</span>, <span class="number">37.0</span>, <span class="number">37.0</span>, <span class="number">39.0</span>, <span class="number">39.0</span>, <span class="number">39.0</span>, <span class="number">40.0</span>, <span class="number">40.0</span>, <span class="number">40.0</span>, </span><br><span class="line">     <span class="number">40.0</span>, <span class="number">42.0</span>, <span class="number">43.0</span>, <span class="number">43.0</span>, <span class="number">43.5</span>, <span class="number">44.0</span>]</span><br><span class="line">     )</span><br><span class="line">perch_weight = np.array(</span><br><span class="line">    [<span class="number">5.9</span>, <span class="number">32.0</span>, <span class="number">40.0</span>, <span class="number">51.5</span>, <span class="number">70.0</span>, <span class="number">100.0</span>, <span class="number">78.0</span>, <span class="number">80.0</span>, <span class="number">85.0</span>, <span class="number">85.0</span>, </span><br><span class="line">     <span class="number">110.0</span>, <span class="number">115.0</span>, <span class="number">125.0</span>, <span class="number">130.0</span>, <span class="number">120.0</span>, <span class="number">120.0</span>, <span class="number">130.0</span>, <span class="number">135.0</span>, <span class="number">110.0</span>, </span><br><span class="line">     <span class="number">130.0</span>, <span class="number">150.0</span>, <span class="number">145.0</span>, <span class="number">150.0</span>, <span class="number">170.0</span>, <span class="number">225.0</span>, <span class="number">145.0</span>, <span class="number">188.0</span>, <span class="number">180.0</span>, </span><br><span class="line">     <span class="number">197.0</span>, <span class="number">218.0</span>, <span class="number">300.0</span>, <span class="number">260.0</span>, <span class="number">265.0</span>, <span class="number">250.0</span>, <span class="number">250.0</span>, <span class="number">300.0</span>, <span class="number">320.0</span>, </span><br><span class="line">     <span class="number">514.0</span>, <span class="number">556.0</span>, <span class="number">840.0</span>, <span class="number">685.0</span>, <span class="number">700.0</span>, <span class="number">700.0</span>, <span class="number">690.0</span>, <span class="number">900.0</span>, <span class="number">650.0</span>, </span><br><span class="line">     <span class="number">820.0</span>, <span class="number">850.0</span>, <span class="number">900.0</span>, <span class="number">1015.0</span>, <span class="number">820.0</span>, <span class="number">1100.0</span>, <span class="number">1000.0</span>, <span class="number">1100.0</span>, </span><br><span class="line">     <span class="number">1000.0</span>, <span class="number">1000.0</span>]</span><br><span class="line">     )</span><br></pre></td></tr></table></figure><h1 id="K-최근접-이웃-회귀-Regression"><a href="#K-최근접-이웃-회귀-Regression" class="headerlink" title="K - 최근접 이웃 회귀(Regression)"></a>K - 최근접 이웃 회귀(Regression)</h1><ul><li>중요도 : 下 (이런 알고리즘이 있다 정도)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 객체 지향으로 변경</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">plt.scatter(perch_length, perch_weight)</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;length&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;weight&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_3_1/output_3_0.png" alt="png"></p><h1 id="훈련데이터-테스트데이터셋-분리"><a href="#훈련데이터-테스트데이터셋-분리" class="headerlink" title="훈련데이터 테스트데이터셋 분리"></a>훈련데이터 테스트데이터셋 분리</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">train_input, test_input, train_target, test_target = train_test_split(</span><br><span class="line">    perch_length, perch_weight, random_state = <span class="number">42</span></span><br><span class="line">)</span><br><span class="line">train_input.shape, test_input.shape, train_target.shape, test_target.shape</span><br></pre></td></tr></table></figure><pre><code>((42,), (14,), (42,), (14,))</code></pre><ul><li>reshape() 사용하여 2차원 배열로 바꿈</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_input = train_input.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">test_input = test_input.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(train_input.shape, test_input.shape)</span><br></pre></td></tr></table></figure><pre><code>(42, 1) (14, 1)</code></pre><h1 id="결정계수"><a href="#결정계수" class="headerlink" title="결정계수"></a>결정계수</h1><ul><li>모델이 얼마만큼 정확한지?</li><li>절대값은 아님 &#x2F; 상대적인 값</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br><span class="line"></span><br><span class="line"><span class="comment"># knr 클래스 부러오기</span></span><br><span class="line">knr = KNeighborsRegressor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모형 학습</span></span><br><span class="line">knr.fit(train_input, train_target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 테스트 점수 확인</span></span><br><span class="line">knr.score(test_input, test_target)</span><br></pre></td></tr></table></figure><pre><code>0.992809406101064</code></pre><h1 id="MAE"><a href="#MAE" class="headerlink" title="MAE"></a>MAE</h1><ul><li>타깃과 예측의 절댓값 오치를 평균하여 반환</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sklearn.metrics는 패키지 아래 여러 가지 측정 도구를 제공</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error </span><br><span class="line"></span><br><span class="line"><span class="comment"># 예측 데이터 만들기</span></span><br><span class="line">test_prediction = knr.predict(test_input)</span><br><span class="line">test_prediction</span><br></pre></td></tr></table></figure><pre><code>array([  60. ,   79.6,  248. ,  122. ,  136. ,  847. ,  311.4,  183.4,        847. ,  113. , 1010. ,   60. ,  248. ,  248. ])</code></pre><ul><li>mae를 구한다</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mean_absolute_error는 타깃과 예측의 절댓값 오차를 평균하여 반환</span></span><br><span class="line">mae = mean_absolute_error(test_target, test_prediction)</span><br><span class="line"><span class="built_in">print</span>(mae)</span><br></pre></td></tr></table></figure><pre><code>19.157142857142862</code></pre><ul><li>평균적으로 19g정도 다르다.</li></ul><h1 id="과대적합-vs-과소적합"><a href="#과대적합-vs-과소적합" class="headerlink" title="과대적합 vs 과소적합"></a>과대적합 vs 과소적합</h1><ul><li>공통점은 머신러닝 모형이 실제 테스트 시 잘 예측을 못함</li><li>과대 적합: 훈련데이터에는 예측 잘함 &#x2F; 테스트데이터에서는 예측을 잘 못함<ul><li>처리하기 곤란</li></ul></li><li>과소 적합: 훈련데이터에는 예측 못함 &#x2F; 테스트데이터에서는 예측을 잘 함 or 둘 다 예측을 잘 못함</li></ul><hr><ul><li>0.97 정도나옴</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 훈련 데이터 점수 확인</span></span><br><span class="line">knr.score(train_input, train_target)</span><br></pre></td></tr></table></figure><pre><code>0.9698823289099254</code></pre><ul><li>훈련데이터로 검증 0.98</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default 5를 3으로 변경</span></span><br><span class="line"><span class="comment"># 머신러닝 모형을 살짝 변경</span></span><br><span class="line">knr.n_neighbors = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 모델을 다시 훈련</span></span><br><span class="line">knr.fit(train_input, train_target)</span><br><span class="line"><span class="built_in">print</span>(knr.score(train_input, train_target))</span><br></pre></td></tr></table></figure><pre><code>0.9804899950518966</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(knr.score(test_input, test_target))</span><br></pre></td></tr></table></figure><pre><code>0.9746459963987609</code></pre><ul><li><p>MAE 구하기</p></li><li><p>평균적으로 35.4g 다름</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 예측 데이터 만들기</span></span><br><span class="line">test_prediction = knr.predict(test_input)</span><br><span class="line">mae = mean_absolute_error(test_target, test_prediction)</span><br><span class="line"><span class="built_in">print</span>(mae)</span><br></pre></td></tr></table></figure><pre><code>35.42380952380951</code></pre><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><ul><li>k 그룹을 5로 했을 때, R2 점수는 0.98, MAE는 19 였음</li><li>k 그룹을 3으로 했을 때, R2 점수는 0.97, MAE는 35 였음</li><li>k 그룹을 7로 했을 때, R2 점수는 0.97, MAE는 32였음</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;데이터-준비&quot;&gt;&lt;a href=&quot;#데이터-준비&quot; class=&quot;headerlink&quot; title=&quot;데이터 준비&quot;&gt;&lt;/a&gt;데이터 준비&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>마켓과 머신러닝(Chapter_3_2)</title>
    <link href="https://ahnduhong.github.io/2022/03/28/Chapter_3_2/"/>
    <id>https://ahnduhong.github.io/2022/03/28/Chapter_3_2/</id>
    <published>2022-03-28T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.895Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">perch_length = np.array(</span><br><span class="line">    [<span class="number">8.4</span>, <span class="number">13.7</span>, <span class="number">15.0</span>, <span class="number">16.2</span>, <span class="number">17.4</span>, <span class="number">18.0</span>, <span class="number">18.7</span>, <span class="number">19.0</span>, <span class="number">19.6</span>, <span class="number">20.0</span>, </span><br><span class="line">     <span class="number">21.0</span>, <span class="number">21.0</span>, <span class="number">21.0</span>, <span class="number">21.3</span>, <span class="number">22.0</span>, <span class="number">22.0</span>, <span class="number">22.0</span>, <span class="number">22.0</span>, <span class="number">22.0</span>, <span class="number">22.5</span>, </span><br><span class="line">     <span class="number">22.5</span>, <span class="number">22.7</span>, <span class="number">23.0</span>, <span class="number">23.5</span>, <span class="number">24.0</span>, <span class="number">24.0</span>, <span class="number">24.6</span>, <span class="number">25.0</span>, <span class="number">25.6</span>, <span class="number">26.5</span>, </span><br><span class="line">     <span class="number">27.3</span>, <span class="number">27.5</span>, <span class="number">27.5</span>, <span class="number">27.5</span>, <span class="number">28.0</span>, <span class="number">28.7</span>, <span class="number">30.0</span>, <span class="number">32.8</span>, <span class="number">34.5</span>, <span class="number">35.0</span>, </span><br><span class="line">     <span class="number">36.5</span>, <span class="number">36.0</span>, <span class="number">37.0</span>, <span class="number">37.0</span>, <span class="number">39.0</span>, <span class="number">39.0</span>, <span class="number">39.0</span>, <span class="number">40.0</span>, <span class="number">40.0</span>, <span class="number">40.0</span>, </span><br><span class="line">     <span class="number">40.0</span>, <span class="number">42.0</span>, <span class="number">43.0</span>, <span class="number">43.0</span>, <span class="number">43.5</span>, <span class="number">44.0</span>]</span><br><span class="line">     )</span><br><span class="line">perch_weight = np.array(</span><br><span class="line">    [<span class="number">5.9</span>, <span class="number">32.0</span>, <span class="number">40.0</span>, <span class="number">51.5</span>, <span class="number">70.0</span>, <span class="number">100.0</span>, <span class="number">78.0</span>, <span class="number">80.0</span>, <span class="number">85.0</span>, <span class="number">85.0</span>, </span><br><span class="line">     <span class="number">110.0</span>, <span class="number">115.0</span>, <span class="number">125.0</span>, <span class="number">130.0</span>, <span class="number">120.0</span>, <span class="number">120.0</span>, <span class="number">130.0</span>, <span class="number">135.0</span>, <span class="number">110.0</span>, </span><br><span class="line">     <span class="number">130.0</span>, <span class="number">150.0</span>, <span class="number">145.0</span>, <span class="number">150.0</span>, <span class="number">170.0</span>, <span class="number">225.0</span>, <span class="number">145.0</span>, <span class="number">188.0</span>, <span class="number">180.0</span>, </span><br><span class="line">     <span class="number">197.0</span>, <span class="number">218.0</span>, <span class="number">300.0</span>, <span class="number">260.0</span>, <span class="number">265.0</span>, <span class="number">250.0</span>, <span class="number">250.0</span>, <span class="number">300.0</span>, <span class="number">320.0</span>, </span><br><span class="line">     <span class="number">514.0</span>, <span class="number">556.0</span>, <span class="number">840.0</span>, <span class="number">685.0</span>, <span class="number">700.0</span>, <span class="number">700.0</span>, <span class="number">690.0</span>, <span class="number">900.0</span>, <span class="number">650.0</span>, </span><br><span class="line">     <span class="number">820.0</span>, <span class="number">850.0</span>, <span class="number">900.0</span>, <span class="number">1015.0</span>, <span class="number">820.0</span>, <span class="number">1100.0</span>, <span class="number">1000.0</span>, <span class="number">1100.0</span>, </span><br><span class="line">     <span class="number">1000.0</span>, <span class="number">1000.0</span>]</span><br><span class="line">     )</span><br></pre></td></tr></table></figure><h1 id="훈련-세트와-테스트-세트-분리"><a href="#훈련-세트와-테스트-세트-분리" class="headerlink" title="훈련 세트와 테스트 세트 분리"></a>훈련 세트와 테스트 세트 분리</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">train_input, test_input, train_target, test_target = train_test_split(</span><br><span class="line">    perch_length, perch_weight, random_state = <span class="number">42</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">train_input.shape, test_input.shape, train_target.shape, test_target.shape</span><br></pre></td></tr></table></figure><pre><code>((42,), (14,), (42,), (14,))</code></pre><ul><li><p>reshape(-1)은 무슨 의미인가?</p><ul><li>x.reshape(-1)은 x.reshape(1, -1)과 같이 1차원 배열을 반환합니다.</li><li>x.reshape(-1, 1) &#x3D;&gt; shape(12, 1)</li><li>x.reshape(-1, 2) &#x3D;&gt; shape(6, 2)</li><li>x.reshape(-1, 3) &#x3D;&gt; shape(4, 3)</li></ul><p>++++ 출처: <a href="https://rfriend.tistory.com/345">https://rfriend.tistory.com/345</a> [R, Python 분석과 프로그래밍의 친구 (by R Friend)]</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_input = train_input.reshape(-<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># 행렬 재배치</span></span><br><span class="line">test_input = test_input.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(train_input.shape, test_input.shape)</span><br></pre></td></tr></table></figure><pre><code>(42, 1) (14, 1)</code></pre><h1 id="모델-만들기"><a href="#모델-만들기" class="headerlink" title="모델 만들기"></a>모델 만들기</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br><span class="line"></span><br><span class="line"><span class="comment"># knn 클래스 부러오기</span></span><br><span class="line">knr = KNeighborsRegressor(n_neighbors=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모형 학습</span></span><br><span class="line">knr.fit(train_input, train_target)</span><br></pre></td></tr></table></figure><pre><code>KNeighborsRegressor(n_neighbors=3)</code></pre><h1 id="예측"><a href="#예측" class="headerlink" title="예측"></a>예측</h1><ul><li>p132</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(knr.predict([[<span class="number">50</span>]]))</span><br></pre></td></tr></table></figure><pre><code>[1033.33333333]</code></pre><h1 id="시각화"><a href="#시각화" class="headerlink" title="시각화"></a>시각화</h1><ul><li>객체 지향으로 변경 <a href="https://hwi-doc.tistory.com/entry/matplotlib-%EC%99%84%EB%B2%BD-%EC%A0%95%EB%A6%AC">fig, ax 참고사이트</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 50cm 농어의 이웃을 구하라</span></span><br><span class="line">distances, indexes = knr.kneighbors([[<span class="number">50</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 훈련 세트의 산점도를 구하라</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">5</span>), facecolor=<span class="string">&quot;#c1f1f1&quot;</span>)</span><br><span class="line">plt.scatter(train_input, train_target)</span><br><span class="line">plt.scatter(train_input[indexes], train_target[indexes], marker=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">plt.scatter(<span class="number">50</span>, <span class="number">1033</span>, marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;length&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_3_2/output_10_0.png" alt="png"></p><ul><li>머신러닝 모델은 주기적으로 훈련해야 합니다.<ul><li>MLOps (Machine Learning &amp; Operations)</li><li>최근에 각광받는 데이터 관련 직업 필수 스킬!</li><li>입사와 함꼐 공부시작 (데이터 분석가, 머신러닝 엔지니어, 데이터 싸이언티스트 희망자)</li></ul></li></ul><h1 id="선형-회귀-머신러닝"><a href="#선형-회귀-머신러닝" class="headerlink" title="선형 회귀 (머신러닝)"></a>선형 회귀 (머신러닝)</h1><ul><li>평가지표 확인이 더 중요! R2 점수, MAE, MSE</li><li>5가지 가정들…</li><li>잔차의 정규성</li><li>등분산성, 다중공선성, etc..</li><li>종속변수 ~ 독립변수간의 “인과관계”를 찾는 과정..</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> LinearLocator</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 선형 회귀 모델 훈련</span></span><br><span class="line">lr.fit(train_input, train_target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 50cm 농어 예측</span></span><br><span class="line"><span class="built_in">print</span>(lr.predict([[<span class="number">200</span>]]))</span><br></pre></td></tr></table></figure><pre><code>[7094.41034777]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">5</span>), facecolor=<span class="string">&quot;#c1f1f1&quot;</span>)</span><br><span class="line">plt.scatter(train_input, train_target)</span><br><span class="line">plt.scatter(train_input[indexes], train_target[indexes], marker=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">plt.scatter(<span class="number">50</span>, <span class="number">1033</span>, marker=<span class="string">&#x27;^&#x27;</span>) <span class="comment"># 임의의 데이터 생성</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;length&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_3_2/output_14_0.png" alt="png"></p><h1 id="회귀식을-찾기"><a href="#회귀식을-찾기" class="headerlink" title="회귀식을 찾기"></a>회귀식을 찾기</h1><ul><li>하나의 직선을 그리려면 기울기와 절편이 있어야합니다.</li><li>농어의 무게 &#x3D; 기울기 x 농어 길이 + 절편</li><li>y &#x3D; a * x + b</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 기울기, 상수</span></span><br><span class="line"><span class="built_in">print</span>(lr.coef_, lr.intercept_)</span><br></pre></td></tr></table></figure><pre><code>[39.01714496] -709.0186449535477</code></pre><ul><li><strong>기울기</strong> : 계수 &#x3D; 가중치(딥러닝, 기울기)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">5</span>), facecolor=<span class="string">&quot;#c1f1f1&quot;</span>)</span><br><span class="line">plt.scatter(train_input, train_target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 15~50까지의 1차 방정식 그래프를 그린다.</span></span><br><span class="line">plt.plot([<span class="number">15</span>,<span class="number">50</span>],</span><br><span class="line">         [<span class="number">15</span> * lr.coef_ + lr.intercept_,</span><br><span class="line">          <span class="number">50</span> * lr.coef_ + lr.intercept_])</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;length&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">plt.scatter(<span class="number">50</span>, <span class="number">1241.8</span>, marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Chapter_3_2/output_19_0.png" alt="png"></p><ul><li>모형 평가 (p.138)<ul><li>과소적합이 됨</li></ul></li></ul><h1 id="다항회귀의-필요성"><a href="#다항회귀의-필요성" class="headerlink" title="다항회귀의 필요성"></a>다항회귀의 필요성</h1><ul><li>치어를 생각해보자</li><li>치어가 1cm</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(lr.predict([[<span class="number">1</span>]]))</span><br></pre></td></tr></table></figure><pre><code>[-670.00149999]</code></pre><ul><li>(p. 140) 1차방정식을 2차방정식으로 만드는 과정이 나옴</li><li>넘파이 브로드캐스팅 <a href="https://sacko.tistory.com/16">링크 텍스트</a><ul><li>배열의 크기가 동일하면 상관 없음</li><li>배열의 크기가 다른데, 연산을 할때, 브로드캐스팅 원리가 적용</li><li>브로드캐스팅 튜토리얼 등을 찾아서 추가적으로 공부를 해야함</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_poly = np.column_stack((train_input ** <span class="number">2</span>, train_input))</span><br><span class="line">test_poly = np.column_stack((test_input ** <span class="number">2</span>, test_input))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(train_poly.shape, test_poly.shape)</span><br></pre></td></tr></table></figure><pre><code>(42, 2) (14, 2)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lr = LinearRegression()</span><br><span class="line"></span><br><span class="line">lr.fit(train_poly, train_target)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lr.predict([[<span class="number">50</span> ** <span class="number">2</span>, <span class="number">50</span>]]))</span><br></pre></td></tr></table></figure><pre><code>[1573.98423528]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(lr.coef_, lr.intercept_) <span class="comment"># y = ax2 + bx + c 이차방적식, x = &quot;length&quot;</span></span><br></pre></td></tr></table></figure><pre><code>[  1.01433211 -21.55792498] 116.0502107827827</code></pre><ul><li>KNN의 문제점<ul><li>농어의 길이가 커져도 무게는 동일함 (현실성 제로)</li></ul></li><li>단순 선형회귀(1차 방정식)의 문제점<ul><li>치어(1cm)의 무게가 음수로 나옴 (현실성 제로)</li></ul></li><li>다항 회귀(2차 방정식)로 변경<ul><li>현실성 있음</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>마켓과 머신러닝(Chapter_1_3)</title>
    <link href="https://ahnduhong.github.io/2022/03/27/Bream_and_smelt/"/>
    <id>https://ahnduhong.github.io/2022/03/27/Bream_and_smelt/</id>
    <published>2022-03-27T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="생선-분류-문제"><a href="#생선-분류-문제" class="headerlink" title="생선 분류 문제"></a>생선 분류 문제</h2><ul><li><p><strong>이 문제는 박혜선 저자의 혼자 공부하는 머신러닝 + 딥러닝 교제를 보며 코드를 실습한 것입니다.</strong> <a href="http://www.yes24.com/Product/Goods/96024871?pid=123487&cosemkid=go16076704483929369&gclid=CjwKCAjwloCSBhAeEiwA3hVo_e1TTfHy8wSA0nWEdMCaIuy2KZSBkNAD46EydYyNex1BxI_lEHok-RoCAgYQAvD_BwE">링크 텍스트</a></p></li><li><p>도미의 특성(feature) ..데이터의 특징</p></li><li><p>산점도 그리기(matplotlib)</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bream_length = [<span class="number">25.4</span>, <span class="number">26.3</span>, <span class="number">26.5</span>, <span class="number">29.0</span>, <span class="number">29.0</span>, <span class="number">29.7</span>, <span class="number">29.7</span>, <span class="number">30.0</span>, <span class="number">30.0</span>, <span class="number">30.7</span>, <span class="number">31.0</span>, <span class="number">31.0</span>, </span><br><span class="line">                <span class="number">31.5</span>, <span class="number">32.0</span>, <span class="number">32.0</span>, <span class="number">32.0</span>, <span class="number">33.0</span>, <span class="number">33.0</span>, <span class="number">33.5</span>, <span class="number">33.5</span>, <span class="number">34.0</span>, <span class="number">34.0</span>, <span class="number">34.5</span>, <span class="number">35.0</span>, </span><br><span class="line">                <span class="number">35.0</span>, <span class="number">35.0</span>, <span class="number">35.0</span>, <span class="number">36.0</span>, <span class="number">36.0</span>, <span class="number">37.0</span>, <span class="number">38.5</span>, <span class="number">38.5</span>, <span class="number">39.5</span>, <span class="number">41.0</span>, <span class="number">41.0</span>]</span><br><span class="line">bream_weight = [<span class="number">242.0</span>, <span class="number">290.0</span>, <span class="number">340.0</span>, <span class="number">363.0</span>, <span class="number">430.0</span>, <span class="number">450.0</span>, <span class="number">500.0</span>, <span class="number">390.0</span>, <span class="number">450.0</span>, <span class="number">500.0</span>, <span class="number">475.0</span>, <span class="number">500.0</span>, </span><br><span class="line">                <span class="number">500.0</span>, <span class="number">340.0</span>, <span class="number">600.0</span>, <span class="number">600.0</span>, <span class="number">700.0</span>, <span class="number">700.0</span>, <span class="number">610.0</span>, <span class="number">650.0</span>, <span class="number">575.0</span>, <span class="number">685.0</span>, <span class="number">620.0</span>, <span class="number">680.0</span>, </span><br><span class="line">                <span class="number">700.0</span>, <span class="number">725.0</span>, <span class="number">720.0</span>, <span class="number">714.0</span>, <span class="number">850.0</span>, <span class="number">1000.0</span>, <span class="number">920.0</span>, <span class="number">955.0</span>, <span class="number">925.0</span>, <span class="number">975.0</span>, <span class="number">950.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.scatter(bream_length, bream_weight)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;length&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Bream_and_smelt/output_2_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">smelt_length = [<span class="number">9.8</span>, <span class="number">10.5</span>, <span class="number">10.6</span>, <span class="number">11.0</span>, <span class="number">11.2</span>, <span class="number">11.3</span>, <span class="number">11.8</span>, <span class="number">11.8</span>, <span class="number">12.0</span>, <span class="number">12.2</span>, <span class="number">12.4</span>, <span class="number">13.0</span>, <span class="number">14.3</span>, <span class="number">15.0</span>]</span><br><span class="line">smelt_weight = [<span class="number">6.7</span>, <span class="number">7.5</span>, <span class="number">7.0</span>, <span class="number">9.7</span>, <span class="number">9.8</span>, <span class="number">8.7</span>, <span class="number">10.0</span>, <span class="number">9.9</span>, <span class="number">9.8</span>, <span class="number">12.2</span>, <span class="number">13.4</span>, <span class="number">12.2</span>, <span class="number">19.7</span>, <span class="number">19.9</span>]</span><br><span class="line"></span><br><span class="line">plt.scatter(bream_length, bream_weight)</span><br><span class="line">plt.scatter(smelt_length, smelt_weight)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;length&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Bream_and_smelt/output_3_0.png" alt="png"></p><h2 id="첫번째-머신러닝-프로그램"><a href="#첫번째-머신러닝-프로그램" class="headerlink" title="첫번째 머신러닝 프로그램"></a>첫번째 머신러닝 프로그램</h2><ul><li>두개의 데이터 합치기</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">length = bream_length + smelt_length</span><br><span class="line">weight = bream_weight + smelt_weight</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fish_data = [[l, w] <span class="keyword">for</span> l, w <span class="keyword">in</span> <span class="built_in">zip</span>(length, weight)] <span class="comment"># zip() 함수는 나열된 리스트 각각에서 하나씩 원소를 꺼내 반환.</span></span><br><span class="line"><span class="built_in">print</span>(fish_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(fish_data))</span><br></pre></td></tr></table></figure><pre><code>[[25.4, 242.0], [26.3, 290.0], [26.5, 340.0], [29.0, 363.0], [29.0, 430.0], [29.7, 450.0], [29.7, 500.0], [30.0, 390.0], [30.0, 450.0], [30.7, 500.0], [31.0, 475.0], [31.0, 500.0], [31.5, 500.0], [32.0, 340.0], [32.0, 600.0], [32.0, 600.0], [33.0, 700.0], [33.0, 700.0], [33.5, 610.0], [33.5, 650.0], [34.0, 575.0], [34.0, 685.0], [34.5, 620.0], [35.0, 680.0], [35.0, 700.0], [35.0, 725.0], [35.0, 720.0], [36.0, 714.0], [36.0, 850.0], [37.0, 1000.0], [38.5, 920.0], [38.5, 955.0], [39.5, 925.0], [41.0, 975.0], [41.0, 950.0], [9.8, 6.7], [10.5, 7.5], [10.6, 7.0], [11.0, 9.7], [11.2, 9.8], [11.3, 8.7], [11.8, 10.0], [11.8, 9.9], [12.0, 9.8], [12.2, 12.2], [12.4, 13.4], [13.0, 12.2], [14.3, 19.7], [15.0, 19.9]]&lt;class &#39;list&#39;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fish_target =  [<span class="number">1</span>] * <span class="number">35</span> + [<span class="number">0</span>] * <span class="number">14</span> <span class="comment"># 도미와 빙어를 구분</span></span><br><span class="line"><span class="built_in">print</span>(fish_target)</span><br></pre></td></tr></table></figure><pre><code>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</code></pre><h2 id="KNeighborsClassifier"><a href="#KNeighborsClassifier" class="headerlink" title="KNeighborsClassifier()"></a>KNeighborsClassifier()</h2><ul><li>가장 가까운 이웃을 참고하여 정답을 예측하는 사이킷런(scikit-learn)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kn = KNeighborsClassifier()</span><br></pre></td></tr></table></figure><h2 id="훈련-training"><a href="#훈련-training" class="headerlink" title="훈련 (training)"></a>훈련 (training)</h2><ul><li><p>도미를 찾기 위한 기준을 학습</p></li><li><p>사이킷런 fit()</p><ul><li>scikit_learn Training method</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kn.fit(fish_data, fish_target) <span class="comment"># 학습</span></span><br></pre></td></tr></table></figure><pre><code>KNeighborsClassifier()</code></pre><ul><li>사이킷런 score()<ul><li>scikit_learn Evaluating method</li><li>0 과 1사이의 값을 반환</li><li>1은 모든 데이터의 값을 맞춘것이고 0.5는 절반만 맞춤</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kn.score(fish_data, fish_target) <span class="comment"># 정확도 평가 (0 ~ 1.0)</span></span><br></pre></td></tr></table></figure><pre><code>1.0</code></pre><h2 id="K-최근접-알고리즘"><a href="#K-최근접-알고리즘" class="headerlink" title="K - 최근접 알고리즘"></a>K - 최근접 알고리즘</h2><ul><li>어떤 데이터에 대한 답을 구할 때 주위의 다른 데이터를 보고 다수를 차지하는것을 정답으로 사용함.</li><li>데이터가 아주 많은 경우 사용하기 어려움.<ul><li>데이터가 크면 메모리가 많이 필요하고 직선거리를 계산하는 데도 많은 시간이 필요하기 때문</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># predict method는 새로운 데이터의 정답을 예측</span></span><br><span class="line"><span class="comment"># fit() method와 마찬가지로 리스트의 리스트를 전달해야 하기때문에 삼각형 포인트를 리스트로 2번 감쌈</span></span><br><span class="line">kn.predict([[<span class="number">30</span>, <span class="number">600</span>]])</span><br></pre></td></tr></table></figure><pre><code>array([1])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(kn._fit_X) <span class="comment"># _fit_X 속성에는 fish_data를 모두 가지고 있음 </span></span><br></pre></td></tr></table></figure><pre><code>[[  25.4  242. ] [  26.3  290. ] [  26.5  340. ] [  29.   363. ] [  29.   430. ] [  29.7  450. ] [  29.7  500. ] [  30.   390. ] [  30.   450. ] [  30.7  500. ] [  31.   475. ] [  31.   500. ] [  31.5  500. ] [  32.   340. ] [  32.   600. ] [  32.   600. ] [  33.   700. ] [  33.   700. ] [  33.5  610. ] [  33.5  650. ] [  34.   575. ] [  34.   685. ] [  34.5  620. ] [  35.   680. ] [  35.   700. ] [  35.   725. ] [  35.   720. ] [  36.   714. ] [  36.   850. ] [  37.  1000. ] [  38.5  920. ] [  38.5  955. ] [  39.5  925. ] [  41.   975. ] [  41.   950. ] [   9.8    6.7] [  10.5    7.5] [  10.6    7. ] [  11.     9.7] [  11.2    9.8] [  11.3    8.7] [  11.8   10. ] [  11.8    9.9] [  12.     9.8] [  12.2   12.2] [  12.4   13.4] [  13.    12.2] [  14.3   19.7] [  15.    19.9]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(kn._y) <span class="comment"># _y속성에 fish_target을 가지고 있음</span></span><br></pre></td></tr></table></figure><pre><code>[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]</code></pre><ul><li>매개변수를 49로 했을때 정확도보다 기본값으로 했을때의 정확도가 높기때문에 kn49가 아닌 kn 모델을 채택</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 기본적으로는 5개의 데이터를 기본값으로 참고, n_neighbors로 매개변수를 바꿀수 있음</span></span><br><span class="line">kn49 = KNeighborsClassifier(n_neighbors=<span class="number">49</span>) <span class="comment"># 참고 데이터를 49개로 한 kn49 모델</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kn49.fit(fish_data, fish_target)</span><br><span class="line">kn49.score(fish_data, fish_target) <span class="comment"># 49개 데이터중 도미가 35개로 다수를 차지하므로 어떤 데이터를 넣어도 무조건 도미로 예측</span></span><br></pre></td></tr></table></figure><pre><code>0.7142857142857143</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">35</span> / <span class="number">49</span>) <span class="comment"># 도미 35개, 빙어 14개 중에서 도미가 차지하는 비율</span></span><br></pre></td></tr></table></figure><pre><code>0.7142857142857143</code></pre><ul><li>확인 문제</li></ul><ol><li><p>데이터를 표현하는 하나의 성질로써, 예를 들어 국가 데이터의 경우 인구수, GDP, 면적 등이 하나의 국가를 나타냅니다. 머신러닝에서 이런 성질을 무엇이라고 부르나요? : 특성</p></li><li><p>가장 가까운 이웃을 참고하여 정답을 예측하는 알고리즘이 구현된 사이킷런 클래스는 무엇인가요? : KNeighborsClassfier</p></li><li><p>사이킷런 모델을 훈련할떄 사용하는 메서드는 어떤 것인가요? : fit()</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;생선-분류-문제&quot;&gt;&lt;a href=&quot;#생선-분류-문제&quot; class=&quot;headerlink&quot; title=&quot;생선 분류 문제&quot;&gt;&lt;/a&gt;생선 분류 문제&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;이 문제는 박혜선 저자의 혼자 공부하는 머신러닝 + </summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>판다스 튜토리얼 2</title>
    <link href="https://ahnduhong.github.io/2022/03/25/pandas_tutorial_02/"/>
    <id>https://ahnduhong.github.io/2022/03/25/pandas_tutorial_02/</id>
    <published>2022-03-25T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="라이브러리-불러오기"><a href="#라이브러리-불러오기" class="headerlink" title="라이브러리 불러오기"></a>라이브러리 불러오기</h1><ul><li>pandas 라이브러리 불러오기, supermarket_sales.csv 파일 불러오기</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> drive</span><br><span class="line">drive.mount(<span class="string">&quot;/content/drive&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Mounted at /content/drive</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DATA_PATH = <span class="string">&quot;/content/drive/MyDrive/Colab Notebooks/data/supermarket_sales.csv&quot;</span></span><br><span class="line">sales = pd.read_csv(DATA_PATH)</span><br><span class="line">sales</span><br></pre></td></tr></table></figure>  <div id="df-5de646d0-967f-4dc5-a51f-d7ef279760fb">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Invoice ID</th>      <th>Branch</th>      <th>City</th>      <th>Customer type</th>      <th>Gender</th>      <th>Product line</th>      <th>Unit price</th>      <th>Quantity</th>      <th>Date</th>      <th>Time</th>      <th>Payment</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>750-67-8428</td>      <td>A</td>      <td>Yangon</td>      <td>Member</td>      <td>Female</td>      <td>Health and beauty</td>      <td>74.69</td>      <td>7</td>      <td>1/5/2019</td>      <td>13:08</td>      <td>Ewallet</td>    </tr>    <tr>      <th>1</th>      <td>226-31-3081</td>      <td>C</td>      <td>Naypyitaw</td>      <td>Normal</td>      <td>Female</td>      <td>Electronic accessories</td>      <td>15.28</td>      <td>5</td>      <td>3/8/2019</td>      <td>10:29</td>      <td>Cash</td>    </tr>    <tr>      <th>2</th>      <td>631-41-3108</td>      <td>A</td>      <td>Yangon</td>      <td>Normal</td>      <td>Male</td>      <td>Home and lifestyle</td>      <td>46.33</td>      <td>7</td>      <td>3/3/2019</td>      <td>13:23</td>      <td>Credit card</td>    </tr>    <tr>      <th>3</th>      <td>123-19-1176</td>      <td>A</td>      <td>Yangon</td>      <td>Member</td>      <td>Male</td>      <td>Health and beauty</td>      <td>58.22</td>      <td>8</td>      <td>1/27/2019</td>      <td>20:33</td>      <td>Ewallet</td>    </tr>    <tr>      <th>4</th>      <td>373-73-7910</td>      <td>A</td>      <td>Yangon</td>      <td>Normal</td>      <td>Male</td>      <td>Sports and travel</td>      <td>86.31</td>      <td>7</td>      <td>2/8/2019</td>      <td>10:37</td>      <td>Ewallet</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>995</th>      <td>233-67-5758</td>      <td>C</td>      <td>Naypyitaw</td>      <td>Normal</td>      <td>Male</td>      <td>Health and beauty</td>      <td>40.35</td>      <td>1</td>      <td>1/29/2019</td>      <td>13:46</td>      <td>Ewallet</td>    </tr>    <tr>      <th>996</th>      <td>303-96-2227</td>      <td>B</td>      <td>Mandalay</td>      <td>Normal</td>      <td>Female</td>      <td>Home and lifestyle</td>      <td>97.38</td>      <td>10</td>      <td>3/2/2019</td>      <td>17:16</td>      <td>Ewallet</td>    </tr>    <tr>      <th>997</th>      <td>727-02-1313</td>      <td>A</td>      <td>Yangon</td>      <td>Member</td>      <td>Male</td>      <td>Food and beverages</td>      <td>31.84</td>      <td>1</td>      <td>2/9/2019</td>      <td>13:22</td>      <td>Cash</td>    </tr>    <tr>      <th>998</th>      <td>347-56-2442</td>      <td>A</td>      <td>Yangon</td>      <td>Normal</td>      <td>Male</td>      <td>Home and lifestyle</td>      <td>65.82</td>      <td>1</td>      <td>2/22/2019</td>      <td>15:33</td>      <td>Cash</td>    </tr>    <tr>      <th>999</th>      <td>849-09-3807</td>      <td>A</td>      <td>Yangon</td>      <td>Member</td>      <td>Female</td>      <td>Fashion accessories</td>      <td>88.34</td>      <td>7</td>      <td>2/18/2019</td>      <td>13:28</td>      <td>Cash</td>    </tr>  </tbody></table><p>1000 rows × 11 columns</p></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-5de646d0-967f-4dc5-a51f-d7ef279760fb')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-5de646d0-967f-4dc5-a51f-d7ef279760fb button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-5de646d0-967f-4dc5-a51f-d7ef279760fb&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sales.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 1000 entries, 0 to 999Data columns (total 11 columns): #   Column         Non-Null Count  Dtype  ---  ------         --------------  -----   0   Invoice ID     1000 non-null   object  1   Branch         1000 non-null   object  2   City           1000 non-null   object  3   Customer type  1000 non-null   object  4   Gender         1000 non-null   object  5   Product line   1000 non-null   object  6   Unit price     1000 non-null   float64 7   Quantity       1000 non-null   int64   8   Date           1000 non-null   object  9   Time           1000 non-null   object  10  Payment        1000 non-null   object dtypes: float64(1), int64(1), object(9)memory usage: 86.1+ KB</code></pre><h2 id="Groupy-by"><a href="#Groupy-by" class="headerlink" title="Groupy by"></a>Groupy by</h2><ul><li>(동의어) 집계함수를 배운다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sales[<span class="string">&#x27;Invoice ID&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure><pre><code>750-67-8428    1642-61-4706    1816-72-8853    1491-38-3499    1322-02-2271    1              ..633-09-3463    1374-17-3652    1378-07-7001    1433-75-6987    1849-09-3807    1Name: Invoice ID, Length: 1000, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sales.groupby(<span class="string">&#x27;Customer type&#x27;</span>)[<span class="string">&#x27;Quantity&#x27;</span>].<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><pre><code>Customer typeMember    2785Normal    2725Name: Quantity, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sales.groupby([<span class="string">&#x27;Customer type&#x27;</span>, <span class="string">&#x27;Branch&#x27;</span>, <span class="string">&#x27;Payment&#x27;</span>])[<span class="string">&#x27;Quantity&#x27;</span>].<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><pre><code>Customer type  Branch  Payment    Member         A       Cash           308                       Credit card    282                       Ewallet        374               B       Cash           284                       Credit card    371                       Ewallet        269               C       Cash           293                       Credit card    349                       Ewallet        255Normal         A       Cash           264                       Credit card    298                       Ewallet        333               B       Cash           344                       Credit card    228                       Ewallet        324               C       Cash           403                       Credit card    194                       Ewallet        337Name: Quantity, dtype: int64</code></pre><p>- </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(sales.groupby([<span class="string">&#x27;Customer type&#x27;</span>, <span class="string">&#x27;Branch&#x27;</span>, <span class="string">&#x27;Payment&#x27;</span>])[<span class="string">&#x27;Quantity&#x27;</span>].<span class="built_in">sum</span>()))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.series.Series&#39;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sales.groupby([<span class="string">&#x27;Customer type&#x27;</span>, <span class="string">&#x27;Branch&#x27;</span>, <span class="string">&#x27;Payment&#x27;</span>], as_index=<span class="literal">False</span>)[<span class="string">&#x27;Quantity&#x27;</span>].agg([<span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;mean&#x27;</span>]).reset_index()</span><br></pre></td></tr></table></figure>  <div id="df-06183b9d-9668-4956-b5b7-bf3ab9256622">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Customer type</th>      <th>Branch</th>      <th>Payment</th>      <th>sum</th>      <th>mean</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Member</td>      <td>A</td>      <td>Cash</td>      <td>308</td>      <td>5.500000</td>    </tr>    <tr>      <th>1</th>      <td>Member</td>      <td>A</td>      <td>Credit card</td>      <td>282</td>      <td>5.755102</td>    </tr>    <tr>      <th>2</th>      <td>Member</td>      <td>A</td>      <td>Ewallet</td>      <td>374</td>      <td>6.032258</td>    </tr>    <tr>      <th>3</th>      <td>Member</td>      <td>B</td>      <td>Cash</td>      <td>284</td>      <td>5.358491</td>    </tr>    <tr>      <th>4</th>      <td>Member</td>      <td>B</td>      <td>Credit card</td>      <td>371</td>      <td>5.888889</td>    </tr>    <tr>      <th>5</th>      <td>Member</td>      <td>B</td>      <td>Ewallet</td>      <td>269</td>      <td>5.489796</td>    </tr>    <tr>      <th>6</th>      <td>Member</td>      <td>C</td>      <td>Cash</td>      <td>293</td>      <td>4.966102</td>    </tr>    <tr>      <th>7</th>      <td>Member</td>      <td>C</td>      <td>Credit card</td>      <td>349</td>      <td>5.816667</td>    </tr>    <tr>      <th>8</th>      <td>Member</td>      <td>C</td>      <td>Ewallet</td>      <td>255</td>      <td>5.100000</td>    </tr>    <tr>      <th>9</th>      <td>Normal</td>      <td>A</td>      <td>Cash</td>      <td>264</td>      <td>4.888889</td>    </tr>    <tr>      <th>10</th>      <td>Normal</td>      <td>A</td>      <td>Credit card</td>      <td>298</td>      <td>5.418182</td>    </tr>    <tr>      <th>11</th>      <td>Normal</td>      <td>A</td>      <td>Ewallet</td>      <td>333</td>      <td>5.203125</td>    </tr>    <tr>      <th>12</th>      <td>Normal</td>      <td>B</td>      <td>Cash</td>      <td>344</td>      <td>6.035088</td>    </tr>    <tr>      <th>13</th>      <td>Normal</td>      <td>B</td>      <td>Credit card</td>      <td>228</td>      <td>4.956522</td>    </tr>    <tr>      <th>14</th>      <td>Normal</td>      <td>B</td>      <td>Ewallet</td>      <td>324</td>      <td>5.062500</td>    </tr>    <tr>      <th>15</th>      <td>Normal</td>      <td>C</td>      <td>Cash</td>      <td>403</td>      <td>6.200000</td>    </tr>    <tr>      <th>16</th>      <td>Normal</td>      <td>C</td>      <td>Credit card</td>      <td>194</td>      <td>5.105263</td>    </tr>    <tr>      <th>17</th>      <td>Normal</td>      <td>C</td>      <td>Ewallet</td>      <td>337</td>      <td>6.017857</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-06183b9d-9668-4956-b5b7-bf3ab9256622')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-06183b9d-9668-4956-b5b7-bf3ab9256622 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-06183b9d-9668-4956-b5b7-bf3ab9256622&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(sales.groupby([<span class="string">&#x27;Customer type&#x27;</span>, <span class="string">&#x27;Branch&#x27;</span>, <span class="string">&#x27;Payment&#x27;</span>])[<span class="string">&#x27;Quantity&#x27;</span>].agg([<span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;mean&#x27;</span>])))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;</code></pre><h2 id="결측치-다루기"><a href="#결측치-다루기" class="headerlink" title="결측치 다루기"></a>결측치 다루기</h2><h3 id="결측치-데이터-생성"><a href="#결측치-데이터-생성" class="headerlink" title="결측치 데이터 생성"></a>결측치 데이터 생성</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">dict_01 = &#123;</span><br><span class="line">    <span class="string">&#x27;Score_A&#x27;</span> : [<span class="number">80</span>, <span class="number">90</span>, np.nan, <span class="number">80</span>], </span><br><span class="line">    <span class="string">&#x27;Score_B&#x27;</span> : [<span class="number">30</span>, <span class="number">45</span>, np.nan, np.nan], </span><br><span class="line">    <span class="string">&#x27;Score_C&#x27;</span> : [np.nan, <span class="number">50</span>, <span class="number">80</span>, <span class="number">90</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(dict_01)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>  <div id="df-19e2d3df-d166-4556-96a3-7e87c689f899">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Score_A</th>      <th>Score_B</th>      <th>Score_C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>80.0</td>      <td>30.0</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>90.0</td>      <td>45.0</td>      <td>50.0</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>NaN</td>      <td>80.0</td>    </tr>    <tr>      <th>3</th>      <td>80.0</td>      <td>NaN</td>      <td>90.0</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-19e2d3df-d166-4556-96a3-7e87c689f899')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-19e2d3df-d166-4556-96a3-7e87c689f899 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-19e2d3df-d166-4556-96a3-7e87c689f899&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><pre><code>Score_A    1Score_B    2Score_C    1dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(<span class="string">&quot;0&quot;</span>)</span><br></pre></td></tr></table></figure>  <div id="df-8fdcaeb0-1a6d-42b3-a659-2ed1ac98f3c4">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Score_A</th>      <th>Score_B</th>      <th>Score_C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>80.0</td>      <td>30.0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>90.0</td>      <td>45.0</td>      <td>50.0</td>    </tr>    <tr>      <th>2</th>      <td>0</td>      <td>0</td>      <td>80.0</td>    </tr>    <tr>      <th>3</th>      <td>80.0</td>      <td>0</td>      <td>90.0</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-8fdcaeb0-1a6d-42b3-a659-2ed1ac98f3c4')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-8fdcaeb0-1a6d-42b3-a659-2ed1ac98f3c4 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-8fdcaeb0-1a6d-42b3-a659-2ed1ac98f3c4&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(method=<span class="string">&quot;pad&quot;</span>)</span><br></pre></td></tr></table></figure>  <div id="df-0beb1959-e8a4-4550-b78e-1da677eaf1f7">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Score_A</th>      <th>Score_B</th>      <th>Score_C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>80.0</td>      <td>30.0</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>90.0</td>      <td>45.0</td>      <td>50.0</td>    </tr>    <tr>      <th>2</th>      <td>90.0</td>      <td>45.0</td>      <td>80.0</td>    </tr>    <tr>      <th>3</th>      <td>80.0</td>      <td>45.0</td>      <td>90.0</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-0beb1959-e8a4-4550-b78e-1da677eaf1f7')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-0beb1959-e8a4-4550-b78e-1da677eaf1f7 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-0beb1959-e8a4-4550-b78e-1da677eaf1f7&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict_01 = &#123;</span><br><span class="line">    <span class="string">&quot;성별&quot;</span> : [<span class="string">&quot;남자&quot;</span>, <span class="string">&quot;여자&quot;</span>, np.nan, <span class="string">&quot;남자&quot;</span>], </span><br><span class="line">    <span class="string">&quot;Salary&quot;</span> : [<span class="number">30</span>, <span class="number">45</span>, <span class="number">90</span>, <span class="number">70</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(dict_01)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>  <div id="df-cd4f0fa9-4594-42f6-b011-ec8d9c313a45">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>성별</th>      <th>Salary</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>남자</td>      <td>30</td>    </tr>    <tr>      <th>1</th>      <td>여자</td>      <td>45</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>90</td>    </tr>    <tr>      <th>3</th>      <td>남자</td>      <td>70</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-cd4f0fa9-4594-42f6-b011-ec8d9c313a45')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-cd4f0fa9-4594-42f6-b011-ec8d9c313a45 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-cd4f0fa9-4594-42f6-b011-ec8d9c313a45&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;성별&#x27;</span>].fillna(<span class="string">&quot;성별 없음&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>0       남자1       여자2    성별 없음3       남자Name: 성별, dtype: object</code></pre><ul><li>결측치</li></ul><p>–&gt; 문자열 타입이랑 &#x2F; 숫자 타입이랑 접근 방법이 다름<br>–&gt; 문자열 (빈도 –&gt; 가장 많이 나타나는 문자열 넣어주기!, 최빈값)<br>–&gt; 숫자열 (평균, 최대, 최소, 중간, 기타 등등..)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">dict_01 = &#123;</span><br><span class="line">    <span class="string">&#x27;Score_A&#x27;</span> : [<span class="number">80</span>, <span class="number">90</span>, np.nan, <span class="number">80</span>], </span><br><span class="line">    <span class="string">&#x27;Score_B&#x27;</span> : [<span class="number">30</span>, <span class="number">45</span>, np.nan, <span class="number">60</span>], </span><br><span class="line">    <span class="string">&#x27;Score_C&#x27;</span> : [np.nan, <span class="number">50</span>, <span class="number">80</span>, <span class="number">90</span>], </span><br><span class="line">    <span class="string">&#x27;Score_D&#x27;</span> : [<span class="number">50</span>, <span class="number">30</span>, <span class="number">80</span>, <span class="number">60</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(dict_01)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>  <div id="df-4285262a-db62-49be-9c8d-273186ab08c4">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Score_A</th>      <th>Score_B</th>      <th>Score_C</th>      <th>Score_D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>80.0</td>      <td>30.0</td>      <td>NaN</td>      <td>50</td>    </tr>    <tr>      <th>1</th>      <td>90.0</td>      <td>45.0</td>      <td>50.0</td>      <td>30</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>NaN</td>      <td>80.0</td>      <td>80</td>    </tr>    <tr>      <th>3</th>      <td>80.0</td>      <td>60.0</td>      <td>90.0</td>      <td>60</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-4285262a-db62-49be-9c8d-273186ab08c4')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-4285262a-db62-49be-9c8d-273186ab08c4 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-4285262a-db62-49be-9c8d-273186ab08c4&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>  <div id="df-0e190d15-cdf3-464b-bcfb-9ef6867cfba1">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Score_D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>50</td>    </tr>    <tr>      <th>1</th>      <td>30</td>    </tr>    <tr>      <th>2</th>      <td>80</td>    </tr>    <tr>      <th>3</th>      <td>60</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-0e190d15-cdf3-464b-bcfb-9ef6867cfba1')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-0e190d15-cdf3-464b-bcfb-9ef6867cfba1 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-0e190d15-cdf3-464b-bcfb-9ef6867cfba1&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(axis = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>  <div id="df-c4cae1e4-71a0-446b-8e51-6af06230d2ee">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Score_A</th>      <th>Score_B</th>      <th>Score_C</th>      <th>Score_D</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>90.0</td>      <td>45.0</td>      <td>50.0</td>      <td>30</td>    </tr>    <tr>      <th>3</th>      <td>80.0</td>      <td>60.0</td>      <td>90.0</td>      <td>60</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-c4cae1e4-71a0-446b-8e51-6af06230d2ee')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-c4cae1e4-71a0-446b-8e51-6af06230d2ee button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-c4cae1e4-71a0-446b-8e51-6af06230d2ee&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><h2 id="이상치"><a href="#이상치" class="headerlink" title="이상치"></a>이상치</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sales</span><br></pre></td></tr></table></figure>  <div id="df-6f6e6109-861d-4be9-ba85-95e41759ab5e">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Invoice ID</th>      <th>Branch</th>      <th>City</th>      <th>Customer type</th>      <th>Gender</th>      <th>Product line</th>      <th>Unit price</th>      <th>Quantity</th>      <th>Date</th>      <th>Time</th>      <th>Payment</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>750-67-8428</td>      <td>A</td>      <td>Yangon</td>      <td>Member</td>      <td>Female</td>      <td>Health and beauty</td>      <td>74.69</td>      <td>7</td>      <td>1/5/2019</td>      <td>13:08</td>      <td>Ewallet</td>    </tr>    <tr>      <th>1</th>      <td>226-31-3081</td>      <td>C</td>      <td>Naypyitaw</td>      <td>Normal</td>      <td>Female</td>      <td>Electronic accessories</td>      <td>15.28</td>      <td>5</td>      <td>3/8/2019</td>      <td>10:29</td>      <td>Cash</td>    </tr>    <tr>      <th>2</th>      <td>631-41-3108</td>      <td>A</td>      <td>Yangon</td>      <td>Normal</td>      <td>Male</td>      <td>Home and lifestyle</td>      <td>46.33</td>      <td>7</td>      <td>3/3/2019</td>      <td>13:23</td>      <td>Credit card</td>    </tr>    <tr>      <th>3</th>      <td>123-19-1176</td>      <td>A</td>      <td>Yangon</td>      <td>Member</td>      <td>Male</td>      <td>Health and beauty</td>      <td>58.22</td>      <td>8</td>      <td>1/27/2019</td>      <td>20:33</td>      <td>Ewallet</td>    </tr>    <tr>      <th>4</th>      <td>373-73-7910</td>      <td>A</td>      <td>Yangon</td>      <td>Normal</td>      <td>Male</td>      <td>Sports and travel</td>      <td>86.31</td>      <td>7</td>      <td>2/8/2019</td>      <td>10:37</td>      <td>Ewallet</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>995</th>      <td>233-67-5758</td>      <td>C</td>      <td>Naypyitaw</td>      <td>Normal</td>      <td>Male</td>      <td>Health and beauty</td>      <td>40.35</td>      <td>1</td>      <td>1/29/2019</td>      <td>13:46</td>      <td>Ewallet</td>    </tr>    <tr>      <th>996</th>      <td>303-96-2227</td>      <td>B</td>      <td>Mandalay</td>      <td>Normal</td>      <td>Female</td>      <td>Home and lifestyle</td>      <td>97.38</td>      <td>10</td>      <td>3/2/2019</td>      <td>17:16</td>      <td>Ewallet</td>    </tr>    <tr>      <th>997</th>      <td>727-02-1313</td>      <td>A</td>      <td>Yangon</td>      <td>Member</td>      <td>Male</td>      <td>Food and beverages</td>      <td>31.84</td>      <td>1</td>      <td>2/9/2019</td>      <td>13:22</td>      <td>Cash</td>    </tr>    <tr>      <th>998</th>      <td>347-56-2442</td>      <td>A</td>      <td>Yangon</td>      <td>Normal</td>      <td>Male</td>      <td>Home and lifestyle</td>      <td>65.82</td>      <td>1</td>      <td>2/22/2019</td>      <td>15:33</td>      <td>Cash</td>    </tr>    <tr>      <th>999</th>      <td>849-09-3807</td>      <td>A</td>      <td>Yangon</td>      <td>Member</td>      <td>Female</td>      <td>Fashion accessories</td>      <td>88.34</td>      <td>7</td>      <td>2/18/2019</td>      <td>13:28</td>      <td>Cash</td>    </tr>  </tbody></table><p>1000 rows × 11 columns</p></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-6f6e6109-861d-4be9-ba85-95e41759ab5e')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-6f6e6109-861d-4be9-ba85-95e41759ab5e button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-6f6e6109-861d-4be9-ba85-95e41759ab5e&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><ul><li><p>일반적인 통계적인 공식</p></li><li><p>IQR - 박스플롯 - 사분위수</p></li><li><p>Q0(0), Q1(25%), Q2(50%), Q3(75%), Q4(100%)</p></li><li><p>이상치의 하한 경계값 : Q1 - (1.5 * (Q3-Q1)) </p></li><li><p>이상치의 상한 경계값 : Q3 + (1.5 * (Q3-Q1))</p></li><li><p>도메인(각 비즈니스 영역, 미래 일자리)에서 바라보는 이상치 기준(관습)</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sales[[<span class="string">&#x27;Unit price&#x27;</span>]].describe()</span><br></pre></td></tr></table></figure>  <div id="df-9b6fc1ab-b0b3-47ba-b180-b37f4ec43d85">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Unit price</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>1000.000000</td>    </tr>    <tr>      <th>mean</th>      <td>55.672130</td>    </tr>    <tr>      <th>std</th>      <td>26.494628</td>    </tr>    <tr>      <th>min</th>      <td>10.080000</td>    </tr>    <tr>      <th>25%</th>      <td>32.875000</td>    </tr>    <tr>      <th>50%</th>      <td>55.230000</td>    </tr>    <tr>      <th>75%</th>      <td>77.935000</td>    </tr>    <tr>      <th>max</th>      <td>99.960000</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-9b6fc1ab-b0b3-47ba-b180-b37f4ec43d85')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-9b6fc1ab-b0b3-47ba-b180-b37f4ec43d85 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-9b6fc1ab-b0b3-47ba-b180-b37f4ec43d85&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Q1 = sales[<span class="string">&#x27;Unit price&#x27;</span>].quantile(<span class="number">0.25</span>)</span><br><span class="line">Q3 = sales[<span class="string">&#x27;Unit price&#x27;</span>].quantile(<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Q1보다 낮은 값을 이상치로 간주 </span></span><br><span class="line">outliers_q1 = (sales[<span class="string">&#x27;Unit price&#x27;</span>] &lt; Q1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Q3보다 높은 값을 이상치로 간주</span></span><br><span class="line">outliers_q3 = (sales[<span class="string">&#x27;Unit price&#x27;</span>] &gt; Q3)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(sales[<span class="string">&#x27;Unit price&#x27;</span>][~(outliers_q1 | outliers_q3)])</span><br></pre></td></tr></table></figure><pre><code>0      74.692      46.333      58.226      68.847      73.56       ...  991    76.60992    58.03994    60.95995    40.35998    65.82Name: Unit price, Length: 500, dtype: float64</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;라이브러리-불러오기&quot;&gt;&lt;a href=&quot;#라이브러리-불러오기&quot; class=&quot;headerlink&quot; title=&quot;라이브러리 불러오기&quot;&gt;&lt;/a&gt;라이브러리 불러오기&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;pandas 라이브러리 불러오기, supermarket_s</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>visualization 튜토리얼 1</title>
    <link href="https://ahnduhong.github.io/2022/03/25/visualization_tutorial_01/"/>
    <id>https://ahnduhong.github.io/2022/03/25/visualization_tutorial_01/</id>
    <published>2022-03-25T00:00:00.000Z</published>
    <updated>2022-04-12T01:47:30.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="라이브-러리-불러오기"><a href="#라이브-러리-불러오기" class="headerlink" title="라이브 러리 불러오기"></a>라이브 러리 불러오기</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="built_in">print</span>(matplotlib.__version__)</span><br><span class="line"><span class="built_in">print</span>(sns.__version__)</span><br></pre></td></tr></table></figure><pre><code>3.2.20.11.2</code></pre><h1 id="시각화-그려보기"><a href="#시각화-그려보기" class="headerlink" title="시각화 그려보기"></a>시각화 그려보기</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">dates = [</span><br><span class="line">    <span class="string">&#x27;2021-01-01&#x27;</span>, <span class="string">&#x27;2021-01-02&#x27;</span>, <span class="string">&#x27;2021-01-03&#x27;</span>, <span class="string">&#x27;2021-01-04&#x27;</span>, <span class="string">&#x27;2021-01-05&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2021-01-06&#x27;</span>, <span class="string">&#x27;2021-01-07&#x27;</span>, <span class="string">&#x27;2021-01-08&#x27;</span>, <span class="string">&#x27;2021-01-09&#x27;</span>, <span class="string">&#x27;2021-01-10&#x27;</span></span><br><span class="line">]</span><br><span class="line">min_temperature = [<span class="number">20.7</span>, <span class="number">17.9</span>, <span class="number">18.8</span>, <span class="number">14.6</span>, <span class="number">15.8</span>, <span class="number">15.8</span>, <span class="number">15.8</span>, <span class="number">17.4</span>, <span class="number">21.8</span>, <span class="number">20.0</span>]</span><br><span class="line">max_temperature = [<span class="number">34.7</span>, <span class="number">28.9</span>, <span class="number">31.8</span>, <span class="number">25.6</span>, <span class="number">28.8</span>, <span class="number">21.8</span>, <span class="number">22.8</span>, <span class="number">28.4</span>, <span class="number">30.8</span>, <span class="number">32.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 앞으로 여러분들이 아래와 같이 코드를 작성해주시면 됩니다.</span></span><br><span class="line">flg, ax = plt.subplots(nrows = <span class="number">1</span>, ncols = <span class="number">1</span>, figsize = (<span class="number">10</span>, <span class="number">6</span>)) <span class="comment"># 시각화 기초 해심</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax.plot(dates, min_temperature, label = <span class="string">&quot;Min Temp.&quot;</span>)</span><br><span class="line">ax.plot(dates, max_temperature, label = <span class="string">&quot;Max Temp.&quot;</span>)</span><br><span class="line">ax.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/visulization_tutorial_01/output_4_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install yfinance --upgrade --no-cache-<span class="built_in">dir</span></span><br></pre></td></tr></table></figure><pre><code>Collecting yfinance  Downloading yfinance-0.1.70-py2.py3-none-any.whl (26 kB)Requirement already satisfied: numpy&gt;=1.15 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.21.5)Collecting lxml&gt;=4.5.1  Downloading lxml-4.8.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (6.4 MB)[K     |████████████████████████████████| 6.4 MB 16.4 MB/s [?25hCollecting requests&gt;=2.26  Downloading requests-2.27.1-py2.py3-none-any.whl (63 kB)[K     |████████████████████████████████| 63 kB 5.9 MB/s [?25hRequirement already satisfied: pandas&gt;=0.24.0 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.3.5)Requirement already satisfied: multitasking&gt;=0.0.7 in /usr/local/lib/python3.7/dist-packages (from yfinance) (0.0.10)Requirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.24.0-&gt;yfinance) (2018.9)Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.24.0-&gt;yfinance) (2.8.2)Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas&gt;=0.24.0-&gt;yfinance) (1.15.0)Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.26-&gt;yfinance) (2.0.12)Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.26-&gt;yfinance) (1.24.3)Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.26-&gt;yfinance) (2021.10.8)Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.26-&gt;yfinance) (2.10)Installing collected packages: requests, lxml, yfinance  Attempting uninstall: requests    Found existing installation: requests 2.23.0    Uninstalling requests-2.23.0:      Successfully uninstalled requests-2.23.0  Attempting uninstall: lxml    Found existing installation: lxml 4.2.6    Uninstalling lxml-4.2.6:      Successfully uninstalled lxml-4.2.6[31mERROR: pip&#39;s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.google-colab 1.0.0 requires requests~=2.23.0, but you have requests 2.27.1 which is incompatible.datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.[0mSuccessfully installed lxml-4.8.0 requests-2.27.1 yfinance-0.1.70</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line">data = yf.download(<span class="string">&quot;AAPL&quot;</span>, start = <span class="string">&quot;2019-08-01&quot;</span>, end = <span class="string">&quot;2022-03-23&quot;</span>)</span><br><span class="line">ts = data[<span class="string">&#x27;Open&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(ts.head())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ts))</span><br></pre></td></tr></table></figure><pre><code>[*********************100%***********************]  1 of 1 completedDate2019-08-01    53.4749982019-08-02    51.3825002019-08-05    49.4975012019-08-06    49.0774992019-08-07    48.852501Name: Open, dtype: float64&lt;class &#39;pandas.core.series.Series&#39;&gt;</code></pre><h2 id="pyplot-형태"><a href="#pyplot-형태" class="headerlink" title="pyplot 형태"></a>pyplot 형태</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(ts)</span><br><span class="line">plt.title(<span class="string">&quot;Stock Market of AAPL&quot;</span>) <span class="comment"># 구글 코랩에서 한글 타이틀은 인식을 못하여 나중에 세팅해야함</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;Date&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Open Price&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/visulization_tutorial_01/output_8_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots() <span class="comment">#fig 는 겉 테두리</span></span><br><span class="line">ax.plot(ts)</span><br><span class="line">ax.set_title(<span class="string">&quot;Stock Market of AAPL&quot;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;Date&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;Open Price&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/visulization_tutorial_01/output_9_0.png" alt="png"></p><h2 id="막대-그래프"><a href="#막대-그래프" class="headerlink" title="막대 그래프"></a>막대 그래프</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calendar.month_name[<span class="number">1</span>:<span class="number">13</span>]</span><br></pre></td></tr></table></figure><pre><code>[&#39;January&#39;, &#39;February&#39;, &#39;March&#39;, &#39;April&#39;, &#39;May&#39;, &#39;June&#39;, &#39;July&#39;, &#39;August&#39;, &#39;September&#39;, &#39;October&#39;, &#39;November&#39;, &#39;December&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> calendar <span class="comment"># 날짜를 관장하는 라이브러리</span></span><br><span class="line"></span><br><span class="line">month_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">sold_list = [<span class="number">300</span>, <span class="number">400</span>, <span class="number">550</span>, <span class="number">900</span>, <span class="number">600</span>, <span class="number">960</span>, <span class="number">900</span>, <span class="number">910</span>, <span class="number">800</span>, <span class="number">700</span>, <span class="number">550</span>, <span class="number">450</span>]</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">barplots = ax.bar(month_list, sold_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;barplots :&quot;</span>, barplots)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> plot <span class="keyword">in</span> barplots:</span><br><span class="line">  <span class="built_in">print</span>(plot)</span><br><span class="line">  <span class="comment"># print(plot.get_height())</span></span><br><span class="line">  <span class="comment"># print(plot.get_x())</span></span><br><span class="line">  <span class="comment"># print(plot.get_y())</span></span><br><span class="line">  <span class="comment"># print(plot.get_width())</span></span><br><span class="line">  height = plot.get_height()</span><br><span class="line">  ax.text(plot.get_x() + plot.get_width()/<span class="number">2.</span>, height, height, ha = <span class="string">&#x27;center&#x27;</span>, va = <span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(month_list, calendar.month_name[<span class="number">1</span>:<span class="number">13</span>], rotation = <span class="number">90</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>barplots : &lt;BarContainer object of 12 artists&gt;Rectangle(xy=(0.6, 0), width=0.8, height=300, angle=0)Rectangle(xy=(1.6, 0), width=0.8, height=400, angle=0)Rectangle(xy=(2.6, 0), width=0.8, height=550, angle=0)Rectangle(xy=(3.6, 0), width=0.8, height=900, angle=0)Rectangle(xy=(4.6, 0), width=0.8, height=600, angle=0)Rectangle(xy=(5.6, 0), width=0.8, height=960, angle=0)Rectangle(xy=(6.6, 0), width=0.8, height=900, angle=0)Rectangle(xy=(7.6, 0), width=0.8, height=910, angle=0)Rectangle(xy=(8.6, 0), width=0.8, height=800, angle=0)Rectangle(xy=(9.6, 0), width=0.8, height=700, angle=0)Rectangle(xy=(10.6, 0), width=0.8, height=550, angle=0)Rectangle(xy=(11.6, 0), width=0.8, height=450, angle=0)</code></pre><p><img src="/images/visulization_tutorial_01/output_12_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tips.info())</span><br><span class="line">x = tips[<span class="string">&#x27;total_bill&#x27;</span>]</span><br><span class="line">y = tips[<span class="string">&#x27;tip&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 산점도</span></span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">ax.scatter(x, y)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Total Bill&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Tip&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 244 entries, 0 to 243Data columns (total 7 columns): #   Column      Non-Null Count  Dtype   ---  ------      --------------  -----    0   total_bill  244 non-null    float64  1   tip         244 non-null    float64  2   sex         244 non-null    category 3   smoker      244 non-null    category 4   day         244 non-null    category 5   time        244 non-null    category 6   size        244 non-null    int64   dtypes: category(4), float64(2), int64(1)memory usage: 7.4 KBNone</code></pre><p><img src="/images/visulization_tutorial_01/output_13_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">label, data = tips.groupby(<span class="string">&#x27;sex&#x27;</span>)</span><br><span class="line"><span class="comment"># print(label)</span></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">tips[<span class="string">&#x27;sex_color&#x27;</span>] = tips[<span class="string">&#x27;sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;Male&#x27;</span>: <span class="string">&#x27;#2521F6&#x27;</span>, <span class="string">&#x27;Female&#x27;</span>: <span class="string">&#x27;#EB4036&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># print(tips.head())</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> label, data <span class="keyword">in</span> tips.groupby(<span class="string">&#x27;sex&#x27;</span>):</span><br><span class="line">  ax.scatter(data[<span class="string">&#x27;total_bill&#x27;</span>], data[<span class="string">&#x27;tip&#x27;</span>], label = label, color = data[<span class="string">&#x27;sex_color&#x27;</span>], alpha = <span class="number">0.5</span>)</span><br><span class="line">  ax.set_xlabel(<span class="string">&#x27;Total Bill&#x27;</span>)</span><br><span class="line">  ax.set_ylabel(<span class="string">&#x27;Tip&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.legend() <span class="comment"># 범례</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/visulization_tutorial_01/output_14_0.png" alt="png"></p><h2 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a>Seaborn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.pylabtools <span class="keyword">import</span> figsize</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line"><span class="comment"># print(tips.info())</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">sns.scatterplot(x = <span class="string">&#x27;total_bill&#x27;</span>, y = <span class="string">&#x27;tip&#x27;</span>, hue = <span class="string">&#x27;sex&#x27;</span>, data = tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/visulization_tutorial_01/output_16_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 두개의 그래프를 동시에 표현</span></span><br><span class="line">fig, ax = plt.subplots(nrows=<span class="number">1</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line">sns.regplot(x = <span class="string">&quot;total_bill&quot;</span>, y = <span class="string">&quot;tip&quot;</span>, data = tips , ax = ax[<span class="number">1</span>], fit_reg = <span class="literal">True</span>)</span><br><span class="line">ax[<span class="number">1</span>].set_title(<span class="string">&quot;with linear regression line&quot;</span>)</span><br><span class="line"></span><br><span class="line">sns.regplot(x = <span class="string">&quot;total_bill&quot;</span>, y = <span class="string">&quot;tip&quot;</span>, data = tips , ax = ax[<span class="number">0</span>], fit_reg = <span class="literal">False</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_title(<span class="string">&quot;without linear regression line&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/visulization_tutorial_01/output_17_0.png" alt="png"></p><ul><li>막대 그래프 그리기 seaborn 방신</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.countplot(x = <span class="string">&quot;day&quot;</span>, data = tips)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/visulization_tutorial_01/output_19_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tips[<span class="string">&#x27;day&#x27;</span>].value_counts().index)</span><br><span class="line"><span class="built_in">print</span>(tips[<span class="string">&#x27;day&#x27;</span>].value_counts().values)</span><br><span class="line"><span class="built_in">print</span>(tips[<span class="string">&#x27;day&#x27;</span>].value_counts(ascending=<span class="literal">True</span>)) <span class="comment"># 오름차순</span></span><br></pre></td></tr></table></figure><pre><code>CategoricalIndex([&#39;Sat&#39;, &#39;Sun&#39;, &#39;Thur&#39;, &#39;Fri&#39;], categories=[&#39;Thur&#39;, &#39;Fri&#39;, &#39;Sat&#39;, &#39;Sun&#39;], ordered=False, dtype=&#39;category&#39;)[87 76 62 19]Fri     19Thur    62Sun     76Sat     87Name: day, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax = sns.countplot(x = <span class="string">&quot;day&quot;</span>, data = tips, order = tips[<span class="string">&#x27;day&#x27;</span>].value_counts().index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> plot <span class="keyword">in</span> ax.patches:</span><br><span class="line">  <span class="comment"># print(plot)</span></span><br><span class="line">  height = plot.get_height()</span><br><span class="line">  ax.text(plot.get_x() + plot.get_width()/<span class="number">2.</span>, height, height, ha = <span class="string">&#x27;center&#x27;</span>, va = <span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.set_ylim(-<span class="number">5</span>, <span class="number">100</span>) <span class="comment"># y축 값 변경</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/visulization_tutorial_01/output_21_0.png" alt="png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;라이브-러리-불러오기&quot;&gt;&lt;a href=&quot;#라이브-러리-불러오기&quot; class=&quot;headerlink&quot; title=&quot;라이브 러리 불러오기&quot;&gt;&lt;/a&gt;라이브 러리 불러오기&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>판다스 튜토리얼 1</title>
    <link href="https://ahnduhong.github.io/2022/03/23/pandas_tutorial_01/"/>
    <id>https://ahnduhong.github.io/2022/03/23/pandas_tutorial_01/</id>
    <published>2022-03-23T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="라이브러리-불러오기"><a href="#라이브러리-불러오기" class="headerlink" title="라이브러리 불러오기"></a>라이브러리 불러오기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="built_in">print</span>(pd.__version__)</span><br></pre></td></tr></table></figure><pre><code>1.3.5</code></pre><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">temp_dic = &#123;<span class="string">&quot;coll&quot;</span> : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">            <span class="string">&quot;col2&quot;</span> : [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]&#125;</span><br><span class="line">df = pd.DataFrame(temp_dic)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;   coll  col20     1     31     2     42     3     5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">temp_dic = &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">1</span> , <span class="string">&quot;b&quot;</span> : <span class="number">2</span>, <span class="string">&quot;c&quot;</span> : <span class="number">3</span>&#125;</span><br><span class="line">ser = pd.Series(temp_dic)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ser))</span><br><span class="line"><span class="built_in">print</span>(ser)</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.series.Series&#39;&gt;a    1b    2c    3dtype: int64</code></pre><h2 id="구글-드라이브-연동"><a href="#구글-드라이브-연동" class="headerlink" title="구글 드라이브 연동"></a>구글 드라이브 연동</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> drive</span><br><span class="line">drive.mount(<span class="string">&#x27;/content/drive&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>Mounted at /content/drive</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DATA_PATH = <span class="string">&#x27;/content/drive/MyDrive/Colab Notebooks/data/Lemonade2016.csv&#x27;</span></span><br><span class="line">juice = pd.read_csv(DATA_PATH)</span><br><span class="line">juice</span><br></pre></td></tr></table></figure>  <div id="df-27fb38f5-8b87-4f93-8b5a-9f5a79087b29">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7/1/2016</td>      <td>Park</td>      <td>97</td>      <td>67</td>      <td>70</td>      <td>90.0</td>      <td>0.25</td>    </tr>    <tr>      <th>1</th>      <td>7/2/2016</td>      <td>Park</td>      <td>98</td>      <td>67</td>      <td>72</td>      <td>90.0</td>      <td>0.25</td>    </tr>    <tr>      <th>2</th>      <td>7/3/2016</td>      <td>Park</td>      <td>110</td>      <td>77</td>      <td>71</td>      <td>104.0</td>      <td>0.25</td>    </tr>    <tr>      <th>3</th>      <td>7/4/2016</td>      <td>Beach</td>      <td>134</td>      <td>99</td>      <td>76</td>      <td>98.0</td>      <td>0.25</td>    </tr>    <tr>      <th>4</th>      <td>7/5/2016</td>      <td>Beach</td>      <td>159</td>      <td>118</td>      <td>78</td>      <td>135.0</td>      <td>0.25</td>    </tr>    <tr>      <th>5</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>    </tr>    <tr>      <th>6</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>    </tr>    <tr>      <th>7</th>      <td>7/7/2016</td>      <td>Beach</td>      <td>143</td>      <td>101</td>      <td>81</td>      <td>135.0</td>      <td>0.25</td>    </tr>    <tr>      <th>8</th>      <td>NaN</td>      <td>Beach</td>      <td>123</td>      <td>86</td>      <td>82</td>      <td>113.0</td>      <td>0.25</td>    </tr>    <tr>      <th>9</th>      <td>7/9/2016</td>      <td>Beach</td>      <td>134</td>      <td>95</td>      <td>80</td>      <td>126.0</td>      <td>0.25</td>    </tr>    <tr>      <th>10</th>      <td>7/10/2016</td>      <td>Beach</td>      <td>140</td>      <td>98</td>      <td>82</td>      <td>131.0</td>      <td>0.25</td>    </tr>    <tr>      <th>11</th>      <td>7/11/2016</td>      <td>Beach</td>      <td>162</td>      <td>120</td>      <td>83</td>      <td>135.0</td>      <td>0.25</td>    </tr>    <tr>      <th>12</th>      <td>7/12/2016</td>      <td>Beach</td>      <td>130</td>      <td>95</td>      <td>84</td>      <td>99.0</td>      <td>0.25</td>    </tr>    <tr>      <th>13</th>      <td>7/13/2016</td>      <td>Beach</td>      <td>109</td>      <td>75</td>      <td>77</td>      <td>99.0</td>      <td>0.25</td>    </tr>    <tr>      <th>14</th>      <td>7/14/2016</td>      <td>Beach</td>      <td>122</td>      <td>85</td>      <td>78</td>      <td>113.0</td>      <td>0.25</td>    </tr>    <tr>      <th>15</th>      <td>7/15/2016</td>      <td>Beach</td>      <td>98</td>      <td>62</td>      <td>75</td>      <td>108.0</td>      <td>0.50</td>    </tr>    <tr>      <th>16</th>      <td>7/16/2016</td>      <td>Beach</td>      <td>81</td>      <td>50</td>      <td>74</td>      <td>90.0</td>      <td>0.50</td>    </tr>    <tr>      <th>17</th>      <td>7/17/2016</td>      <td>Beach</td>      <td>115</td>      <td>76</td>      <td>77</td>      <td>126.0</td>      <td>0.50</td>    </tr>    <tr>      <th>18</th>      <td>7/18/2016</td>      <td>Park</td>      <td>131</td>      <td>92</td>      <td>81</td>      <td>122.0</td>      <td>0.50</td>    </tr>    <tr>      <th>19</th>      <td>7/19/2016</td>      <td>Park</td>      <td>122</td>      <td>85</td>      <td>78</td>      <td>113.0</td>      <td>0.50</td>    </tr>    <tr>      <th>20</th>      <td>7/20/2016</td>      <td>Park</td>      <td>71</td>      <td>42</td>      <td>70</td>      <td>NaN</td>      <td>0.50</td>    </tr>    <tr>      <th>21</th>      <td>7/21/2016</td>      <td>Park</td>      <td>83</td>      <td>50</td>      <td>77</td>      <td>90.0</td>      <td>0.50</td>    </tr>    <tr>      <th>22</th>      <td>7/22/2016</td>      <td>Park</td>      <td>112</td>      <td>75</td>      <td>80</td>      <td>108.0</td>      <td>0.50</td>    </tr>    <tr>      <th>23</th>      <td>7/23/2016</td>      <td>Park</td>      <td>120</td>      <td>82</td>      <td>81</td>      <td>117.0</td>      <td>0.50</td>    </tr>    <tr>      <th>24</th>      <td>7/24/2016</td>      <td>Park</td>      <td>121</td>      <td>82</td>      <td>82</td>      <td>117.0</td>      <td>0.50</td>    </tr>    <tr>      <th>25</th>      <td>7/25/2016</td>      <td>Park</td>      <td>156</td>      <td>113</td>      <td>84</td>      <td>135.0</td>      <td>0.50</td>    </tr>    <tr>      <th>26</th>      <td>7/26/2016</td>      <td>Park</td>      <td>176</td>      <td>129</td>      <td>83</td>      <td>158.0</td>      <td>0.35</td>    </tr>    <tr>      <th>27</th>      <td>7/27/2016</td>      <td>Park</td>      <td>104</td>      <td>68</td>      <td>80</td>      <td>99.0</td>      <td>0.35</td>    </tr>    <tr>      <th>28</th>      <td>7/28/2016</td>      <td>Park</td>      <td>96</td>      <td>63</td>      <td>82</td>      <td>90.0</td>      <td>0.35</td>    </tr>    <tr>      <th>29</th>      <td>7/29/2016</td>      <td>Park</td>      <td>100</td>      <td>66</td>      <td>81</td>      <td>95.0</td>      <td>0.35</td>    </tr>    <tr>      <th>30</th>      <td>7/30/2016</td>      <td>Beach</td>      <td>88</td>      <td>57</td>      <td>82</td>      <td>81.0</td>      <td>0.35</td>    </tr>    <tr>      <th>31</th>      <td>7/31/2016</td>      <td>Beach</td>      <td>76</td>      <td>47</td>      <td>82</td>      <td>68.0</td>      <td>0.35</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-27fb38f5-8b87-4f93-8b5a-9f5a79087b29')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-27fb38f5-8b87-4f93-8b5a-9f5a79087b29 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-27fb38f5-8b87-4f93-8b5a-9f5a79087b29&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><ul><li>데이터를 불러왔다.</li><li>첫번째 파악해야 하는 것 &#x3D; 데이터 구조 파악</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">juice.info() <span class="comment"># info = DataFrame 안에 있는 method</span></span><br><span class="line"><span class="comment"># 결측치가 있으면 Non-Null Count 개수가 다름.</span></span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 32 entries, 0 to 31Data columns (total 7 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   Date         31 non-null     object  1   Location     32 non-null     object  2   Lemon        32 non-null     int64   3   Orange       32 non-null     int64   4   Temperature  32 non-null     int64   5   Leaflets     31 non-null     float64 6   Price        32 non-null     float64dtypes: float64(2), int64(3), object(2)memory usage: 1.9+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice.head(<span class="number">10</span>) <span class="comment"># 위에서부터 5개까지, ()안에 숫자를 넣으면 그 숫자까지 데이터를 불러옴</span></span><br></pre></td></tr></table></figure>  <div id="df-6f968857-ee36-4309-96a8-22630fa0efd6">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7/1/2016</td>      <td>Park</td>      <td>97</td>      <td>67</td>      <td>70</td>      <td>90.0</td>      <td>0.25</td>    </tr>    <tr>      <th>1</th>      <td>7/2/2016</td>      <td>Park</td>      <td>98</td>      <td>67</td>      <td>72</td>      <td>90.0</td>      <td>0.25</td>    </tr>    <tr>      <th>2</th>      <td>7/3/2016</td>      <td>Park</td>      <td>110</td>      <td>77</td>      <td>71</td>      <td>104.0</td>      <td>0.25</td>    </tr>    <tr>      <th>3</th>      <td>7/4/2016</td>      <td>Beach</td>      <td>134</td>      <td>99</td>      <td>76</td>      <td>98.0</td>      <td>0.25</td>    </tr>    <tr>      <th>4</th>      <td>7/5/2016</td>      <td>Beach</td>      <td>159</td>      <td>118</td>      <td>78</td>      <td>135.0</td>      <td>0.25</td>    </tr>    <tr>      <th>5</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>    </tr>    <tr>      <th>6</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>    </tr>    <tr>      <th>7</th>      <td>7/7/2016</td>      <td>Beach</td>      <td>143</td>      <td>101</td>      <td>81</td>      <td>135.0</td>      <td>0.25</td>    </tr>    <tr>      <th>8</th>      <td>NaN</td>      <td>Beach</td>      <td>123</td>      <td>86</td>      <td>82</td>      <td>113.0</td>      <td>0.25</td>    </tr>    <tr>      <th>9</th>      <td>7/9/2016</td>      <td>Beach</td>      <td>134</td>      <td>95</td>      <td>80</td>      <td>126.0</td>      <td>0.25</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-6f968857-ee36-4309-96a8-22630fa0efd6')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-6f968857-ee36-4309-96a8-22630fa0efd6 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-6f968857-ee36-4309-96a8-22630fa0efd6&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice.tail() <span class="comment"># 아래에서 부터 5개</span></span><br></pre></td></tr></table></figure>  <div id="df-6733b4da-1377-4661-8b0c-d798794900ed">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>    </tr>  </thead>  <tbody>    <tr>      <th>27</th>      <td>7/27/2016</td>      <td>Park</td>      <td>104</td>      <td>68</td>      <td>80</td>      <td>99.0</td>      <td>0.35</td>    </tr>    <tr>      <th>28</th>      <td>7/28/2016</td>      <td>Park</td>      <td>96</td>      <td>63</td>      <td>82</td>      <td>90.0</td>      <td>0.35</td>    </tr>    <tr>      <th>29</th>      <td>7/29/2016</td>      <td>Park</td>      <td>100</td>      <td>66</td>      <td>81</td>      <td>95.0</td>      <td>0.35</td>    </tr>    <tr>      <th>30</th>      <td>7/30/2016</td>      <td>Beach</td>      <td>88</td>      <td>57</td>      <td>82</td>      <td>81.0</td>      <td>0.35</td>    </tr>    <tr>      <th>31</th>      <td>7/31/2016</td>      <td>Beach</td>      <td>76</td>      <td>47</td>      <td>82</td>      <td>68.0</td>      <td>0.35</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-6733b4da-1377-4661-8b0c-d798794900ed')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-6733b4da-1377-4661-8b0c-d798794900ed button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-6733b4da-1377-4661-8b0c-d798794900ed&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><ul><li>Describe() 함수</li><li>기술통계량 확인 해주는 함수</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice.describe() <span class="comment"># type(juice.describe()) 항상 데이터 타입 확인.</span></span><br></pre></td></tr></table></figure>  <div id="df-f9f0ce1e-fc97-44be-914b-2a73ca101631">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>32.000000</td>      <td>32.000000</td>      <td>32.000000</td>      <td>31.000000</td>      <td>32.000000</td>    </tr>    <tr>      <th>mean</th>      <td>116.156250</td>      <td>80.000000</td>      <td>78.968750</td>      <td>108.548387</td>      <td>0.354687</td>    </tr>    <tr>      <th>std</th>      <td>25.823357</td>      <td>21.863211</td>      <td>4.067847</td>      <td>20.117718</td>      <td>0.113137</td>    </tr>    <tr>      <th>min</th>      <td>71.000000</td>      <td>42.000000</td>      <td>70.000000</td>      <td>68.000000</td>      <td>0.250000</td>    </tr>    <tr>      <th>25%</th>      <td>98.000000</td>      <td>66.750000</td>      <td>77.000000</td>      <td>90.000000</td>      <td>0.250000</td>    </tr>    <tr>      <th>50%</th>      <td>113.500000</td>      <td>76.500000</td>      <td>80.500000</td>      <td>108.000000</td>      <td>0.350000</td>    </tr>    <tr>      <th>75%</th>      <td>131.750000</td>      <td>95.000000</td>      <td>82.000000</td>      <td>124.000000</td>      <td>0.500000</td>    </tr>    <tr>      <th>max</th>      <td>176.000000</td>      <td>129.000000</td>      <td>84.000000</td>      <td>158.000000</td>      <td>0.500000</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-f9f0ce1e-fc97-44be-914b-2a73ca101631')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-f9f0ce1e-fc97-44be-914b-2a73ca101631 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-f9f0ce1e-fc97-44be-914b-2a73ca101631&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><ul><li>value_counts()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(juice[<span class="string">&#x27;Location&#x27;</span>].value_counts()) <span class="comment"># 기초 통계량으로는 빈도만 확인 할수 있으니 value counts()함수를 사용</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(juice[<span class="string">&#x27;Location&#x27;</span>].value_counts()))</span><br></pre></td></tr></table></figure><pre><code>Beach    17Park     15Name: Location, dtype: int64&lt;class &#39;pandas.core.series.Series&#39;&gt;</code></pre><h2 id="데이터-다뤄보기"><a href="#데이터-다뤄보기" class="headerlink" title="데이터 다뤄보기"></a>데이터 다뤄보기</h2><ul><li>행과 열을 핸들링 해보자.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">juice[<span class="string">&#x27;Sold&#x27;</span>] = <span class="number">0</span> <span class="comment"># 새로운 데이터 추가</span></span><br><span class="line"><span class="built_in">print</span>(juice.head(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold0  7/1/2016     Park     97      67           70      90.0   0.25     01  7/2/2016     Park     98      67           72      90.0   0.25     02  7/3/2016     Park    110      77           71     104.0   0.25     0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">juice[<span class="string">&#x27;Sold&#x27;</span>] = juice[<span class="string">&#x27;Lemon&#x27;</span>] + juice[<span class="string">&#x27;Orange&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(juice.head(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold0  7/1/2016     Park     97      67           70      90.0   0.25   1641  7/2/2016     Park     98      67           72      90.0   0.25   1652  7/3/2016     Park    110      77           71     104.0   0.25   187</code></pre><ul><li>매출액 &#x3D; 가격 * 판매량</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># juice[&#x27;Revenue&#x27;] = 0 생략 가능</span></span><br><span class="line">juice[<span class="string">&#x27;Revenue&#x27;</span>] = juice[<span class="string">&#x27;Price&#x27;</span>] * juice[<span class="string">&#x27;Sold&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(juice.head(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \0  7/1/2016     Park     97      67           70      90.0   0.25   164   1  7/2/2016     Park     98      67           72      90.0   0.25   165   2  7/3/2016     Park    110      77           71     104.0   0.25   187      Revenue  0    41.00  1    41.25  2    46.75  </code></pre><ul><li>drop(axis &#x3D; 0 | 1)<ul><li>axis를 0으로 설정 시, 행(&#x3D;index)방향으로 drop() 실행</li><li>axis를 1로 설정 시, 열방향으로 drop 수행함.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">juice_column_drop = juice.drop(<span class="string">&#x27;Sold&#x27;</span>, axis = <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(juice_column_drop.head(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Revenue0  7/1/2016     Park     97      67           70      90.0   0.25    41.001  7/2/2016     Park     98      67           72      90.0   0.25    41.252  7/3/2016     Park    110      77           71     104.0   0.25    46.75</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">juice_row_drop = juice.drop(<span class="number">0</span>, axis = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(juice_row_drop.head(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>       Date Location  Lemon  Orange  Temperature  Leaflets  Price  Sold  \1  7/2/2016     Park     98      67           72      90.0   0.25   165   2  7/3/2016     Park    110      77           71     104.0   0.25   187   3  7/4/2016    Beach    134      99           76      98.0   0.25   233      Revenue  1    41.25  2    46.75  3    58.25  </code></pre><h2 id="데이터-인덱싱"><a href="#데이터-인덱싱" class="headerlink" title="데이터 인덱싱"></a>데이터 인덱싱</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice[<span class="number">4</span>:<span class="number">8</span>]</span><br></pre></td></tr></table></figure>  <div id="df-39a9c573-48e3-4700-b5bb-c24950ba4f3f">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>      <th>Sold</th>      <th>Revenue</th>    </tr>  </thead>  <tbody>    <tr>      <th>4</th>      <td>7/5/2016</td>      <td>Beach</td>      <td>159</td>      <td>118</td>      <td>78</td>      <td>135.0</td>      <td>0.25</td>      <td>277</td>      <td>69.25</td>    </tr>    <tr>      <th>5</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>      <td>172</td>      <td>43.00</td>    </tr>    <tr>      <th>6</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>      <td>172</td>      <td>43.00</td>    </tr>    <tr>      <th>7</th>      <td>7/7/2016</td>      <td>Beach</td>      <td>143</td>      <td>101</td>      <td>81</td>      <td>135.0</td>      <td>0.25</td>      <td>244</td>      <td>61.00</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-39a9c573-48e3-4700-b5bb-c24950ba4f3f')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-39a9c573-48e3-4700-b5bb-c24950ba4f3f button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-39a9c573-48e3-4700-b5bb-c24950ba4f3f&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><ul><li>boolean 값을 활용한 데이터 추출</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># location이 Beach인 경우</span></span><br><span class="line"><span class="comment"># juice[&#x27;Location&#x27;].value_counts()</span></span><br><span class="line">juice[juice[<span class="string">&#x27;Leaflets&#x27;</span>] &gt;= <span class="number">100</span>]</span><br></pre></td></tr></table></figure>  <div id="df-39bd9f29-5daa-48f0-bd59-c71dc37c6437">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>      <th>Sold</th>      <th>Revenue</th>      <th>location</th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>7/3/2016</td>      <td>Park</td>      <td>110</td>      <td>77</td>      <td>71</td>      <td>104.0</td>      <td>0.25</td>      <td>187</td>      <td>46.75</td>      <td>Beach</td>    </tr>    <tr>      <th>4</th>      <td>7/5/2016</td>      <td>Beach</td>      <td>159</td>      <td>118</td>      <td>78</td>      <td>135.0</td>      <td>0.25</td>      <td>277</td>      <td>69.25</td>      <td>Beach</td>    </tr>    <tr>      <th>7</th>      <td>7/7/2016</td>      <td>Beach</td>      <td>143</td>      <td>101</td>      <td>81</td>      <td>135.0</td>      <td>0.25</td>      <td>244</td>      <td>61.00</td>      <td>Beach</td>    </tr>    <tr>      <th>8</th>      <td>NaN</td>      <td>Beach</td>      <td>123</td>      <td>86</td>      <td>82</td>      <td>113.0</td>      <td>0.25</td>      <td>209</td>      <td>52.25</td>      <td>Beach</td>    </tr>    <tr>      <th>9</th>      <td>7/9/2016</td>      <td>Beach</td>      <td>134</td>      <td>95</td>      <td>80</td>      <td>126.0</td>      <td>0.25</td>      <td>229</td>      <td>57.25</td>      <td>Beach</td>    </tr>    <tr>      <th>10</th>      <td>7/10/2016</td>      <td>Beach</td>      <td>140</td>      <td>98</td>      <td>82</td>      <td>131.0</td>      <td>0.25</td>      <td>238</td>      <td>59.50</td>      <td>Beach</td>    </tr>    <tr>      <th>11</th>      <td>7/11/2016</td>      <td>Beach</td>      <td>162</td>      <td>120</td>      <td>83</td>      <td>135.0</td>      <td>0.25</td>      <td>282</td>      <td>70.50</td>      <td>Beach</td>    </tr>    <tr>      <th>14</th>      <td>7/14/2016</td>      <td>Beach</td>      <td>122</td>      <td>85</td>      <td>78</td>      <td>113.0</td>      <td>0.25</td>      <td>207</td>      <td>51.75</td>      <td>Beach</td>    </tr>    <tr>      <th>15</th>      <td>7/15/2016</td>      <td>Beach</td>      <td>98</td>      <td>62</td>      <td>75</td>      <td>108.0</td>      <td>0.50</td>      <td>160</td>      <td>80.00</td>      <td>Beach</td>    </tr>    <tr>      <th>17</th>      <td>7/17/2016</td>      <td>Beach</td>      <td>115</td>      <td>76</td>      <td>77</td>      <td>126.0</td>      <td>0.50</td>      <td>191</td>      <td>95.50</td>      <td>Beach</td>    </tr>    <tr>      <th>18</th>      <td>7/18/2016</td>      <td>Park</td>      <td>131</td>      <td>92</td>      <td>81</td>      <td>122.0</td>      <td>0.50</td>      <td>223</td>      <td>111.50</td>      <td>Beach</td>    </tr>    <tr>      <th>19</th>      <td>7/19/2016</td>      <td>Park</td>      <td>122</td>      <td>85</td>      <td>78</td>      <td>113.0</td>      <td>0.50</td>      <td>207</td>      <td>103.50</td>      <td>Beach</td>    </tr>    <tr>      <th>22</th>      <td>7/22/2016</td>      <td>Park</td>      <td>112</td>      <td>75</td>      <td>80</td>      <td>108.0</td>      <td>0.50</td>      <td>187</td>      <td>93.50</td>      <td>Beach</td>    </tr>    <tr>      <th>23</th>      <td>7/23/2016</td>      <td>Park</td>      <td>120</td>      <td>82</td>      <td>81</td>      <td>117.0</td>      <td>0.50</td>      <td>202</td>      <td>101.00</td>      <td>Beach</td>    </tr>    <tr>      <th>24</th>      <td>7/24/2016</td>      <td>Park</td>      <td>121</td>      <td>82</td>      <td>82</td>      <td>117.0</td>      <td>0.50</td>      <td>203</td>      <td>101.50</td>      <td>Beach</td>    </tr>    <tr>      <th>25</th>      <td>7/25/2016</td>      <td>Park</td>      <td>156</td>      <td>113</td>      <td>84</td>      <td>135.0</td>      <td>0.50</td>      <td>269</td>      <td>134.50</td>      <td>Beach</td>    </tr>    <tr>      <th>26</th>      <td>7/26/2016</td>      <td>Park</td>      <td>176</td>      <td>129</td>      <td>83</td>      <td>158.0</td>      <td>0.35</td>      <td>305</td>      <td>106.75</td>      <td>Beach</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-39bd9f29-5daa-48f0-bd59-c71dc37c6437')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-39bd9f29-5daa-48f0-bd59-c71dc37c6437 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-39bd9f29-5daa-48f0-bd59-c71dc37c6437&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><h2 id="iloc-vs-loc"><a href="#iloc-vs-loc" class="headerlink" title="iloc vs loc"></a>iloc vs loc</h2><ul><li>차이를 확인한다!</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>  <div id="df-10e12aa4-8e41-4c4f-91a6-be55e247dea1">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>      <th>Sold</th>      <th>Revenue</th>      <th>location</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7/1/2016</td>      <td>Park</td>      <td>97</td>      <td>67</td>      <td>70</td>      <td>90.0</td>      <td>0.25</td>      <td>164</td>      <td>41.00</td>      <td>Beach</td>    </tr>    <tr>      <th>1</th>      <td>7/2/2016</td>      <td>Park</td>      <td>98</td>      <td>67</td>      <td>72</td>      <td>90.0</td>      <td>0.25</td>      <td>165</td>      <td>41.25</td>      <td>Beach</td>    </tr>    <tr>      <th>2</th>      <td>7/3/2016</td>      <td>Park</td>      <td>110</td>      <td>77</td>      <td>71</td>      <td>104.0</td>      <td>0.25</td>      <td>187</td>      <td>46.75</td>      <td>Beach</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-10e12aa4-8e41-4c4f-91a6-be55e247dea1')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-10e12aa4-8e41-4c4f-91a6-be55e247dea1 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-10e12aa4-8e41-4c4f-91a6-be55e247dea1&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"></span><br><span class="line"><span class="comment"># juice.iloc[:, 0:2]</span></span><br><span class="line">juice.iloc[<span class="number">0</span>:<span class="number">3</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 652 µs, sys: 0 ns, total: 652 µsWall time: 653 µs</code></pre>  <div id="df-3556673a-432a-46c9-b3b9-d55c0796a5c1">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7/1/2016</td>      <td>Park</td>    </tr>    <tr>      <th>1</th>      <td>7/2/2016</td>      <td>Park</td>    </tr>    <tr>      <th>2</th>      <td>7/3/2016</td>      <td>Park</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-3556673a-432a-46c9-b3b9-d55c0796a5c1')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-3556673a-432a-46c9-b3b9-d55c0796a5c1 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-3556673a-432a-46c9-b3b9-d55c0796a5c1&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><ul><li>loc</li><li>라벨 기반!</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"></span><br><span class="line">juice.loc[<span class="number">0</span>:<span class="number">2</span>, [<span class="string">&#x27;Date&#x27;</span>,<span class="string">&#x27;Location&#x27;</span>]]</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 1.56 ms, sys: 0 ns, total: 1.56 msWall time: 1.5 ms</code></pre>  <div id="df-7f178606-9630-45b5-bb8e-006efc9d78d3">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7/1/2016</td>      <td>Park</td>    </tr>    <tr>      <th>1</th>      <td>7/2/2016</td>      <td>Park</td>    </tr>    <tr>      <th>2</th>      <td>7/3/2016</td>      <td>Park</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-7f178606-9630-45b5-bb8e-006efc9d78d3')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-7f178606-9630-45b5-bb8e-006efc9d78d3 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-7f178606-9630-45b5-bb8e-006efc9d78d3&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><ul><li>데이터, 컬럼명 동시에 별도 추출 (iloc만 가능)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice.loc[juice[<span class="string">&#x27;Leaflets&#x27;</span>] &gt;= <span class="number">100</span>, [<span class="string">&#x27;Date&#x27;</span>, <span class="string">&#x27;Location&#x27;</span>]]</span><br></pre></td></tr></table></figure>  <div id="df-f18c55cb-276f-414b-b983-0362c3463c87">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>7/3/2016</td>      <td>Park</td>    </tr>    <tr>      <th>4</th>      <td>7/5/2016</td>      <td>Beach</td>    </tr>    <tr>      <th>7</th>      <td>7/7/2016</td>      <td>Beach</td>    </tr>    <tr>      <th>8</th>      <td>NaN</td>      <td>Beach</td>    </tr>    <tr>      <th>9</th>      <td>7/9/2016</td>      <td>Beach</td>    </tr>    <tr>      <th>10</th>      <td>7/10/2016</td>      <td>Beach</td>    </tr>    <tr>      <th>11</th>      <td>7/11/2016</td>      <td>Beach</td>    </tr>    <tr>      <th>14</th>      <td>7/14/2016</td>      <td>Beach</td>    </tr>    <tr>      <th>15</th>      <td>7/15/2016</td>      <td>Beach</td>    </tr>    <tr>      <th>17</th>      <td>7/17/2016</td>      <td>Beach</td>    </tr>    <tr>      <th>18</th>      <td>7/18/2016</td>      <td>Park</td>    </tr>    <tr>      <th>19</th>      <td>7/19/2016</td>      <td>Park</td>    </tr>    <tr>      <th>22</th>      <td>7/22/2016</td>      <td>Park</td>    </tr>    <tr>      <th>23</th>      <td>7/23/2016</td>      <td>Park</td>    </tr>    <tr>      <th>24</th>      <td>7/24/2016</td>      <td>Park</td>    </tr>    <tr>      <th>25</th>      <td>7/25/2016</td>      <td>Park</td>    </tr>    <tr>      <th>26</th>      <td>7/26/2016</td>      <td>Park</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-f18c55cb-276f-414b-b983-0362c3463c87')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-f18c55cb-276f-414b-b983-0362c3463c87 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-f18c55cb-276f-414b-b983-0362c3463c87&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice.loc[juice[<span class="string">&#x27;Leaflets&#x27;</span>] &gt;= <span class="number">100</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-70-46f78a7ec2bf&gt; in &lt;module&gt;()----&gt; 1 juice.loc[juice[&#39;Leaflets&#39;] &gt;= 100, 0:2]/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py in __getitem__(self, key)    923                 with suppress(KeyError, IndexError):    924                     return self.obj._get_value(*key, takeable=self._takeable)--&gt; 925             return self._getitem_tuple(key)    926         else:    927             # we by definition only have the 0th axis/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py in _getitem_tuple(self, tup)   1107             return self._multi_take(tup)   1108 -&gt; 1109         return self._getitem_tuple_same_dim(tup)   1110    1111     def _get_label(self, label, axis: int):/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py in _getitem_tuple_same_dim(self, tup)    804                 continue    805 --&gt; 806             retval = getattr(retval, self.name)._getitem_axis(key, axis=i)    807             # We should never have retval.ndim &lt; self.ndim, as that should    808             #  be handled by the _getitem_lowerdim call above./usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py in _getitem_axis(self, key, axis)   1140         if isinstance(key, slice):   1141             self._validate_key(key, axis)-&gt; 1142             return self._get_slice_axis(key, axis=axis)   1143         elif com.is_bool_indexer(key):   1144             return self._getbool_axis(key, axis=axis)/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py in _get_slice_axis(self, slice_obj, axis)   1174    1175         labels = obj._get_axis(axis)-&gt; 1176         indexer = labels.slice_indexer(slice_obj.start, slice_obj.stop, slice_obj.step)   1177    1178         if isinstance(indexer, slice):/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py in slice_indexer(self, start, end, step, kind)   5683         slice(1, 3, None)   5684         &quot;&quot;&quot;-&gt; 5685         start_slice, end_slice = self.slice_locs(start, end, step=step)   5686    5687         # return a slice/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py in slice_locs(self, start, end, step, kind)   5885         start_slice = None   5886         if start is not None:-&gt; 5887             start_slice = self.get_slice_bound(start, &quot;left&quot;)   5888         if start_slice is None:   5889             start_slice = 0/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py in get_slice_bound(self, label, side, kind)   5795         # For datetime indices label may be a string that has to be converted   5796         # to datetime boundary according to its resolution.-&gt; 5797         label = self._maybe_cast_slice_bound(label, side)   5798    5799         # we need to look up the label/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py in _maybe_cast_slice_bound(self, label, side, kind)   5747         # reject them, if index does not contain label   5748         if (is_float(label) or is_integer(label)) and label not in self._values:-&gt; 5749             raise self._invalid_indexer(&quot;slice&quot;, label)   5750    5751         return labelTypeError: cannot do slice indexing on Index with these indexers [0] of type int</code></pre><h2 id="정렬"><a href="#정렬" class="headerlink" title="정렬"></a>정렬</h2><ul><li>sort.values()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice.sort_values(by = [<span class="string">&#x27;Revenue&#x27;</span>]).head(<span class="number">3</span>) <span class="comment"># 오름차순</span></span><br></pre></td></tr></table></figure>  <div id="df-8cc684a9-4a06-4feb-934c-53ece2672c41">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>      <th>Sold</th>      <th>Revenue</th>      <th>location</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7/1/2016</td>      <td>Park</td>      <td>97</td>      <td>67</td>      <td>70</td>      <td>90.0</td>      <td>0.25</td>      <td>164</td>      <td>41.00</td>      <td>Beach</td>    </tr>    <tr>      <th>1</th>      <td>7/2/2016</td>      <td>Park</td>      <td>98</td>      <td>67</td>      <td>72</td>      <td>90.0</td>      <td>0.25</td>      <td>165</td>      <td>41.25</td>      <td>Beach</td>    </tr>    <tr>      <th>6</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>      <td>172</td>      <td>43.00</td>      <td>Beach</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-8cc684a9-4a06-4feb-934c-53ece2672c41')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-8cc684a9-4a06-4feb-934c-53ece2672c41 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-8cc684a9-4a06-4feb-934c-53ece2672c41&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice.sort_values(by = [<span class="string">&#x27;Revenue&#x27;</span>], ascending=<span class="literal">False</span>).head(<span class="number">3</span>) <span class="comment"># 내림차순</span></span><br></pre></td></tr></table></figure>  <div id="df-e6dc6ec1-85e1-4d62-a618-1841af7f4df7">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>      <th>Sold</th>      <th>Revenue</th>      <th>location</th>    </tr>  </thead>  <tbody>    <tr>      <th>25</th>      <td>7/25/2016</td>      <td>Park</td>      <td>156</td>      <td>113</td>      <td>84</td>      <td>135.0</td>      <td>0.50</td>      <td>269</td>      <td>134.50</td>      <td>Beach</td>    </tr>    <tr>      <th>18</th>      <td>7/18/2016</td>      <td>Park</td>      <td>131</td>      <td>92</td>      <td>81</td>      <td>122.0</td>      <td>0.50</td>      <td>223</td>      <td>111.50</td>      <td>Beach</td>    </tr>    <tr>      <th>26</th>      <td>7/26/2016</td>      <td>Park</td>      <td>176</td>      <td>129</td>      <td>83</td>      <td>158.0</td>      <td>0.35</td>      <td>305</td>      <td>106.75</td>      <td>Beach</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-e6dc6ec1-85e1-4d62-a618-1841af7f4df7')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-e6dc6ec1-85e1-4d62-a618-1841af7f4df7 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-e6dc6ec1-85e1-4d62-a618-1841af7f4df7&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice.sort_values(by = [<span class="string">&#x27;Price&#x27;</span>, <span class="string">&#x27;Temperature&#x27;</span>], ascending=<span class="literal">False</span>) <span class="comment"># 그룹화(0.5일때 나열, 0.35일때 나열)</span></span><br></pre></td></tr></table></figure>  <div id="df-1b835c37-2512-40ad-b58d-8bb74607a0ee">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>      <th>Sold</th>      <th>Revenue</th>      <th>location</th>    </tr>  </thead>  <tbody>    <tr>      <th>25</th>      <td>7/25/2016</td>      <td>Park</td>      <td>156</td>      <td>113</td>      <td>84</td>      <td>135.0</td>      <td>0.50</td>      <td>269</td>      <td>134.50</td>      <td>Beach</td>    </tr>    <tr>      <th>24</th>      <td>7/24/2016</td>      <td>Park</td>      <td>121</td>      <td>82</td>      <td>82</td>      <td>117.0</td>      <td>0.50</td>      <td>203</td>      <td>101.50</td>      <td>Beach</td>    </tr>    <tr>      <th>18</th>      <td>7/18/2016</td>      <td>Park</td>      <td>131</td>      <td>92</td>      <td>81</td>      <td>122.0</td>      <td>0.50</td>      <td>223</td>      <td>111.50</td>      <td>Beach</td>    </tr>    <tr>      <th>23</th>      <td>7/23/2016</td>      <td>Park</td>      <td>120</td>      <td>82</td>      <td>81</td>      <td>117.0</td>      <td>0.50</td>      <td>202</td>      <td>101.00</td>      <td>Beach</td>    </tr>    <tr>      <th>22</th>      <td>7/22/2016</td>      <td>Park</td>      <td>112</td>      <td>75</td>      <td>80</td>      <td>108.0</td>      <td>0.50</td>      <td>187</td>      <td>93.50</td>      <td>Beach</td>    </tr>    <tr>      <th>19</th>      <td>7/19/2016</td>      <td>Park</td>      <td>122</td>      <td>85</td>      <td>78</td>      <td>113.0</td>      <td>0.50</td>      <td>207</td>      <td>103.50</td>      <td>Beach</td>    </tr>    <tr>      <th>17</th>      <td>7/17/2016</td>      <td>Beach</td>      <td>115</td>      <td>76</td>      <td>77</td>      <td>126.0</td>      <td>0.50</td>      <td>191</td>      <td>95.50</td>      <td>Beach</td>    </tr>    <tr>      <th>21</th>      <td>7/21/2016</td>      <td>Park</td>      <td>83</td>      <td>50</td>      <td>77</td>      <td>90.0</td>      <td>0.50</td>      <td>133</td>      <td>66.50</td>      <td>Beach</td>    </tr>    <tr>      <th>15</th>      <td>7/15/2016</td>      <td>Beach</td>      <td>98</td>      <td>62</td>      <td>75</td>      <td>108.0</td>      <td>0.50</td>      <td>160</td>      <td>80.00</td>      <td>Beach</td>    </tr>    <tr>      <th>16</th>      <td>7/16/2016</td>      <td>Beach</td>      <td>81</td>      <td>50</td>      <td>74</td>      <td>90.0</td>      <td>0.50</td>      <td>131</td>      <td>65.50</td>      <td>Beach</td>    </tr>    <tr>      <th>20</th>      <td>7/20/2016</td>      <td>Park</td>      <td>71</td>      <td>42</td>      <td>70</td>      <td>NaN</td>      <td>0.50</td>      <td>113</td>      <td>56.50</td>      <td>Beach</td>    </tr>    <tr>      <th>26</th>      <td>7/26/2016</td>      <td>Park</td>      <td>176</td>      <td>129</td>      <td>83</td>      <td>158.0</td>      <td>0.35</td>      <td>305</td>      <td>106.75</td>      <td>Beach</td>    </tr>    <tr>      <th>28</th>      <td>7/28/2016</td>      <td>Park</td>      <td>96</td>      <td>63</td>      <td>82</td>      <td>90.0</td>      <td>0.35</td>      <td>159</td>      <td>55.65</td>      <td>Beach</td>    </tr>    <tr>      <th>30</th>      <td>7/30/2016</td>      <td>Beach</td>      <td>88</td>      <td>57</td>      <td>82</td>      <td>81.0</td>      <td>0.35</td>      <td>145</td>      <td>50.75</td>      <td>Beach</td>    </tr>    <tr>      <th>31</th>      <td>7/31/2016</td>      <td>Beach</td>      <td>76</td>      <td>47</td>      <td>82</td>      <td>68.0</td>      <td>0.35</td>      <td>123</td>      <td>43.05</td>      <td>Beach</td>    </tr>    <tr>      <th>29</th>      <td>7/29/2016</td>      <td>Park</td>      <td>100</td>      <td>66</td>      <td>81</td>      <td>95.0</td>      <td>0.35</td>      <td>166</td>      <td>58.10</td>      <td>Beach</td>    </tr>    <tr>      <th>27</th>      <td>7/27/2016</td>      <td>Park</td>      <td>104</td>      <td>68</td>      <td>80</td>      <td>99.0</td>      <td>0.35</td>      <td>172</td>      <td>60.20</td>      <td>Beach</td>    </tr>    <tr>      <th>12</th>      <td>7/12/2016</td>      <td>Beach</td>      <td>130</td>      <td>95</td>      <td>84</td>      <td>99.0</td>      <td>0.25</td>      <td>225</td>      <td>56.25</td>      <td>Beach</td>    </tr>    <tr>      <th>11</th>      <td>7/11/2016</td>      <td>Beach</td>      <td>162</td>      <td>120</td>      <td>83</td>      <td>135.0</td>      <td>0.25</td>      <td>282</td>      <td>70.50</td>      <td>Beach</td>    </tr>    <tr>      <th>5</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>      <td>172</td>      <td>43.00</td>      <td>Beach</td>    </tr>    <tr>      <th>6</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>      <td>172</td>      <td>43.00</td>      <td>Beach</td>    </tr>    <tr>      <th>8</th>      <td>NaN</td>      <td>Beach</td>      <td>123</td>      <td>86</td>      <td>82</td>      <td>113.0</td>      <td>0.25</td>      <td>209</td>      <td>52.25</td>      <td>Beach</td>    </tr>    <tr>      <th>10</th>      <td>7/10/2016</td>      <td>Beach</td>      <td>140</td>      <td>98</td>      <td>82</td>      <td>131.0</td>      <td>0.25</td>      <td>238</td>      <td>59.50</td>      <td>Beach</td>    </tr>    <tr>      <th>7</th>      <td>7/7/2016</td>      <td>Beach</td>      <td>143</td>      <td>101</td>      <td>81</td>      <td>135.0</td>      <td>0.25</td>      <td>244</td>      <td>61.00</td>      <td>Beach</td>    </tr>    <tr>      <th>9</th>      <td>7/9/2016</td>      <td>Beach</td>      <td>134</td>      <td>95</td>      <td>80</td>      <td>126.0</td>      <td>0.25</td>      <td>229</td>      <td>57.25</td>      <td>Beach</td>    </tr>    <tr>      <th>4</th>      <td>7/5/2016</td>      <td>Beach</td>      <td>159</td>      <td>118</td>      <td>78</td>      <td>135.0</td>      <td>0.25</td>      <td>277</td>      <td>69.25</td>      <td>Beach</td>    </tr>    <tr>      <th>14</th>      <td>7/14/2016</td>      <td>Beach</td>      <td>122</td>      <td>85</td>      <td>78</td>      <td>113.0</td>      <td>0.25</td>      <td>207</td>      <td>51.75</td>      <td>Beach</td>    </tr>    <tr>      <th>13</th>      <td>7/13/2016</td>      <td>Beach</td>      <td>109</td>      <td>75</td>      <td>77</td>      <td>99.0</td>      <td>0.25</td>      <td>184</td>      <td>46.00</td>      <td>Beach</td>    </tr>    <tr>      <th>3</th>      <td>7/4/2016</td>      <td>Beach</td>      <td>134</td>      <td>99</td>      <td>76</td>      <td>98.0</td>      <td>0.25</td>      <td>233</td>      <td>58.25</td>      <td>Beach</td>    </tr>    <tr>      <th>1</th>      <td>7/2/2016</td>      <td>Park</td>      <td>98</td>      <td>67</td>      <td>72</td>      <td>90.0</td>      <td>0.25</td>      <td>165</td>      <td>41.25</td>      <td>Beach</td>    </tr>    <tr>      <th>2</th>      <td>7/3/2016</td>      <td>Park</td>      <td>110</td>      <td>77</td>      <td>71</td>      <td>104.0</td>      <td>0.25</td>      <td>187</td>      <td>46.75</td>      <td>Beach</td>    </tr>    <tr>      <th>0</th>      <td>7/1/2016</td>      <td>Park</td>      <td>97</td>      <td>67</td>      <td>70</td>      <td>90.0</td>      <td>0.25</td>      <td>164</td>      <td>41.00</td>      <td>Beach</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-1b835c37-2512-40ad-b58d-8bb74607a0ee')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-1b835c37-2512-40ad-b58d-8bb74607a0ee button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-1b835c37-2512-40ad-b58d-8bb74607a0ee&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Price는 내림차순 , Temperature은 오름차순 </span></span><br><span class="line">juice.sort_values(by = [<span class="string">&#x27;Price&#x27;</span>, <span class="string">&#x27;Temperature&#x27;</span>], ascending=[<span class="literal">False</span>, <span class="literal">True</span>])</span><br></pre></td></tr></table></figure>  <div id="df-50367d11-88b7-4011-923b-a3d85935e6a7">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>      <th>Sold</th>      <th>Revenue</th>      <th>location</th>    </tr>  </thead>  <tbody>    <tr>      <th>20</th>      <td>7/20/2016</td>      <td>Park</td>      <td>71</td>      <td>42</td>      <td>70</td>      <td>NaN</td>      <td>0.50</td>      <td>113</td>      <td>56.50</td>      <td>Beach</td>    </tr>    <tr>      <th>16</th>      <td>7/16/2016</td>      <td>Beach</td>      <td>81</td>      <td>50</td>      <td>74</td>      <td>90.0</td>      <td>0.50</td>      <td>131</td>      <td>65.50</td>      <td>Beach</td>    </tr>    <tr>      <th>15</th>      <td>7/15/2016</td>      <td>Beach</td>      <td>98</td>      <td>62</td>      <td>75</td>      <td>108.0</td>      <td>0.50</td>      <td>160</td>      <td>80.00</td>      <td>Beach</td>    </tr>    <tr>      <th>17</th>      <td>7/17/2016</td>      <td>Beach</td>      <td>115</td>      <td>76</td>      <td>77</td>      <td>126.0</td>      <td>0.50</td>      <td>191</td>      <td>95.50</td>      <td>Beach</td>    </tr>    <tr>      <th>21</th>      <td>7/21/2016</td>      <td>Park</td>      <td>83</td>      <td>50</td>      <td>77</td>      <td>90.0</td>      <td>0.50</td>      <td>133</td>      <td>66.50</td>      <td>Beach</td>    </tr>    <tr>      <th>19</th>      <td>7/19/2016</td>      <td>Park</td>      <td>122</td>      <td>85</td>      <td>78</td>      <td>113.0</td>      <td>0.50</td>      <td>207</td>      <td>103.50</td>      <td>Beach</td>    </tr>    <tr>      <th>22</th>      <td>7/22/2016</td>      <td>Park</td>      <td>112</td>      <td>75</td>      <td>80</td>      <td>108.0</td>      <td>0.50</td>      <td>187</td>      <td>93.50</td>      <td>Beach</td>    </tr>    <tr>      <th>18</th>      <td>7/18/2016</td>      <td>Park</td>      <td>131</td>      <td>92</td>      <td>81</td>      <td>122.0</td>      <td>0.50</td>      <td>223</td>      <td>111.50</td>      <td>Beach</td>    </tr>    <tr>      <th>23</th>      <td>7/23/2016</td>      <td>Park</td>      <td>120</td>      <td>82</td>      <td>81</td>      <td>117.0</td>      <td>0.50</td>      <td>202</td>      <td>101.00</td>      <td>Beach</td>    </tr>    <tr>      <th>24</th>      <td>7/24/2016</td>      <td>Park</td>      <td>121</td>      <td>82</td>      <td>82</td>      <td>117.0</td>      <td>0.50</td>      <td>203</td>      <td>101.50</td>      <td>Beach</td>    </tr>    <tr>      <th>25</th>      <td>7/25/2016</td>      <td>Park</td>      <td>156</td>      <td>113</td>      <td>84</td>      <td>135.0</td>      <td>0.50</td>      <td>269</td>      <td>134.50</td>      <td>Beach</td>    </tr>    <tr>      <th>27</th>      <td>7/27/2016</td>      <td>Park</td>      <td>104</td>      <td>68</td>      <td>80</td>      <td>99.0</td>      <td>0.35</td>      <td>172</td>      <td>60.20</td>      <td>Beach</td>    </tr>    <tr>      <th>29</th>      <td>7/29/2016</td>      <td>Park</td>      <td>100</td>      <td>66</td>      <td>81</td>      <td>95.0</td>      <td>0.35</td>      <td>166</td>      <td>58.10</td>      <td>Beach</td>    </tr>    <tr>      <th>28</th>      <td>7/28/2016</td>      <td>Park</td>      <td>96</td>      <td>63</td>      <td>82</td>      <td>90.0</td>      <td>0.35</td>      <td>159</td>      <td>55.65</td>      <td>Beach</td>    </tr>    <tr>      <th>30</th>      <td>7/30/2016</td>      <td>Beach</td>      <td>88</td>      <td>57</td>      <td>82</td>      <td>81.0</td>      <td>0.35</td>      <td>145</td>      <td>50.75</td>      <td>Beach</td>    </tr>    <tr>      <th>31</th>      <td>7/31/2016</td>      <td>Beach</td>      <td>76</td>      <td>47</td>      <td>82</td>      <td>68.0</td>      <td>0.35</td>      <td>123</td>      <td>43.05</td>      <td>Beach</td>    </tr>    <tr>      <th>26</th>      <td>7/26/2016</td>      <td>Park</td>      <td>176</td>      <td>129</td>      <td>83</td>      <td>158.0</td>      <td>0.35</td>      <td>305</td>      <td>106.75</td>      <td>Beach</td>    </tr>    <tr>      <th>0</th>      <td>7/1/2016</td>      <td>Park</td>      <td>97</td>      <td>67</td>      <td>70</td>      <td>90.0</td>      <td>0.25</td>      <td>164</td>      <td>41.00</td>      <td>Beach</td>    </tr>    <tr>      <th>2</th>      <td>7/3/2016</td>      <td>Park</td>      <td>110</td>      <td>77</td>      <td>71</td>      <td>104.0</td>      <td>0.25</td>      <td>187</td>      <td>46.75</td>      <td>Beach</td>    </tr>    <tr>      <th>1</th>      <td>7/2/2016</td>      <td>Park</td>      <td>98</td>      <td>67</td>      <td>72</td>      <td>90.0</td>      <td>0.25</td>      <td>165</td>      <td>41.25</td>      <td>Beach</td>    </tr>    <tr>      <th>3</th>      <td>7/4/2016</td>      <td>Beach</td>      <td>134</td>      <td>99</td>      <td>76</td>      <td>98.0</td>      <td>0.25</td>      <td>233</td>      <td>58.25</td>      <td>Beach</td>    </tr>    <tr>      <th>13</th>      <td>7/13/2016</td>      <td>Beach</td>      <td>109</td>      <td>75</td>      <td>77</td>      <td>99.0</td>      <td>0.25</td>      <td>184</td>      <td>46.00</td>      <td>Beach</td>    </tr>    <tr>      <th>4</th>      <td>7/5/2016</td>      <td>Beach</td>      <td>159</td>      <td>118</td>      <td>78</td>      <td>135.0</td>      <td>0.25</td>      <td>277</td>      <td>69.25</td>      <td>Beach</td>    </tr>    <tr>      <th>14</th>      <td>7/14/2016</td>      <td>Beach</td>      <td>122</td>      <td>85</td>      <td>78</td>      <td>113.0</td>      <td>0.25</td>      <td>207</td>      <td>51.75</td>      <td>Beach</td>    </tr>    <tr>      <th>9</th>      <td>7/9/2016</td>      <td>Beach</td>      <td>134</td>      <td>95</td>      <td>80</td>      <td>126.0</td>      <td>0.25</td>      <td>229</td>      <td>57.25</td>      <td>Beach</td>    </tr>    <tr>      <th>7</th>      <td>7/7/2016</td>      <td>Beach</td>      <td>143</td>      <td>101</td>      <td>81</td>      <td>135.0</td>      <td>0.25</td>      <td>244</td>      <td>61.00</td>      <td>Beach</td>    </tr>    <tr>      <th>5</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>      <td>172</td>      <td>43.00</td>      <td>Beach</td>    </tr>    <tr>      <th>6</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>      <td>172</td>      <td>43.00</td>      <td>Beach</td>    </tr>    <tr>      <th>8</th>      <td>NaN</td>      <td>Beach</td>      <td>123</td>      <td>86</td>      <td>82</td>      <td>113.0</td>      <td>0.25</td>      <td>209</td>      <td>52.25</td>      <td>Beach</td>    </tr>    <tr>      <th>10</th>      <td>7/10/2016</td>      <td>Beach</td>      <td>140</td>      <td>98</td>      <td>82</td>      <td>131.0</td>      <td>0.25</td>      <td>238</td>      <td>59.50</td>      <td>Beach</td>    </tr>    <tr>      <th>11</th>      <td>7/11/2016</td>      <td>Beach</td>      <td>162</td>      <td>120</td>      <td>83</td>      <td>135.0</td>      <td>0.25</td>      <td>282</td>      <td>70.50</td>      <td>Beach</td>    </tr>    <tr>      <th>12</th>      <td>7/12/2016</td>      <td>Beach</td>      <td>130</td>      <td>95</td>      <td>84</td>      <td>99.0</td>      <td>0.25</td>      <td>225</td>      <td>56.25</td>      <td>Beach</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-50367d11-88b7-4011-923b-a3d85935e6a7')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-50367d11-88b7-4011-923b-a3d85935e6a7 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-50367d11-88b7-4011-923b-a3d85935e6a7&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정보를 업데이트 및 정렬을 할떄 reset_index 사용</span></span><br><span class="line">juice2 = juice.sort_values(by = [<span class="string">&#x27;Price&#x27;</span>, <span class="string">&#x27;Temperature&#x27;</span>], ascending=[<span class="literal">False</span>, <span class="literal">True</span>]).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">juice2</span><br></pre></td></tr></table></figure>  <div id="df-5bba3bc3-d034-4d0b-894c-29ef5ffadfa0">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Location</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>      <th>Sold</th>      <th>Revenue</th>      <th>location</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7/20/2016</td>      <td>Park</td>      <td>71</td>      <td>42</td>      <td>70</td>      <td>NaN</td>      <td>0.50</td>      <td>113</td>      <td>56.50</td>      <td>Beach</td>    </tr>    <tr>      <th>1</th>      <td>7/16/2016</td>      <td>Beach</td>      <td>81</td>      <td>50</td>      <td>74</td>      <td>90.0</td>      <td>0.50</td>      <td>131</td>      <td>65.50</td>      <td>Beach</td>    </tr>    <tr>      <th>2</th>      <td>7/15/2016</td>      <td>Beach</td>      <td>98</td>      <td>62</td>      <td>75</td>      <td>108.0</td>      <td>0.50</td>      <td>160</td>      <td>80.00</td>      <td>Beach</td>    </tr>    <tr>      <th>3</th>      <td>7/17/2016</td>      <td>Beach</td>      <td>115</td>      <td>76</td>      <td>77</td>      <td>126.0</td>      <td>0.50</td>      <td>191</td>      <td>95.50</td>      <td>Beach</td>    </tr>    <tr>      <th>4</th>      <td>7/21/2016</td>      <td>Park</td>      <td>83</td>      <td>50</td>      <td>77</td>      <td>90.0</td>      <td>0.50</td>      <td>133</td>      <td>66.50</td>      <td>Beach</td>    </tr>    <tr>      <th>5</th>      <td>7/19/2016</td>      <td>Park</td>      <td>122</td>      <td>85</td>      <td>78</td>      <td>113.0</td>      <td>0.50</td>      <td>207</td>      <td>103.50</td>      <td>Beach</td>    </tr>    <tr>      <th>6</th>      <td>7/22/2016</td>      <td>Park</td>      <td>112</td>      <td>75</td>      <td>80</td>      <td>108.0</td>      <td>0.50</td>      <td>187</td>      <td>93.50</td>      <td>Beach</td>    </tr>    <tr>      <th>7</th>      <td>7/18/2016</td>      <td>Park</td>      <td>131</td>      <td>92</td>      <td>81</td>      <td>122.0</td>      <td>0.50</td>      <td>223</td>      <td>111.50</td>      <td>Beach</td>    </tr>    <tr>      <th>8</th>      <td>7/23/2016</td>      <td>Park</td>      <td>120</td>      <td>82</td>      <td>81</td>      <td>117.0</td>      <td>0.50</td>      <td>202</td>      <td>101.00</td>      <td>Beach</td>    </tr>    <tr>      <th>9</th>      <td>7/24/2016</td>      <td>Park</td>      <td>121</td>      <td>82</td>      <td>82</td>      <td>117.0</td>      <td>0.50</td>      <td>203</td>      <td>101.50</td>      <td>Beach</td>    </tr>    <tr>      <th>10</th>      <td>7/25/2016</td>      <td>Park</td>      <td>156</td>      <td>113</td>      <td>84</td>      <td>135.0</td>      <td>0.50</td>      <td>269</td>      <td>134.50</td>      <td>Beach</td>    </tr>    <tr>      <th>11</th>      <td>7/27/2016</td>      <td>Park</td>      <td>104</td>      <td>68</td>      <td>80</td>      <td>99.0</td>      <td>0.35</td>      <td>172</td>      <td>60.20</td>      <td>Beach</td>    </tr>    <tr>      <th>12</th>      <td>7/29/2016</td>      <td>Park</td>      <td>100</td>      <td>66</td>      <td>81</td>      <td>95.0</td>      <td>0.35</td>      <td>166</td>      <td>58.10</td>      <td>Beach</td>    </tr>    <tr>      <th>13</th>      <td>7/28/2016</td>      <td>Park</td>      <td>96</td>      <td>63</td>      <td>82</td>      <td>90.0</td>      <td>0.35</td>      <td>159</td>      <td>55.65</td>      <td>Beach</td>    </tr>    <tr>      <th>14</th>      <td>7/30/2016</td>      <td>Beach</td>      <td>88</td>      <td>57</td>      <td>82</td>      <td>81.0</td>      <td>0.35</td>      <td>145</td>      <td>50.75</td>      <td>Beach</td>    </tr>    <tr>      <th>15</th>      <td>7/31/2016</td>      <td>Beach</td>      <td>76</td>      <td>47</td>      <td>82</td>      <td>68.0</td>      <td>0.35</td>      <td>123</td>      <td>43.05</td>      <td>Beach</td>    </tr>    <tr>      <th>16</th>      <td>7/26/2016</td>      <td>Park</td>      <td>176</td>      <td>129</td>      <td>83</td>      <td>158.0</td>      <td>0.35</td>      <td>305</td>      <td>106.75</td>      <td>Beach</td>    </tr>    <tr>      <th>17</th>      <td>7/1/2016</td>      <td>Park</td>      <td>97</td>      <td>67</td>      <td>70</td>      <td>90.0</td>      <td>0.25</td>      <td>164</td>      <td>41.00</td>      <td>Beach</td>    </tr>    <tr>      <th>18</th>      <td>7/3/2016</td>      <td>Park</td>      <td>110</td>      <td>77</td>      <td>71</td>      <td>104.0</td>      <td>0.25</td>      <td>187</td>      <td>46.75</td>      <td>Beach</td>    </tr>    <tr>      <th>19</th>      <td>7/2/2016</td>      <td>Park</td>      <td>98</td>      <td>67</td>      <td>72</td>      <td>90.0</td>      <td>0.25</td>      <td>165</td>      <td>41.25</td>      <td>Beach</td>    </tr>    <tr>      <th>20</th>      <td>7/4/2016</td>      <td>Beach</td>      <td>134</td>      <td>99</td>      <td>76</td>      <td>98.0</td>      <td>0.25</td>      <td>233</td>      <td>58.25</td>      <td>Beach</td>    </tr>    <tr>      <th>21</th>      <td>7/13/2016</td>      <td>Beach</td>      <td>109</td>      <td>75</td>      <td>77</td>      <td>99.0</td>      <td>0.25</td>      <td>184</td>      <td>46.00</td>      <td>Beach</td>    </tr>    <tr>      <th>22</th>      <td>7/5/2016</td>      <td>Beach</td>      <td>159</td>      <td>118</td>      <td>78</td>      <td>135.0</td>      <td>0.25</td>      <td>277</td>      <td>69.25</td>      <td>Beach</td>    </tr>    <tr>      <th>23</th>      <td>7/14/2016</td>      <td>Beach</td>      <td>122</td>      <td>85</td>      <td>78</td>      <td>113.0</td>      <td>0.25</td>      <td>207</td>      <td>51.75</td>      <td>Beach</td>    </tr>    <tr>      <th>24</th>      <td>7/9/2016</td>      <td>Beach</td>      <td>134</td>      <td>95</td>      <td>80</td>      <td>126.0</td>      <td>0.25</td>      <td>229</td>      <td>57.25</td>      <td>Beach</td>    </tr>    <tr>      <th>25</th>      <td>7/7/2016</td>      <td>Beach</td>      <td>143</td>      <td>101</td>      <td>81</td>      <td>135.0</td>      <td>0.25</td>      <td>244</td>      <td>61.00</td>      <td>Beach</td>    </tr>    <tr>      <th>26</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>      <td>172</td>      <td>43.00</td>      <td>Beach</td>    </tr>    <tr>      <th>27</th>      <td>7/6/2016</td>      <td>Beach</td>      <td>103</td>      <td>69</td>      <td>82</td>      <td>90.0</td>      <td>0.25</td>      <td>172</td>      <td>43.00</td>      <td>Beach</td>    </tr>    <tr>      <th>28</th>      <td>NaN</td>      <td>Beach</td>      <td>123</td>      <td>86</td>      <td>82</td>      <td>113.0</td>      <td>0.25</td>      <td>209</td>      <td>52.25</td>      <td>Beach</td>    </tr>    <tr>      <th>29</th>      <td>7/10/2016</td>      <td>Beach</td>      <td>140</td>      <td>98</td>      <td>82</td>      <td>131.0</td>      <td>0.25</td>      <td>238</td>      <td>59.50</td>      <td>Beach</td>    </tr>    <tr>      <th>30</th>      <td>7/11/2016</td>      <td>Beach</td>      <td>162</td>      <td>120</td>      <td>83</td>      <td>135.0</td>      <td>0.25</td>      <td>282</td>      <td>70.50</td>      <td>Beach</td>    </tr>    <tr>      <th>31</th>      <td>7/12/2016</td>      <td>Beach</td>      <td>130</td>      <td>95</td>      <td>84</td>      <td>99.0</td>      <td>0.25</td>      <td>225</td>      <td>56.25</td>      <td>Beach</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-5bba3bc3-d034-4d0b-894c-29ef5ffadfa0')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-5bba3bc3-d034-4d0b-894c-29ef5ffadfa0 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-5bba3bc3-d034-4d0b-894c-29ef5ffadfa0&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><h1 id="Groupby"><a href="#Groupby" class="headerlink" title="Groupby ()"></a>Groupby ()</h1><ul><li>데이터 요약(피벗테이블)</li><li>R dplyr groupby() %&gt;% summarize()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">juice.groupby(by = <span class="string">&#x27;Location&#x27;</span>).count()</span><br></pre></td></tr></table></figure>  <div id="df-ff4cd12f-13fc-47fd-8d42-3adcf0dba627">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Lemon</th>      <th>Orange</th>      <th>Temperature</th>      <th>Leaflets</th>      <th>Price</th>      <th>Sold</th>      <th>Revenue</th>      <th>location</th>    </tr>    <tr>      <th>Location</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Beach</th>      <td>16</td>      <td>17</td>      <td>17</td>      <td>17</td>      <td>17</td>      <td>17</td>      <td>17</td>      <td>17</td>      <td>17</td>    </tr>    <tr>      <th>Park</th>      <td>15</td>      <td>15</td>      <td>15</td>      <td>15</td>      <td>14</td>      <td>15</td>      <td>15</td>      <td>15</td>      <td>15</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-ff4cd12f-13fc-47fd-8d42-3adcf0dba627')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-ff4cd12f-13fc-47fd-8d42-3adcf0dba627 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-ff4cd12f-13fc-47fd-8d42-3adcf0dba627&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">juice.groupby([<span class="string">&#x27;Location&#x27;</span>])[<span class="string">&#x27;Revenue&#x27;</span>].agg([<span class="built_in">max</span>, <span class="built_in">min</span>, <span class="built_in">sum</span>, np.mean])</span><br></pre></td></tr></table></figure>  <div id="df-615cb7b2-8595-47fc-afd8-67653b7f8d14">    <div class="colab-df-container">      <div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>max</th>      <th>min</th>      <th>sum</th>      <th>mean</th>    </tr>    <tr>      <th>Location</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Beach</th>      <td>95.5</td>      <td>43.0</td>      <td>1002.8</td>      <td>58.988235</td>    </tr>    <tr>      <th>Park</th>      <td>134.5</td>      <td>41.0</td>      <td>1178.2</td>      <td>78.546667</td>    </tr>  </tbody></table></div>      <button class="colab-df-convert" onclick="convertToInteractive('df-615cb7b2-8595-47fc-afd8-67653b7f8d14')"              title="Convert this dataframe to an interactive table."              style="display:none;"><p>  &lt;svg xmlns&#x3D;”<a href="http://www.w3.org/2000/svg&quot;">http://www.w3.org/2000/svg&quot;</a> height&#x3D;”24px”viewBox&#x3D;”0 0 24 24”<br>       width&#x3D;”24px”&gt;<br>    <path d="M0 0h24v24H0V0z" fill="none"/><br>    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"/><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"/><br>  </svg><br>      </button></p>  <style>    .colab-df-container {      display:flex;      flex-wrap:wrap;      gap: 12px;    }    .colab-df-convert {      background-color: #E8F0FE;      border: none;      border-radius: 50%;      cursor: pointer;      display: none;      fill: #1967D2;      height: 32px;      padding: 0 0 0 0;      width: 32px;    }    .colab-df-convert:hover {      background-color: #E2EBFA;      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);      fill: #174EA6;    }    [theme=dark] .colab-df-convert {      background-color: #3B4455;      fill: #D2E3FC;    }    [theme=dark] .colab-df-convert:hover {      background-color: #434B5C;      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));      fill: #FFFFFF;    }  </style><pre><code>  &lt;script&gt;    const buttonEl =      document.querySelector(&#39;#df-615cb7b2-8595-47fc-afd8-67653b7f8d14 button.colab-df-convert&#39;);    buttonEl.style.display =      google.colab.kernel.accessAllowed ? &#39;block&#39; : &#39;none&#39;;    async function convertToInteractive(key) &#123;      const element = document.querySelector(&#39;#df-615cb7b2-8595-47fc-afd8-67653b7f8d14&#39;);      const dataTable =        await google.colab.kernel.invokeFunction(&#39;convertToInteractive&#39;,                                                 [key], &#123;&#125;);      if (!dataTable) return;      const docLinkHtml = &#39;Like what you see? Visit the &#39; +        &#39;&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;&#39;        + &#39; to learn more about interactive tables.&#39;;      element.innerHTML = &#39;&#39;;      dataTable[&#39;output_type&#39;] = &#39;display_data&#39;;      await google.colab.output.renderOutput(dataTable, element);      const docLink = document.createElement(&#39;div&#39;);      docLink.innerHTML = docLinkHtml;      element.appendChild(docLink);    &#125;  &lt;/script&gt;&lt;/div&gt;</code></pre>  </div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;라이브러리-불러오기&quot;&gt;&lt;a href=&quot;#라이브러리-불러오기&quot; class=&quot;headerlink&quot; title=&quot;라이브러리 불러오기&quot;&gt;&lt;/a&gt;라이브러리 불러오기&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>파이썬 넘파이 1</title>
    <link href="https://ahnduhong.github.io/2022/03/23/numpy_01/"/>
    <id>https://ahnduhong.github.io/2022/03/23/numpy_01/</id>
    <published>2022-03-23T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.966Z</updated>
    
    <content type="html"><![CDATA[<ul><li>파이썬 라이브러리 설치 방법 (vs R)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># R install.pakages(&quot;패키지명&quot;)</span></span><br><span class="line"><span class="comment"># 파이썬 라이브러리 설치 코드에서 실행 (x)</span></span><br><span class="line"><span class="comment"># 터미널에서 설치</span></span><br><span class="line"><span class="comment"># 방법 1. conda 설치</span></span><br><span class="line"><span class="comment"># --&gt; 아나콘다 설치 후, conda 설치 (데이터 과학)</span></span><br><span class="line"><span class="comment"># 방법 2. pip 설치 (개발 + 데이터과학 + 그외)</span></span><br><span class="line"><span class="comment"># --&gt; 아나콘다 설치 안함 / 파이썬만 설치</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git bash 열고, pip install numpy</span></span><br><span class="line"><span class="comment"># pip install numpy</span></span><br></pre></td></tr></table></figure><h3 id="NumPy-라이브-불러오기"><a href="#NumPy-라이브-불러오기" class="headerlink" title="NumPy 라이브 불러오기"></a>NumPy 라이브 불러오기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="built_in">print</span>(numpy.__version__)</span><br></pre></td></tr></table></figure><pre><code>1.21.5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span>(np.__version__)</span><br></pre></td></tr></table></figure><pre><code>1.21.5</code></pre><h2 id="배열로-변환"><a href="#배열로-변환" class="headerlink" title="배열로 변환"></a>배열로 변환</h2><ul><li>1부터 10까지의 리스트를 만든다.</li><li>NumPy 배열로 변환해서 저장한다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">temp = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">arr = np.array(temp)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(temp)</span><br></pre></td></tr></table></figure><pre><code>[ 1  2  3  4  5  6  7  8  9 10][1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(arr))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;list&#39;&gt;&lt;class &#39;numpy.ndarray&#39;&gt;</code></pre><ul><li>arr 배열 숫자 5 출력</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">4</span>:<span class="number">8</span>]</span><br></pre></td></tr></table></figure><pre><code>array([5, 6, 7, 8])</code></pre><ul><li>NumPy를 사용하여 기초 통계 함수를 사용한다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.mean(arr)</span><br><span class="line">np.<span class="built_in">sum</span>(arr)</span><br><span class="line">np.median(arr)</span><br><span class="line">np.std(arr)</span><br></pre></td></tr></table></figure><pre><code>2.8722813232690143</code></pre><h1 id="사칙연산"><a href="#사칙연산" class="headerlink" title="사칙연산"></a>사칙연산</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">math_scores = [<span class="number">90</span>, <span class="number">80</span>, <span class="number">88</span>]</span><br><span class="line">english_scores = [<span class="number">80</span>, <span class="number">70</span>, <span class="number">90</span>]</span><br><span class="line"></span><br><span class="line">total_scores = math_scores + english_scores</span><br><span class="line">total_scores</span><br></pre></td></tr></table></figure><pre><code>[90, 80, 88, 80, 70, 90]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">math_scores = [<span class="number">90</span>, <span class="number">80</span>, <span class="number">88</span>]</span><br><span class="line">english_scores = [<span class="number">80</span>, <span class="number">70</span>, <span class="number">90</span>]</span><br><span class="line"></span><br><span class="line">math_arr = np.array(math_scores)</span><br><span class="line">english_arr = np.array(english_scores)</span><br><span class="line"></span><br><span class="line">total_scores = math_arr + english_arr</span><br><span class="line">total_scores</span><br></pre></td></tr></table></figure><pre><code>array([170, 150, 178])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">min</span>(total_scores)</span><br></pre></td></tr></table></figure><pre><code>150</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">max</span>(total_scores)</span><br></pre></td></tr></table></figure><pre><code>178</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">math_scores = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">english_scores = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">math_arr = np.array(math_scores)</span><br><span class="line">english_arr = np.array(english_scores)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사칙연산</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;덧셈:&quot;</span>, np.add(math_arr, english_arr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;뺄셈:&quot;</span>, np.subtract(math_arr, english_arr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;곱셈:&quot;</span>, np.multiply(math_arr, english_arr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;나눗셈:&quot;</span>, np.divide(math_arr, english_arr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;거듭제곱:&quot;</span>, np.power(math_arr, english_arr))</span><br></pre></td></tr></table></figure><pre><code>덧셈: [3 5 7]뺄셈: [1 1 1]곱셈: [ 2  6 12]나눗셈: [2.         1.5        1.33333333]거듭제곱: [ 2  9 64]</code></pre><h2 id="배열의-생성"><a href="#배열의-생성" class="headerlink" title="배열의 생성"></a>배열의 생성</h2><ul><li>0차원부터 3차원까지 생성하는 방법</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.array(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(temp_arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp_arr))</span><br><span class="line"><span class="built_in">print</span>(temp_arr.shape)</span><br></pre></td></tr></table></figure><pre><code>20&lt;class &#39;numpy.ndarray&#39;&gt;()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1차원 배열</span></span><br><span class="line">temp_arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(temp_arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp_arr))</span><br><span class="line"><span class="built_in">print</span>(temp_arr.shape)</span><br><span class="line"><span class="built_in">print</span>(temp_arr.ndim) <span class="comment"># 몇 차원인지 알아보는 법</span></span><br></pre></td></tr></table></figure><pre><code>[1 2 3]&lt;class &#39;numpy.ndarray&#39;&gt;(3,)1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2차원 배열</span></span><br><span class="line">temp_arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(temp_arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp_arr))</span><br><span class="line"><span class="built_in">print</span>(temp_arr.shape) <span class="comment"># 2 * 3 배열이다</span></span><br><span class="line"><span class="built_in">print</span>(temp_arr.ndim)</span><br></pre></td></tr></table></figure><pre><code>[[1 2 3] [4 5 6]]&lt;class &#39;numpy.ndarray&#39;&gt;(2, 3)2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3차원 배열</span></span><br><span class="line">temp_arr = np.array([[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]])</span><br><span class="line"><span class="built_in">print</span>(temp_arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp_arr))</span><br><span class="line"><span class="built_in">print</span>(temp_arr.shape)</span><br><span class="line"><span class="built_in">print</span>(temp_arr.ndim)</span><br></pre></td></tr></table></figure><pre><code>[[[1 2 3]  [4 5 6]] [[1 2 3]  [4 5 6]]]&lt;class &#39;numpy.ndarray&#39;&gt;(2, 2, 3)3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], ndmin = <span class="number">2</span>) <span class="comment"># ndmin으로 인해 2차원 배열로 바뀜</span></span><br><span class="line"><span class="built_in">print</span>(temp_arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp_arr))</span><br><span class="line"><span class="built_in">print</span>(temp_arr.shape)</span><br><span class="line"><span class="built_in">print</span>(temp_arr.ndim)</span><br></pre></td></tr></table></figure><pre><code>[[1 2 3 4]]&lt;class &#39;numpy.ndarray&#39;&gt;(1, 4)2</code></pre><h2 id="소수점-정렬"><a href="#소수점-정렬" class="headerlink" title="소수점 정렬"></a>소수점 정렬</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.trunc([-<span class="number">1.23</span>, <span class="number">1.23</span>])</span><br><span class="line">temp_arr <span class="comment"># 소수점 아래 자리가 절삭됨.</span></span><br></pre></td></tr></table></figure><pre><code>array([-1.,  1.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.fix([-<span class="number">1.23</span>, <span class="number">1.23</span>])</span><br><span class="line">temp_arr</span><br></pre></td></tr></table></figure><pre><code>array([-1.,  1.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.around([-<span class="number">1.23789</span>, <span class="number">1.23789</span>], <span class="number">4</span>)</span><br><span class="line">temp_arr</span><br></pre></td></tr></table></figure><pre><code>array([-1.2379,  1.2379])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.<span class="built_in">round</span>([-<span class="number">1.23789</span>, <span class="number">1.23789</span>], <span class="number">4</span>)</span><br><span class="line">temp_arr</span><br></pre></td></tr></table></figure><pre><code>array([-1.2379,  1.2379])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.floor([-<span class="number">1.23789</span>, <span class="number">1.23789</span>]) <span class="comment"># 내림</span></span><br><span class="line">temp_arr</span><br></pre></td></tr></table></figure><pre><code>array([-2.,  1.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.ceil([-<span class="number">1.23789</span>, <span class="number">1.23789</span>]) <span class="comment"># 올림</span></span><br><span class="line">temp_arr</span><br></pre></td></tr></table></figure><pre><code>array([-1.,  2.])</code></pre><ul><li>shape는 axis 축을 설정함</li></ul><h2 id="배열을-생성하는-다양한-방법들"><a href="#배열을-생성하는-다양한-방법들" class="headerlink" title="배열을 생성하는 다양한 방법들"></a>배열을 생성하는 다양한 방법들</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.arange(<span class="number">5</span>)</span><br><span class="line">temp_arr</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.arange(<span class="number">1</span>, <span class="number">11</span>, <span class="number">3</span>)</span><br><span class="line">temp_arr</span><br></pre></td></tr></table></figure><pre><code>array([ 1,  4,  7, 10])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zero_arr = np.zeros((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(zero_arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(zero_arr))</span><br><span class="line"><span class="built_in">print</span>(zero_arr.shape)</span><br><span class="line"><span class="built_in">print</span>(zero_arr.ndim)</span><br><span class="line"><span class="built_in">print</span>(zero_arr.dtype) <span class="comment"># float64 -&gt; 64는 bit</span></span><br></pre></td></tr></table></figure><pre><code>[[0. 0. 0.] [0. 0. 0.]]&lt;class &#39;numpy.ndarray&#39;&gt;(2, 3)2float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.ones((<span class="number">4</span>, <span class="number">5</span>), dtype = <span class="string">&quot;int32&quot;</span>) <span class="comment"># 데이터 타입도 인위적으로 수정 가능</span></span><br><span class="line"><span class="built_in">print</span>(temp_arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp_arr))</span><br><span class="line"><span class="built_in">print</span>(temp_arr.shape)</span><br><span class="line"><span class="built_in">print</span>(temp_arr.ndim)</span><br><span class="line"><span class="built_in">print</span>(temp_arr.dtype)</span><br></pre></td></tr></table></figure><pre><code>[[1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1]]&lt;class &#39;numpy.ndarray&#39;&gt;(4, 5)2int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.ones((<span class="number">2</span>, <span class="number">6</span>), dtype = <span class="string">&quot;int32&quot;</span>)</span><br><span class="line">temp_res_arr = temp_arr.reshape(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment"># (5, 3)을 했을때 cannot reshape array of size 12 into shape (5,3)</span></span><br><span class="line"><span class="built_in">print</span>(temp_res_arr)                   <span class="comment"># 사이즈를 12로 바꾸면 되서 4, 3 또는 3, 4 등 바꿔주면 됨.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp_res_arr))</span><br><span class="line"><span class="built_in">print</span>(temp_res_arr.shape)</span><br><span class="line"><span class="built_in">print</span>(temp_res_arr.ndim)</span><br><span class="line"><span class="built_in">print</span>(temp_res_arr.dtype)</span><br></pre></td></tr></table></figure><pre><code>[[[1 1 1]  [1 1 1]] [[1 1 1]  [1 1 1]]]&lt;class &#39;numpy.ndarray&#39;&gt;(2, 2, 3)3int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.ones((<span class="number">12</span>, <span class="number">12</span>), dtype = <span class="string">&quot;int32&quot;</span>)</span><br><span class="line">temp_res_arr = temp_arr.reshape(<span class="number">5</span>, -<span class="number">1</span>) <span class="comment"># np.ones(12, 12) -&gt; 12*12 = 144 약수가 아니면 error</span></span><br><span class="line"><span class="built_in">print</span>(temp_res_arr) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(temp_res_arr))</span><br><span class="line"><span class="built_in">print</span>(temp_res_arr.shape)</span><br><span class="line"><span class="built_in">print</span>(temp_res_arr.ndim)</span><br><span class="line"><span class="built_in">print</span>(temp_res_arr.dtype)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-60-dfc75cfbf69a&gt; in &lt;module&gt;()      1 temp_arr = np.ones((12, 12), dtype = &quot;int32&quot;)----&gt; 2 temp_res_arr = temp_arr.reshape(5, -1)      3 print(temp_res_arr)      4 print(type(temp_res_arr))      5 print(temp_res_arr.shape)ValueError: cannot reshape array of size 144 into shape (5,newaxis)</code></pre><h2 id="numpy-조건식"><a href="#numpy-조건식" class="headerlink" title="numpy 조건식"></a>numpy 조건식</h2><ul><li>np.where()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.arange(<span class="number">10</span>)</span><br><span class="line">temp_arr</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5보다 작은 값은 원래값으로 반환</span></span><br><span class="line"><span class="comment"># 5보다 큰 값은 원래 값 * 10</span></span><br><span class="line">np.where(temp_arr &lt; <span class="number">5</span>, temp_arr, temp_arr * <span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>array([ 0,  1,  2,  3,  4, 50, 60, 70, 80, 90])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0 - 100 까지의 배열을 만들고, 50보다 작은 값은 곱하기 10, 나머지는 그냥 원래 값으로 반환</span></span><br><span class="line"><span class="comment"># np.where 은 조건식이 하나만 필요할 떄 사용</span></span><br><span class="line">temp_arr = np.arange(<span class="number">101</span>)</span><br><span class="line"><span class="comment"># temp_arr</span></span><br><span class="line">np.where(temp_arr &lt; <span class="number">50</span>, temp_arr * <span class="number">10</span>, temp_arr)</span><br></pre></td></tr></table></figure><pre><code>array([  0,  10,  20,  30,  40,  50,  60,  70,  80,  90, 100, 110, 120,       130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250,       260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380,       390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490,  50,  51,        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,        91,  92,  93,  94,  95,  96,  97,  98,  99, 100])</code></pre><ul><li>np.select()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">temp_arr = np.arange(<span class="number">10</span>)</span><br><span class="line">temp_arr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5보다 큰 값은 곱하기 2, 2보다 작은 값은 더하기 100</span></span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">condlist = [temp_arr &gt; <span class="number">5</span>, temp_arr &lt; <span class="number">2</span>]</span><br><span class="line">choicelist = [temp_arr * <span class="number">2</span>, temp_arr + <span class="number">100</span>]</span><br><span class="line">np.select(condlist, choicelist, default = temp_arr)</span><br></pre></td></tr></table></figure><pre><code>array([100, 101,   2,   3,   4,   5,  12,  14,  16,  18])</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;파이썬 라이브러리 설치 방법 (vs R)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>파이썬 기초 문법 3</title>
    <link href="https://ahnduhong.github.io/2022/03/22/python_grammer03/"/>
    <id>https://ahnduhong.github.io/2022/03/22/python_grammer03/</id>
    <published>2022-03-22T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="클래스를-만드는-목적"><a href="#클래스를-만드는-목적" class="headerlink" title="클래스를 만드는 목적!"></a>클래스를 만드는 목적!</h2><ul><li>코드의 간결화!<ul><li>코드를 재사용!</li></ul></li><li>여러 라이브러리 –&gt; 클래스로 구현이 됨<ul><li>list 클래스, str 클래스, </li><li>객체로 씀</li><li>변수명으로 정의!</li></ul></li><li>여러 클래스들이 모여서 하나의 라이브러리가 됨.<ul><li>장고(django) &#x2F; 웹개발 &#x2F; 머신러닝 &#x2F; 시각화 &#x2F; 데이터 전처리</li></ul></li></ul><h2 id="instance-메서드-생성"><a href="#instance-메서드-생성" class="headerlink" title="instance 메서드 생성"></a>instance 메서드 생성</h2><ul><li>list.append(), list.extend()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:      <span class="comment"># 대문자소문자 입력.</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># class attribute</span></span><br><span class="line">  country = <span class="string">&quot;korean&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># instance attribute</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):   <span class="comment"># def __init__(self) 고정적 default</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line">  <span class="comment"># instance method 정의</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">singing</span>(<span class="params">self,songtitle, sales</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#125; 판매량 &#123;&#125; 된 &#123;&#125;을 노래합니다.&quot;</span>.<span class="built_in">format</span>(self.name, sales, songtitle)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  kim = Person(<span class="string">&quot;Kim&quot;</span>, <span class="number">100</span>)</span><br><span class="line">  lee = Person(<span class="string">&quot;Lee&quot;</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># access class attribute</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;kim은 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(kim.__class__.country))</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;lee는 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(lee.__class__.country))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># call instance</span></span><br><span class="line">  <span class="built_in">print</span>(kim.singing(<span class="string">&quot;A&quot;</span>, <span class="number">10</span>))</span><br><span class="line">  <span class="built_in">print</span>(lee.singing(<span class="string">&quot;B&quot;</span>, <span class="number">200</span>))</span><br></pre></td></tr></table></figure><pre><code>kim은 koreanlee는 koreanKim 판매량 10 된 A을 노래합니다.Lee 판매량 200 된 B을 노래합니다.</code></pre><h2 id="클래스-상속"><a href="#클래스-상속" class="headerlink" title="클래스 상속"></a>클래스 상속</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:</span><br><span class="line">  <span class="comment"># instance attribute</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line">  <span class="comment"># instance method 정의</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">whoAmI</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; I am Parent!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">singing</span>(<span class="params">self,songtitle</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#125; &#123;&#125;을 노래합니다.&quot;</span>.<span class="built_in">format</span>(self.name, songtitle)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dancing</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#125; 현재 춤을 춥니다.&quot;</span>.<span class="built_in">format</span>(self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">    <span class="comment"># super() function</span></span><br><span class="line">    <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Child Class is ON&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">whoAmI</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am Child&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">studying</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am Fast Runner&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  child_kim = Child(<span class="string">&quot;kim&quot;</span>, <span class="number">15</span>)</span><br><span class="line">  parent_kim = Parent(<span class="string">&quot;kim&quot;</span>, <span class="number">45</span>)</span><br><span class="line">  <span class="built_in">print</span>(child_kim.dancing())</span><br><span class="line">  <span class="built_in">print</span>(child_kim.singing(<span class="string">&quot;연애&quot;</span>))</span><br><span class="line">  <span class="comment">#print(parent_kim.studying()) # AttributeError: &#x27;Parent&#x27; object has no attribute &#x27;studying&#x27; **parent 클래스에 정의 되어있지 않아서 에러가 남&quot;</span></span><br><span class="line">  child_kim.whoAmI()</span><br><span class="line">  parent_kim.whoAmI()</span><br></pre></td></tr></table></figure><pre><code>Child Class is ONkim 현재 춤을 춥니다.kim 연애을 노래합니다.I am Child I am Parent!!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span>:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># init constructor</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.__maxprice = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">sell</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Selling Price: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.__maxprice))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">setMaxPrice</span>(<span class="params">self, price</span>):</span><br><span class="line">    self.__maxprice = price</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  tv = TV()</span><br><span class="line">  tv.sell()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># change price</span></span><br><span class="line">  <span class="comment"># 안 바뀌는 코드의 예시</span></span><br><span class="line">  tv.__maxprice = <span class="number">1000</span></span><br><span class="line">  tv.sell()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># setMaxPrice</span></span><br><span class="line">  <span class="comment"># 값을 바꿀 수있다!? 외부의 입력값을 업데이트 할 수 있다!</span></span><br><span class="line">  tv.setMaxPrice(<span class="number">1000</span>)</span><br><span class="line">  tv.sell()</span><br></pre></td></tr></table></figure><pre><code>Selling Price: 500Selling Price: 500Selling Price: 1000</code></pre><h2 id="클래스-내부에-조건문"><a href="#클래스-내부에-조건문" class="headerlink" title="클래스 내부에  조건문"></a>클래스 내부에  조건문</h2><ul><li>init constructor에 조건문을 써보자!</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># init constructor</span></span><br><span class="line">  <span class="comment"># nmae , salary</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary = <span class="number">0</span></span>):</span><br><span class="line">    self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 조건문 추가</span></span><br><span class="line">    <span class="keyword">if</span> salary &gt; <span class="number">0</span>:</span><br><span class="line">      self.salary = salary</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      self.salary = <span class="number">0</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;급여는 0원이 될수 없다!. 다시 입력하십시오!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">update_salary</span>(<span class="params">self, amount</span>):</span><br><span class="line">    self.salary += amount</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">weekly_salary</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.salary / <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  emp01 = Employee(<span class="string">&quot;Winters&quot;</span>, -<span class="number">50000</span>)</span><br><span class="line">  <span class="built_in">print</span>(emp01.name)</span><br><span class="line">  <span class="built_in">print</span>(emp01.salary)</span><br><span class="line">  emp01.salary += <span class="number">1500</span></span><br><span class="line">  <span class="built_in">print</span>(emp01.salary)</span><br><span class="line">  emp01.update_salary(<span class="number">3000</span>)</span><br><span class="line">  <span class="built_in">print</span>(emp01.salary)</span><br><span class="line">  week_salary = emp01.weekly_salary()</span><br><span class="line">  <span class="built_in">print</span>(week_salary)</span><br></pre></td></tr></table></figure><pre><code>급여는 0원이 될수 없다!. 다시 입력하십시오!!Winters015004500642.8571428571429</code></pre><h2 id="클래스-Docstring"><a href="#클래스-Docstring" class="headerlink" title="클래스 Docstring"></a>클래스 Docstring</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  사람을 표현하는 클래스</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  Attributes</span></span><br><span class="line"><span class="string">  ------------</span></span><br><span class="line"><span class="string">  name : str</span></span><br><span class="line"><span class="string">    name of the person</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  age : int</span></span><br><span class="line"><span class="string">    age of the person</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Methods</span></span><br><span class="line"><span class="string">  -------------</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">  info(additional=&quot;&quot;):</span></span><br><span class="line"><span class="string">    prints the person&#x27;s name and age</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Constructs all the neccessary attributes for the person object</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    Parameters(매개변수)</span></span><br><span class="line"><span class="string">    -------------------------</span></span><br><span class="line"><span class="string">      name : str</span></span><br><span class="line"><span class="string">        name of the person</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      age : int</span></span><br><span class="line"><span class="string">        age of the person</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self, additional = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    귀찮음...</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    --------------</span></span><br><span class="line"><span class="string">      additional : str, optional</span></span><br><span class="line"><span class="string">        more info to be displayed (Default is None) / A, B, C</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returens</span></span><br><span class="line"><span class="string">    -----------</span></span><br><span class="line"><span class="string">      None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;My name is <span class="subst">&#123;self.name&#125;</span>. I am <span class="subst">&#123;self.age&#125;</span> years old. &#x27;</span> + additional)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    person = Person(<span class="string">&quot;Evan&quot;</span>, age = <span class="number">20</span>)</span><br><span class="line">    person.info(<span class="string">&quot;나의 직장은 00이야&quot;</span>)</span><br><span class="line">    <span class="built_in">help</span>(Person)</span><br></pre></td></tr></table></figure><pre><code>My name is Evan. I am 20 years old. 나의 직장은 00이야Help on class Person in module __main__:class Person(builtins.object) |  Person(name, age) |   |  사람을 표현하는 클래스 |   |   |   |  Attributes |  ------------ |  name : str |    name of the person |   |  age : int |    age of the person |   |  Methods |  ------------- |   |  info(additional=&quot;&quot;): |    prints the person&#39;s name and age |   |  Methods defined here: |   |  __init__(self, name, age) |      Constructs all the neccessary attributes for the person object |       |      Parameters(매개변수) |      ------------------------- |        name : str |          name of the person |       |        age : int |          age of the person |   |  info(self, additional=None) |      귀찮음... |       |      Parameters |      -------------- |        additional : str, optional |          more info to be displayed (Default is None) / A, B, C |       |       |      Returens |      ----------- |        None |   |  ---------------------------------------------------------------------- |  Data descriptors defined here: |   |  __dict__ |      dictionary for instance variables (if defined) |   |  __weakref__ |      list of weak references to the object (if defined)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;클래스를-만드는-목적&quot;&gt;&lt;a href=&quot;#클래스를-만드는-목적&quot; class=&quot;headerlink&quot; title=&quot;클래스를 만드는 목적!&quot;&gt;&lt;/a&gt;클래스를 만드는 목적!&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;코드의 간결화!&lt;ul&gt;
&lt;li&gt;코드를 재사용!&lt;</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>파이썬 기초 문법 2</title>
    <link href="https://ahnduhong.github.io/2022/03/22/python_grammer02/"/>
    <id>https://ahnduhong.github.io/2022/03/22/python_grammer02/</id>
    <published>2022-03-22T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기초-문법-리뷰"><a href="#기초-문법-리뷰" class="headerlink" title="기초 문법 리뷰"></a>기초 문법 리뷰</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트</span></span><br><span class="line">book_list = [<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>]</span><br><span class="line"><span class="comment"># append, extend, insert, remove, pop, etc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 튜플</span></span><br><span class="line">book_tuple = (<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="comment"># 수정 삭제가 불가능하다</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 딕셔너리</span></span><br><span class="line">book_dictionary = &#123;<span class="string">&quot;책 제목&quot;</span> : [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>], <span class="string">&quot;출판년도&quot;</span> :[<span class="number">2011</span>, <span class="number">2002</span>]&#125;</span><br><span class="line"><span class="comment"># keys(), values(), items(), get()</span></span><br></pre></td></tr></table></figure><h2 id="조건문-amp-반복문"><a href="#조건문-amp-반복문" class="headerlink" title="조건문 &amp; 반복문"></a>조건문 &amp; 반복문</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;코드 실행&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="literal">True</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;코드 실행&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;코드 실행&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">  <span class="built_in">print</span>(i+<span class="number">1</span>, <span class="string">&quot;안녕하세요&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>1 안녕하세요2 안녕하세요3 안녕하세요</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">book_list = [<span class="string">&quot;프로그래밍 R&quot;</span>, <span class="string">&quot;혼자 공부하는 머신러닝&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> book_list:</span><br><span class="line">  <span class="built_in">print</span>(book)</span><br></pre></td></tr></table></figure><pre><code>프로그래밍 R혼자 공부하는 머신러닝</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strings01 = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> strings01:</span><br><span class="line">  <span class="built_in">print</span>(char)</span><br></pre></td></tr></table></figure><pre><code>Hello World</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> num_tuple:</span><br><span class="line">  <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><pre><code>1234</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num_dict = &#123;<span class="string">&quot;A&quot;</span> : <span class="number">1</span>, <span class="string">&quot;B&quot;</span> : <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> num_dict:</span><br><span class="line">  <span class="comment"># print(num) # keys 값이 나옴, value값이 아니라.</span></span><br><span class="line">  <span class="built_in">print</span>(num_dict[num])</span><br></pre></td></tr></table></figure><pre><code>12</code></pre><h2 id="반복문의-필요성"><a href="#반복문의-필요성" class="headerlink" title="반복문의 필요성"></a>반복문의 필요성</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">product_name = [<span class="string">&quot;요구르트&quot;</span>, <span class="string">&quot;우유&quot;</span>, <span class="string">&quot;과자&quot;</span>]</span><br><span class="line">prices = [<span class="number">1000</span>, <span class="number">1500</span>, <span class="number">2000</span>]</span><br><span class="line">quantities = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># name = product_name[0]</span></span><br><span class="line"><span class="comment"># sales = prices[0] * quantities[0]</span></span><br><span class="line"><span class="comment"># print(name + &quot;의 매출액은&quot; + str(sales) + &quot;원이다.&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name = product_name[1]</span></span><br><span class="line"><span class="comment"># sales = prices[1] * quantities[1]</span></span><br><span class="line"><span class="comment"># print(name + &quot;의 매출액은&quot; + str(sales) + &quot;원이다.&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 위 코드의 반복문 코드 작성 필요 절감</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(product_name)):</span><br><span class="line">  name = product_name[i]</span><br><span class="line">  sales = prices[i] * quantities[i]</span><br><span class="line">  <span class="built_in">print</span>(name + <span class="string">&quot;의 매출액은&quot;</span> + <span class="built_in">str</span>(sales) + <span class="string">&quot;원이다.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>요구르트의 매출액은5000원이다.우유의 매출액은4500원이다.과자의 매출액은8000원이다.</code></pre><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><ul><li>조건식이 들어간 반복문</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">5</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;안녕하세요..&quot;</span>)</span><br><span class="line">  count += <span class="number">1</span></span><br><span class="line">  <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5 초과 했군요..&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>안녕하세요..2안녕하세요..3안녕하세요..4안녕하세요..5안녕하세요..65 초과 했군요..</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;안녕하세요..&quot;</span>)</span><br><span class="line">  count -= <span class="number">1</span></span><br><span class="line">  <span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><pre><code>안녕하세요..2안녕하세요..1안녕하세요..0</code></pre><h2 id="리스트-컴프리헨션"><a href="#리스트-컴프리헨션" class="headerlink" title="리스트 컴프리헨션"></a>리스트 컴프리헨션</h2><ul><li>for-loop 반복문을 한줄로 처리</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">my_list = [[<span class="number">10</span>], [<span class="number">20</span>, <span class="number">30</span>]]</span><br><span class="line"><span class="comment"># print(my_list)</span></span><br><span class="line"></span><br><span class="line">flattened_list = []</span><br><span class="line"><span class="keyword">for</span> value_list <span class="keyword">in</span> my_list:</span><br><span class="line">  <span class="comment"># print(value_list)</span></span><br><span class="line">  <span class="keyword">for</span> value <span class="keyword">in</span> value_list:</span><br><span class="line">    <span class="comment"># print(value)</span></span><br><span class="line">    flattened_list.append(value)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flattened_list)</span><br><span class="line"><span class="comment"># 결괏값 : [10, 20 ,30]</span></span><br></pre></td></tr></table></figure><pre><code>[10][20, 30][10, 20, 30]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [[<span class="number">10</span>], [<span class="number">20</span>, <span class="number">30</span>]]</span><br><span class="line">flattened_list = [value <span class="keyword">for</span> value_list <span class="keyword">in</span> my_list <span class="keyword">for</span> value <span class="keyword">in</span> value_list]</span><br><span class="line"><span class="built_in">print</span>(flattened_list)</span><br></pre></td></tr></table></figure><pre><code>[10, 20, 30]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">letters = []</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&quot;helloworld&quot;</span>:</span><br><span class="line">  letters.append(char)</span><br><span class="line"><span class="built_in">print</span>(letters)</span><br></pre></td></tr></table></figure><pre><code>[&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letters2 = [char <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&quot;helloworld&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(letters2)</span><br></pre></td></tr></table></figure><pre><code>[&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;]</code></pre><h2 id="사용자-정의-함수-User-Defined-Function"><a href="#사용자-정의-함수-User-Defined-Function" class="headerlink" title="사용자 정의 함수 (User-Defined Function)"></a>사용자 정의 함수 (User-Defined Function)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">함수명</span>():</span><br><span class="line">  <span class="comment"># 코드 실행</span></span><br><span class="line">  <span class="keyword">return</span> 값</span><br><span class="line"></span><br><span class="line">함수명()</span><br></pre></td></tr></table></figure><ul><li>basic.py로 저장할떄, 예시</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /user/local/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">temp</span>(<span class="params">content, letter</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;content안에 있는 문자를 세는 함수입니다.</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    content(str) : 탐색 문자열</span></span><br><span class="line"><span class="string">    letter(str) : 찾을 문자열</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Returns:</span></span><br><span class="line"><span class="string">    int</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;함수 테스트&quot;</span>)</span><br><span class="line"></span><br><span class="line">  cnt = <span class="built_in">len</span>([char <span class="keyword">for</span> char <span class="keyword">in</span> content <span class="keyword">if</span> char == letter])</span><br><span class="line">  <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  <span class="built_in">help</span>(temp)</span><br><span class="line">  docstring = temp.__doc__ <span class="comment"># docstring 문서화</span></span><br><span class="line">  <span class="built_in">print</span>(docstring)</span><br></pre></td></tr></table></figure><pre><code>Help on function temp in module __main__:temp(content, letter)    content안에 있는 문자를 세는 함수입니다.        Args:      content(str) : 탐색 문자열      letter(str) : 찾을 문자열        Returns:      intcontent안에 있는 문자를 세는 함수입니다.    Args:    content(str) : 탐색 문자열    letter(str) : 찾을 문자열  Returns:    int  </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">value_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;avg:&quot;</span>, <span class="built_in">sum</span>(value_list) / <span class="built_in">len</span>(value_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 중간값</span></span><br><span class="line">midpoint = <span class="built_in">int</span>(<span class="built_in">len</span>(value_list) / <span class="number">2</span>)</span><br><span class="line"><span class="comment"># len(value_list) % 2 == 0:</span></span><br><span class="line"><span class="built_in">print</span>((value_list[midpoint - <span class="number">1</span>] + value_list[midpoint]) / <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(value_list[midpoint])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean_and_median</span>(<span class="params">value_list</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot; 숫자 리스트 요소들의 평균과 중간값을 구하는 코드를 작성해라</span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    value_list (iterable of int / float): A list of int numbers</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  Return:</span></span><br><span class="line"><span class="string">    tuple(float, float)</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="comment"># 평균</span></span><br><span class="line">  mean = <span class="built_in">sum</span>(value_list) / <span class="built_in">len</span>(value_list)</span><br><span class="line">  <span class="comment"># 중간값</span></span><br><span class="line">  midpoint = <span class="built_in">int</span>(<span class="built_in">len</span>(value_list) / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(value_list) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    median = (value_list[midpoint - <span class="number">1</span>] + value_list[midpoint]) / <span class="number">2</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    median = value_list[midpoint]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mean, median</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  value_lists = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  avg, median = mean_and_median(value_lists)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;avg:&quot;</span>, avg)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;median:&quot;</span>, median)</span><br></pre></td></tr></table></figure><pre><code>avg: 3.53.54avg: 2.5714285714285716median: 2</code></pre><ul><li>데코레이터, 변수명 immutable or mutable<br>context manager</li></ul><h2 id="함수-클로저-사용하기"><a href="#함수-클로저-사용하기" class="headerlink" title="함수 클로저 사용하기"></a>함수 클로저 사용하기</h2><ul><li>global 함수 (전역 변수 변경)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">  x = <span class="number">20</span></span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><pre><code>1020</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">  <span class="keyword">global</span> x <span class="comment"># 전역 변수를 설정하겠다</span></span><br><span class="line">  x = <span class="number">20</span></span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><pre><code>1020</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;기초-문법-리뷰&quot;&gt;&lt;a href=&quot;#기초-문법-리뷰&quot; class=&quot;headerlink&quot; title=&quot;기초 문법 리뷰&quot;&gt;&lt;/a&gt;기초 문법 리뷰&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
  <entry>
    <title>파이썬 기초 문법 1</title>
    <link href="https://ahnduhong.github.io/2022/03/21/Python_grammer01/"/>
    <id>https://ahnduhong.github.io/2022/03/21/Python_grammer01/</id>
    <published>2022-03-21T00:00:00.000Z</published>
    <updated>2022-04-12T01:50:19.879Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>hello world!</code></pre><h1 id="주석처리"><a href="#주석처리" class="headerlink" title="주석처리"></a>주석처리</h1><ul><li>코드 작업 시, 특정 코드에 대해 설명</li><li>사용자 정의 함수 작성 시, 클래스 작성 시.. (도움말 작성..)</li></ul><h1 id="변수-Scalar"><a href="#변수-Scalar" class="headerlink" title="변수 (Scalar)"></a>변수 (Scalar)</h1><ul><li>객체 (Object)로 구현이 됨<ul><li>하나의 자료형 (Type)을 가진다.</li><li>클래스로 정의가 됨.<ul><li>다양한 함수들이 존재 함.</li></ul></li></ul></li></ul><h2 id="int"><a href="#int" class="headerlink" title="int"></a>int</h2><ul><li>int 정수를 표한하는데 사용함.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_int = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(num_int)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num_int))</span><br></pre></td></tr></table></figure><pre><code>1&lt;class &#39;int&#39;&gt;</code></pre><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><ul><li>실수를 표현하는데 사용한다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_float = <span class="number">0.2</span></span><br><span class="line"><span class="built_in">print</span>(num_float)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num_float))</span><br></pre></td></tr></table></figure><pre><code>0.2&lt;class &#39;float&#39;&gt;</code></pre><h2 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h2><ul><li>True와 False로 나타내는 Boolean 값을 표현하는데 사용한다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bool_true = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(bool_true)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(bool_true))</span><br></pre></td></tr></table></figure><pre><code>True&lt;class &#39;bool&#39;&gt;</code></pre><h2 id="None"><a href="#None" class="headerlink" title="None"></a>None</h2><ul><li>Null을 나타내는 자료형으로 Nonen이라는 한 가지 값만 가집니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">none_x = <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(none_x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(none_x))</span><br></pre></td></tr></table></figure><pre><code>None&lt;class &#39;NoneType&#39;&gt;</code></pre><h1 id="사칙연산"><a href="#사칙연산" class="headerlink" title="사칙연산"></a>사칙연산</h1><ul><li>정수형 사칙 연산</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a + b = &#x27;</span>, a + b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a % b = &#x27;</span>, a % b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a / b = &#x27;</span>, a / b) <span class="comment"># 나누기를 했을때 type이 실수형(float)으로 바뀜.</span></span><br></pre></td></tr></table></figure><pre><code>a + b =  6a % b =  2a / b =  0.5</code></pre><h1 id="논리형-연산자"><a href="#논리형-연산자" class="headerlink" title="논리형 연산자"></a>논리형 연산자</h1><ul><li>Bool 형은 True와 False 값으로 정의</li><li>AND &#x2F; OR</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span> &gt; <span class="number">4</span></span><br><span class="line">y = <span class="number">3</span> &gt; <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">and</span> x)</span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">and</span> y)</span><br><span class="line"><span class="built_in">print</span>(y <span class="keyword">and</span> x)</span><br><span class="line"><span class="built_in">print</span>(y <span class="keyword">and</span> y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">or</span> x)</span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">or</span> y)</span><br><span class="line"><span class="built_in">print</span>(y <span class="keyword">or</span> x)</span><br><span class="line"><span class="built_in">print</span>(y <span class="keyword">or</span> y)</span><br></pre></td></tr></table></figure><pre><code>TrueFalseFalseFalse-----TrueTrueTrueFalse</code></pre><h1 id="비교-연산자"><a href="#비교-연산자" class="headerlink" title="비교 연산자"></a>비교 연산자</h1><ul><li>부등호를 의미합니다.</li><li>비교 연산자를 True와 False값을 도출</li></ul><h2 id="논리-amp-비교-연산자-응용"><a href="#논리-amp-비교-연산자-응용" class="headerlink" title="논리 &amp; 비교 연산자 응용"></a>논리 &amp; 비교 연산자 응용</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="built_in">input</span>(<span class="string">&quot;입력하여 주세요....&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var))</span><br></pre></td></tr></table></figure><pre><code>입력하여 주세요....5&lt;class &#39;str&#39;&gt;</code></pre><ul><li>형변환을 해준다.</li><li>문자열, 정수, 실수 등등</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="built_in">int</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;int&#39;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;숫자를 입력하여 주세요&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var))</span><br></pre></td></tr></table></figure><pre><code>숫자를 입력하여 주세요3&lt;class &#39;int&#39;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;숫자를 입력하여 주세요&quot;</span>))</span><br><span class="line">num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;숫자를 입력하여 주세요&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num1 &gt; num2)</span><br></pre></td></tr></table></figure><pre><code>숫자를 입력하여 주세요10숫자를 입력하여 주세요5True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;숫자를 입력하여 주세요&quot;</span>))</span><br><span class="line">num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;숫자를 입력하여 주세요&quot;</span>))</span><br><span class="line">num3 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;숫자를 입력하여 주세요&quot;</span>))</span><br><span class="line">num4 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;숫자를 입력하여 주세요&quot;</span>))</span><br><span class="line"></span><br><span class="line">var1 = num11 &gt;= num2 <span class="comment">#True</span></span><br><span class="line">var2 = num3 &lt; num4 <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(var1 <span class="keyword">and</span> var2)</span><br><span class="line"><span class="built_in">print</span>(var1 <span class="keyword">or</span> var2)</span><br></pre></td></tr></table></figure><pre><code>숫자를 입력하여 주세요20숫자를 입력하여 주세요15숫자를 입력하여 주세요3숫자를 입력하여 주세요5TrueTrue</code></pre><h1 id="변수-Non-Scalar"><a href="#변수-Non-Scalar" class="headerlink" title="변수 (Non Scalar)"></a>변수 (Non Scalar)</h1><ul><li>문자열을 입력</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;Hello, World&#x27;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&quot;Hello, World&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>&#39;Hello, World&#39;&quot;Hello, World&quot;</code></pre><h2 id="String-연산자"><a href="#String-연산자" class="headerlink" title="String 연산자"></a>String 연산자</h2><ul><li>덧셈 연산자를 써보자.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;Hello &quot;</span></span><br><span class="line">str2 = <span class="string">&quot;World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1 + str2)</span><br></pre></td></tr></table></figure><pre><code>Hello World!</code></pre><h2 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h2><ul><li>문자열 인덱싱은 각각의 문자열 안에서 범위를 지정하여 특정 문자를 추린다</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">greeting = <span class="string">&quot;Hello Kaggle!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(greeting[<span class="number">6</span>])</span><br></pre></td></tr></table></figure><pre><code>K</code></pre><h2 id="리스트"><a href="#리스트" class="headerlink" title="리스트"></a>리스트</h2><ul><li>시퀀스 데이터 타입</li><li>데이터에 순서가 존재하는지, 슬라이싱이 가능하는지</li><li>대괄호 (‘[값]’)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = [] <span class="comment"># 빈 리스트</span></span><br><span class="line">a_func = <span class="built_in">list</span>() <span class="comment"># 빈 리스트 생성</span></span><br><span class="line">b = [<span class="number">1</span>] <span class="comment"># 숫자가 요소가 될 수 있다.</span></span><br><span class="line">c = [<span class="string">&#x27;apple&#x27;</span>] <span class="comment"># 문자열도 요소가 될 수 있다.</span></span><br><span class="line">d = [<span class="number">1</span>, <span class="number">2</span>, [<span class="string">&#x27;apple&#x27;</span>]] <span class="comment"># 리스트 안에 또 다른 리스트를 요소로 넣을 수 있다.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a_func)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))</span><br></pre></td></tr></table></figure><pre><code>[][][1][&#39;apple&#39;][1, 2, [&#39;apple&#39;]]&lt;class &#39;list&#39;&gt;</code></pre><h2 id="리스트-슬라이싱"><a href="#리스트-슬라이싱" class="headerlink" title="리스트 슬라이싱"></a>리스트 슬라이싱</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a =[ [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>], <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>][<span class="number">2</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>e</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>]) <span class="comment"># 역순</span></span><br><span class="line"><span class="built_in">print</span>(a[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>[10, 9, 8, 7, 6, 5, 4, 3, 2, 1][1, 3, 5, 7, 9]</code></pre><h2 id="리스트-연산자"><a href="#리스트-연산자" class="headerlink" title="리스트 연산자"></a>리스트 연산자</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&quot;john&quot;</span>, <span class="string">&quot;evan&quot;</span>]</span><br><span class="line">b = [<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;eva&quot;</span>]</span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><pre><code>[&#39;john&#39;, &#39;evan&#39;, &#39;alice&#39;, &#39;eva&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c = a * <span class="number">3</span></span><br><span class="line">d = b * <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a * 3 = &quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b * 0 = &quot;</span>, d)</span><br></pre></td></tr></table></figure><pre><code>a * 3 =  [&#39;john&#39;, &#39;evan&#39;, &#39;john&#39;, &#39;evan&#39;, &#39;john&#39;, &#39;evan&#39;]b * 0 =  []</code></pre><h2 id="리스트-수정-및-삭제"><a href="#리스트-수정-및-삭제" class="headerlink" title="리스트 수정 및 삭제"></a>리스트 수정 및 삭제</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">a[<span class="number">1</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[0, &#39;b&#39;, 2]</code></pre><h2 id="리스트-값-추가하기"><a href="#리스트-값-추가하기" class="headerlink" title="리스트 값 추가하기"></a>리스트 값 추가하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line">a.append(<span class="number">400</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a.append([500, 600])</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"></span><br><span class="line">a.extend([<span class="number">500</span>, <span class="number">600</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[100, 200, 300, 400][100, 200, 300, 400, 500, 600]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment"># a.insert(인덱스번호, 넣고자하는 값)</span></span><br><span class="line">a.insert(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[0, 100, 1, 2]</code></pre><h2 id="리스트-값-삭제하기"><a href="#리스트-값-삭제하기" class="headerlink" title="리스트 값 삭제하기"></a>리스트 값 삭제하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;A&quot;</span>]</span><br><span class="line">a.remove(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a.remove(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[2, 3, 4, &#39;A&#39;][2, 3, 4]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">1</span>] <span class="comment"># 인덱스 번호</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[1, 3, 4, 5, 6, 7, 8, 9, 10][1, 7, 8, 9, 10]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line">x = b.pop()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><pre><code>d[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></pre><h3 id="그-외-메서드"><a href="#그-외-메서드" class="headerlink" title="그 외 메서드"></a>그 외 메서드</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">a.clear()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>[0, 1, 2, 3][]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&quot;b&quot;</span>)) <span class="comment">#  반복 되는 문구가 있을때 index를 쓰면 첫번째 문자의 위치가 출력.</span></span><br></pre></td></tr></table></figure><pre><code>2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a.sort():&quot;</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 내림차순, sort()</span></span><br><span class="line">b.sort(reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sort(reverse = True): &quot;</span>, b)</span><br></pre></td></tr></table></figure><pre><code>a.sort(): [1, 2, 3, 4, 5]Nonesort(reverse = True):  [5, 4, 3, 2, 1]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="comment"># c.srot() 숫자와 문자는 정렬 불가.</span></span><br></pre></td></tr></table></figure><h2 id="튜플"><a href="#튜플" class="headerlink" title="튜플"></a>튜플</h2><ul><li>List와 비슷하다.</li><li>슬라이싱, 인덱싱 등등</li><li>(vs 리스트) : 튜플은 수정 삭제가 안된다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">0</span>) <span class="comment"># 끝에 콤마(,)를 붙이지 않을 때</span></span><br><span class="line">tuple2 = (<span class="number">0</span>,) <span class="comment"># 끝에 콤마(,)를 붙일때</span></span><br><span class="line">tuple3 = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(tuple1) <span class="comment"># int</span></span><br><span class="line"><span class="built_in">print</span>(tuple2) <span class="comment"># tuple</span></span><br><span class="line"><span class="built_in">print</span>(tuple3) <span class="comment"># tuple</span></span><br></pre></td></tr></table></figure><pre><code>0(0,)(0, 1, 2)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># del a[4] TypeError: &#x27;tuple&#x27; object doesn&#x27;t support item deletion</span></span><br><span class="line"><span class="comment"># a[1] = &quot;b&quot;</span></span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;tuple&#39;&gt;</code></pre><h2 id="튜플-인덱싱-및-슬라이싱-하기"><a href="#튜플-인덱싱-및-슬라이싱-하기" class="headerlink" title="튜플 인덱싱 및 슬라이싱 하기"></a>튜플 인덱싱 및 슬라이싱 하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><pre><code>13a</code></pre><h2 id="더하기-곱셈-연산자-사용"><a href="#더하기-곱셈-연산자-사용" class="headerlink" title="더하기 곱셈 연산자 사용"></a>더하기 곱셈 연산자 사용</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">t2 = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t1 + t2)</span><br><span class="line"><span class="built_in">print</span>(t1 * <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>(0, 1, 2, &#39;a&#39;, &#39;b&#39;)(0, 1, 2, 0, 1, 2, 0, 1, 2)</code></pre><h2 id="딕셔너리"><a href="#딕셔너리" class="headerlink" title="딕셔너리"></a>딕셔너리</h2><ul><li>key-value 값으로 나뉨.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict_01 = &#123;<span class="string">&#x27;teacher&#x27;</span> : <span class="string">&#x27;evan&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;class&#x27;</span> : <span class="number">601</span>,</span><br><span class="line">           <span class="string">&#x27;student&#x27;</span> : <span class="number">24</span>,</span><br><span class="line">           <span class="string">&#x27;학생이름&#x27;</span> : [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>]&#125;</span><br><span class="line"><span class="comment"># print(dict_01)</span></span><br><span class="line"><span class="built_in">print</span>(dict_01[<span class="string">&#x27;teacher&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(dict_01[<span class="string">&#x27;class&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(dict_01[<span class="string">&#x27;학생이름&#x27;</span>])</span><br></pre></td></tr></table></figure><pre><code>evan601[&#39;A&#39;, &#39;Z&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict_01.keys()))</span><br><span class="line"><span class="built_in">print</span>(dict_01.keys())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dict_01.keys()))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;dict_keys&#39;&gt;dict_keys([&#39;teacher&#39;, &#39;class&#39;, &#39;student&#39;, &#39;학생이름&#39;])[&#39;teacher&#39;, &#39;class&#39;, &#39;student&#39;, &#39;학생이름&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict_01.values()))</span><br><span class="line"><span class="built_in">print</span>(dict_01.values())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dict_01.values()))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;dict_values&#39;&gt;dict_values([&#39;evan&#39;, 601, 24, [&#39;A&#39;, &#39;Z&#39;]])[&#39;evan&#39;, 601, 24, [&#39;A&#39;, &#39;Z&#39;]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_01.items()</span><br></pre></td></tr></table></figure><pre><code>dict_items([(&#39;teacher&#39;, &#39;evan&#39;), (&#39;class&#39;, 601), (&#39;student&#39;, 24), (&#39;학생이름&#39;, [&#39;A&#39;, &#39;Z&#39;])])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(dict_01.get(<span class="string">&quot;teacher&quot;</span>, <span class="string">&quot;값 없음&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(dict_01.get(<span class="string">&quot;선생님&quot;</span>, <span class="string">&quot;값 없음&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(dict_01.get(<span class="string">&quot;class&quot;</span>))</span><br></pre></td></tr></table></figure><pre><code>evan값 없음601</code></pre><h2 id="조건문-amp-반복문"><a href="#조건문-amp-반복문" class="headerlink" title="조건문 &amp; 반복문"></a>조건문 &amp; 반복문</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">weather = <span class="string">&quot;맑음&quot;</span></span><br><span class="line"><span class="keyword">if</span> weather == <span class="string">&quot;비&quot;</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;우산을 가져간다.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;우산을 가져가지 않는다.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>우산을 가져가지 않는다.</code></pre><ul><li>등급표 만들기</li><li>60점 이상 합격&#x2F;불합격</li><li>숫자는 아무거나 써도 상관없음</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">score =<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;점수를 입력해주세요.&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;합격&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;불합격&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>점수를 입력해주세요.60합격</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 90점 이상은 A등급</span></span><br><span class="line"><span class="comment"># 80점 이상은 B등급</span></span><br><span class="line"><span class="comment"># 나머지는 F등급</span></span><br><span class="line"></span><br><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;점수를 입력해주세요&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;A등급&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;B등급&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;F등급&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>점수를 입력해주세요56F등급</code></pre><h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><ul><li>for 문</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">  <span class="built_in">print</span>(i + <span class="number">1</span>, <span class="string">&quot;안녕하세요!&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>1 안녕하세요!2 안녕하세요!3 안녕하세요!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="built_in">range</span>(<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> count:</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">str</span>(n + <span class="number">1</span>) + <span class="string">&quot;번째&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (n + <span class="number">1</span>) == <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;그만합시다!!&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;축구 슈팅&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>range(0, 50)1번째축구 슈팅2번째축구 슈팅3번째축구 슈팅4번째축구 슈팅5번째그만합시다!!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">  <span class="keyword">if</span> x == <span class="string">&quot;l&quot;</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><pre><code>he</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alphabets = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(alphabets):</span><br><span class="line">  <span class="built_in">print</span>(index, value)</span><br></pre></td></tr></table></figure><pre><code>0 A1 B2 C</code></pre><ul><li>while문</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;<span class="number">10</span>:</span><br><span class="line">  n += <span class="number">1</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;%d번째 인사입니다.&quot;</span> % n)</span><br></pre></td></tr></table></figure><pre><code>1번째 인사입니다.2번째 인사입니다.3번째 인사입니다.4번째 인사입니다.5번째 인사입니다.6번째 인사입니다.7번째 인사입니다.8번째 인사입니다.9번째 인사입니다.10번째 인사입니다.</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="Education" scheme="https://ahnduhong.github.io/categories/Education/"/>
    
    
    <category term="edu" scheme="https://ahnduhong.github.io/tags/edu/"/>
    
  </entry>
  
</feed>
